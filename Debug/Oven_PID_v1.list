
Oven_PID_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800c580  0800c580  0001c580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cad4  0800cad4  00020364  2**0
                  CONTENTS
  4 .ARM          00000000  0800cad4  0800cad4  00020364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cad4  0800cad4  00020364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cad4  0800cad4  0001cad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cad8  0800cad8  0001cad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000364  20000000  0800cadc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000704  20000364  0800ce40  00020364  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800ce40  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020364  2**0
                  CONTENTS, READONLY
 12 .comment      000000b1  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a06  00000000  00000000  0002043d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003904  00000000  00000000  00038e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110d  00000000  00000000  0003dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001497e  00000000  00000000  0003ee45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c325  00000000  00000000  000537c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00071ae2  00000000  00000000  0006fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000616c  00000000  00000000  000e15cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000e7738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000014c  00000000  00000000  000e7798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  000e78e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000364 	.word	0x20000364
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c564 	.word	0x0800c564

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000368 	.word	0x20000368
 8000104:	0800c564 	.word	0x0800c564

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd6b 	bl	8001f18 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fcbb 	bl	8001dc8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd5d 	bl	8001f18 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fd53 	bl	8001f18 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fce3 	bl	8001e4c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fcd9 	bl	8001e4c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4647      	mov	r7, r8
 80004ac:	46ce      	mov	lr, r9
 80004ae:	024a      	lsls	r2, r1, #9
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	0fc4      	lsrs	r4, r0, #31
 80004b6:	0a50      	lsrs	r0, r2, #9
 80004b8:	4680      	mov	r8, r0
 80004ba:	0048      	lsls	r0, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0e00      	lsrs	r0, r0, #24
 80004c0:	0992      	lsrs	r2, r2, #6
 80004c2:	4694      	mov	ip, r2
 80004c4:	b580      	push	{r7, lr}
 80004c6:	001e      	movs	r6, r3
 80004c8:	4681      	mov	r9, r0
 80004ca:	0002      	movs	r2, r0
 80004cc:	0e2d      	lsrs	r5, r5, #24
 80004ce:	00df      	lsls	r7, r3, #3
 80004d0:	0fc9      	lsrs	r1, r1, #31
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d024      	beq.n	8000520 <__aeabi_fadd+0x78>
 80004d6:	1a28      	subs	r0, r5, r0
 80004d8:	2800      	cmp	r0, #0
 80004da:	dd0e      	ble.n	80004fa <__aeabi_fadd+0x52>
 80004dc:	2a00      	cmp	r2, #0
 80004de:	d13e      	bne.n	800055e <__aeabi_fadd+0xb6>
 80004e0:	4662      	mov	r2, ip
 80004e2:	2a00      	cmp	r2, #0
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x40>
 80004e6:	e0fd      	b.n	80006e4 <__aeabi_fadd+0x23c>
 80004e8:	1e42      	subs	r2, r0, #1
 80004ea:	2801      	cmp	r0, #1
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x48>
 80004ee:	e137      	b.n	8000760 <__aeabi_fadd+0x2b8>
 80004f0:	28ff      	cmp	r0, #255	; 0xff
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e0a9      	b.n	800064a <__aeabi_fadd+0x1a2>
 80004f6:	0010      	movs	r0, r2
 80004f8:	e039      	b.n	800056e <__aeabi_fadd+0xc6>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d063      	beq.n	80005c6 <__aeabi_fadd+0x11e>
 80004fe:	464b      	mov	r3, r9
 8000500:	1b52      	subs	r2, r2, r5
 8000502:	2d00      	cmp	r5, #0
 8000504:	d000      	beq.n	8000508 <__aeabi_fadd+0x60>
 8000506:	e0e0      	b.n	80006ca <__aeabi_fadd+0x222>
 8000508:	2f00      	cmp	r7, #0
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x66>
 800050c:	e0ce      	b.n	80006ac <__aeabi_fadd+0x204>
 800050e:	1e53      	subs	r3, r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d100      	bne.n	8000516 <__aeabi_fadd+0x6e>
 8000514:	e155      	b.n	80007c2 <__aeabi_fadd+0x31a>
 8000516:	2aff      	cmp	r2, #255	; 0xff
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x74>
 800051a:	e094      	b.n	8000646 <__aeabi_fadd+0x19e>
 800051c:	001a      	movs	r2, r3
 800051e:	e0d9      	b.n	80006d4 <__aeabi_fadd+0x22c>
 8000520:	1a2a      	subs	r2, r5, r0
 8000522:	2a00      	cmp	r2, #0
 8000524:	dc00      	bgt.n	8000528 <__aeabi_fadd+0x80>
 8000526:	e099      	b.n	800065c <__aeabi_fadd+0x1b4>
 8000528:	2800      	cmp	r0, #0
 800052a:	d062      	beq.n	80005f2 <__aeabi_fadd+0x14a>
 800052c:	2dff      	cmp	r5, #255	; 0xff
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x8a>
 8000530:	e08b      	b.n	800064a <__aeabi_fadd+0x1a2>
 8000532:	2380      	movs	r3, #128	; 0x80
 8000534:	4661      	mov	r1, ip
 8000536:	04db      	lsls	r3, r3, #19
 8000538:	4319      	orrs	r1, r3
 800053a:	468c      	mov	ip, r1
 800053c:	2a1b      	cmp	r2, #27
 800053e:	dc00      	bgt.n	8000542 <__aeabi_fadd+0x9a>
 8000540:	e0d2      	b.n	80006e8 <__aeabi_fadd+0x240>
 8000542:	2301      	movs	r3, #1
 8000544:	19db      	adds	r3, r3, r7
 8000546:	015a      	lsls	r2, r3, #5
 8000548:	d56a      	bpl.n	8000620 <__aeabi_fadd+0x178>
 800054a:	3501      	adds	r5, #1
 800054c:	2dff      	cmp	r5, #255	; 0xff
 800054e:	d05b      	beq.n	8000608 <__aeabi_fadd+0x160>
 8000550:	2201      	movs	r2, #1
 8000552:	49a3      	ldr	r1, [pc, #652]	; (80007e0 <__aeabi_fadd+0x338>)
 8000554:	401a      	ands	r2, r3
 8000556:	085b      	lsrs	r3, r3, #1
 8000558:	400b      	ands	r3, r1
 800055a:	4313      	orrs	r3, r2
 800055c:	e01c      	b.n	8000598 <__aeabi_fadd+0xf0>
 800055e:	2dff      	cmp	r5, #255	; 0xff
 8000560:	d100      	bne.n	8000564 <__aeabi_fadd+0xbc>
 8000562:	e072      	b.n	800064a <__aeabi_fadd+0x1a2>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	4662      	mov	r2, ip
 8000568:	04db      	lsls	r3, r3, #19
 800056a:	431a      	orrs	r2, r3
 800056c:	4694      	mov	ip, r2
 800056e:	281b      	cmp	r0, #27
 8000570:	dc00      	bgt.n	8000574 <__aeabi_fadd+0xcc>
 8000572:	e090      	b.n	8000696 <__aeabi_fadd+0x1ee>
 8000574:	2301      	movs	r3, #1
 8000576:	1afb      	subs	r3, r7, r3
 8000578:	015a      	lsls	r2, r3, #5
 800057a:	d551      	bpl.n	8000620 <__aeabi_fadd+0x178>
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	099e      	lsrs	r6, r3, #6
 8000580:	0030      	movs	r0, r6
 8000582:	f002 fc63 	bl	8002e4c <__clzsi2>
 8000586:	0033      	movs	r3, r6
 8000588:	3805      	subs	r0, #5
 800058a:	4083      	lsls	r3, r0
 800058c:	4285      	cmp	r5, r0
 800058e:	dc00      	bgt.n	8000592 <__aeabi_fadd+0xea>
 8000590:	e075      	b.n	800067e <__aeabi_fadd+0x1d6>
 8000592:	4a94      	ldr	r2, [pc, #592]	; (80007e4 <__aeabi_fadd+0x33c>)
 8000594:	1a2d      	subs	r5, r5, r0
 8000596:	4013      	ands	r3, r2
 8000598:	075a      	lsls	r2, r3, #29
 800059a:	d004      	beq.n	80005a6 <__aeabi_fadd+0xfe>
 800059c:	220f      	movs	r2, #15
 800059e:	401a      	ands	r2, r3
 80005a0:	2a04      	cmp	r2, #4
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0xfe>
 80005a4:	3304      	adds	r3, #4
 80005a6:	015a      	lsls	r2, r3, #5
 80005a8:	d53c      	bpl.n	8000624 <__aeabi_fadd+0x17c>
 80005aa:	1c68      	adds	r0, r5, #1
 80005ac:	2dfe      	cmp	r5, #254	; 0xfe
 80005ae:	d02b      	beq.n	8000608 <__aeabi_fadd+0x160>
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	0a5e      	lsrs	r6, r3, #9
 80005b4:	b2c0      	uxtb	r0, r0
 80005b6:	05c0      	lsls	r0, r0, #23
 80005b8:	4330      	orrs	r0, r6
 80005ba:	07e4      	lsls	r4, r4, #31
 80005bc:	4320      	orrs	r0, r4
 80005be:	bcc0      	pop	{r6, r7}
 80005c0:	46b9      	mov	r9, r7
 80005c2:	46b0      	mov	r8, r6
 80005c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005c6:	20fe      	movs	r0, #254	; 0xfe
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	4210      	tst	r0, r2
 80005cc:	d172      	bne.n	80006b4 <__aeabi_fadd+0x20c>
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d000      	beq.n	80005d4 <__aeabi_fadd+0x12c>
 80005d2:	e0ae      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005d4:	2f00      	cmp	r7, #0
 80005d6:	d100      	bne.n	80005da <__aeabi_fadd+0x132>
 80005d8:	e0ec      	b.n	80007b4 <__aeabi_fadd+0x30c>
 80005da:	4663      	mov	r3, ip
 80005dc:	2000      	movs	r0, #0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0e9      	beq.n	80005b6 <__aeabi_fadd+0x10e>
 80005e2:	1afb      	subs	r3, r7, r3
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d400      	bmi.n	80005ea <__aeabi_fadd+0x142>
 80005e8:	e0f3      	b.n	80007d2 <__aeabi_fadd+0x32a>
 80005ea:	4663      	mov	r3, ip
 80005ec:	000c      	movs	r4, r1
 80005ee:	1bdb      	subs	r3, r3, r7
 80005f0:	e7d2      	b.n	8000598 <__aeabi_fadd+0xf0>
 80005f2:	4661      	mov	r1, ip
 80005f4:	2900      	cmp	r1, #0
 80005f6:	d05b      	beq.n	80006b0 <__aeabi_fadd+0x208>
 80005f8:	1e51      	subs	r1, r2, #1
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	d100      	bne.n	8000600 <__aeabi_fadd+0x158>
 80005fe:	e0a7      	b.n	8000750 <__aeabi_fadd+0x2a8>
 8000600:	2aff      	cmp	r2, #255	; 0xff
 8000602:	d022      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000604:	000a      	movs	r2, r1
 8000606:	e799      	b.n	800053c <__aeabi_fadd+0x94>
 8000608:	20ff      	movs	r0, #255	; 0xff
 800060a:	2600      	movs	r6, #0
 800060c:	e7d3      	b.n	80005b6 <__aeabi_fadd+0x10e>
 800060e:	21fe      	movs	r1, #254	; 0xfe
 8000610:	1c6a      	adds	r2, r5, #1
 8000612:	4211      	tst	r1, r2
 8000614:	d073      	beq.n	80006fe <__aeabi_fadd+0x256>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d0f6      	beq.n	8000608 <__aeabi_fadd+0x160>
 800061a:	0015      	movs	r5, r2
 800061c:	4467      	add	r7, ip
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	075a      	lsls	r2, r3, #29
 8000622:	d1bb      	bne.n	800059c <__aeabi_fadd+0xf4>
 8000624:	08db      	lsrs	r3, r3, #3
 8000626:	2dff      	cmp	r5, #255	; 0xff
 8000628:	d00f      	beq.n	800064a <__aeabi_fadd+0x1a2>
 800062a:	025b      	lsls	r3, r3, #9
 800062c:	0a5e      	lsrs	r6, r3, #9
 800062e:	b2e8      	uxtb	r0, r5
 8000630:	e7c1      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000632:	4662      	mov	r2, ip
 8000634:	2a00      	cmp	r2, #0
 8000636:	d008      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	03d2      	lsls	r2, r2, #15
 800063c:	4213      	tst	r3, r2
 800063e:	d004      	beq.n	800064a <__aeabi_fadd+0x1a2>
 8000640:	4640      	mov	r0, r8
 8000642:	4210      	tst	r0, r2
 8000644:	d101      	bne.n	800064a <__aeabi_fadd+0x1a2>
 8000646:	000c      	movs	r4, r1
 8000648:	4643      	mov	r3, r8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0dc      	beq.n	8000608 <__aeabi_fadd+0x160>
 800064e:	2680      	movs	r6, #128	; 0x80
 8000650:	03f6      	lsls	r6, r6, #15
 8000652:	431e      	orrs	r6, r3
 8000654:	0276      	lsls	r6, r6, #9
 8000656:	20ff      	movs	r0, #255	; 0xff
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	e7ac      	b.n	80005b6 <__aeabi_fadd+0x10e>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d0d6      	beq.n	800060e <__aeabi_fadd+0x166>
 8000660:	1b42      	subs	r2, r0, r5
 8000662:	2d00      	cmp	r5, #0
 8000664:	d05c      	beq.n	8000720 <__aeabi_fadd+0x278>
 8000666:	28ff      	cmp	r0, #255	; 0xff
 8000668:	d0ee      	beq.n	8000648 <__aeabi_fadd+0x1a0>
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	04db      	lsls	r3, r3, #19
 800066e:	431f      	orrs	r7, r3
 8000670:	2a1b      	cmp	r2, #27
 8000672:	dc00      	bgt.n	8000676 <__aeabi_fadd+0x1ce>
 8000674:	e082      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000676:	2301      	movs	r3, #1
 8000678:	464d      	mov	r5, r9
 800067a:	4463      	add	r3, ip
 800067c:	e763      	b.n	8000546 <__aeabi_fadd+0x9e>
 800067e:	2220      	movs	r2, #32
 8000680:	1b40      	subs	r0, r0, r5
 8000682:	3001      	adds	r0, #1
 8000684:	1a12      	subs	r2, r2, r0
 8000686:	0019      	movs	r1, r3
 8000688:	4093      	lsls	r3, r2
 800068a:	40c1      	lsrs	r1, r0
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	4193      	sbcs	r3, r2
 8000690:	2500      	movs	r5, #0
 8000692:	430b      	orrs	r3, r1
 8000694:	e780      	b.n	8000598 <__aeabi_fadd+0xf0>
 8000696:	2320      	movs	r3, #32
 8000698:	4661      	mov	r1, ip
 800069a:	1a1b      	subs	r3, r3, r0
 800069c:	4099      	lsls	r1, r3
 800069e:	4662      	mov	r2, ip
 80006a0:	000b      	movs	r3, r1
 80006a2:	40c2      	lsrs	r2, r0
 80006a4:	1e59      	subs	r1, r3, #1
 80006a6:	418b      	sbcs	r3, r1
 80006a8:	4313      	orrs	r3, r2
 80006aa:	e764      	b.n	8000576 <__aeabi_fadd+0xce>
 80006ac:	000c      	movs	r4, r1
 80006ae:	4643      	mov	r3, r8
 80006b0:	0015      	movs	r5, r2
 80006b2:	e7b8      	b.n	8000626 <__aeabi_fadd+0x17e>
 80006b4:	4663      	mov	r3, ip
 80006b6:	1afe      	subs	r6, r7, r3
 80006b8:	0173      	lsls	r3, r6, #5
 80006ba:	d445      	bmi.n	8000748 <__aeabi_fadd+0x2a0>
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d000      	beq.n	80006c2 <__aeabi_fadd+0x21a>
 80006c0:	e75e      	b.n	8000580 <__aeabi_fadd+0xd8>
 80006c2:	2400      	movs	r4, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	2600      	movs	r6, #0
 80006c8:	e775      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80006ca:	2bff      	cmp	r3, #255	; 0xff
 80006cc:	d0bb      	beq.n	8000646 <__aeabi_fadd+0x19e>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	04db      	lsls	r3, r3, #19
 80006d2:	431f      	orrs	r7, r3
 80006d4:	2a1b      	cmp	r2, #27
 80006d6:	dd47      	ble.n	8000768 <__aeabi_fadd+0x2c0>
 80006d8:	2301      	movs	r3, #1
 80006da:	4662      	mov	r2, ip
 80006dc:	000c      	movs	r4, r1
 80006de:	464d      	mov	r5, r9
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	e749      	b.n	8000578 <__aeabi_fadd+0xd0>
 80006e4:	0005      	movs	r5, r0
 80006e6:	e79e      	b.n	8000626 <__aeabi_fadd+0x17e>
 80006e8:	4661      	mov	r1, ip
 80006ea:	2320      	movs	r3, #32
 80006ec:	40d1      	lsrs	r1, r2
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	4662      	mov	r2, ip
 80006f2:	409a      	lsls	r2, r3
 80006f4:	0013      	movs	r3, r2
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	430b      	orrs	r3, r1
 80006fc:	e722      	b.n	8000544 <__aeabi_fadd+0x9c>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d146      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 8000702:	2f00      	cmp	r7, #0
 8000704:	d062      	beq.n	80007cc <__aeabi_fadd+0x324>
 8000706:	4663      	mov	r3, ip
 8000708:	2000      	movs	r0, #0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x268>
 800070e:	e752      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000710:	003b      	movs	r3, r7
 8000712:	4463      	add	r3, ip
 8000714:	015a      	lsls	r2, r3, #5
 8000716:	d583      	bpl.n	8000620 <__aeabi_fadd+0x178>
 8000718:	4a32      	ldr	r2, [pc, #200]	; (80007e4 <__aeabi_fadd+0x33c>)
 800071a:	3501      	adds	r5, #1
 800071c:	4013      	ands	r3, r2
 800071e:	e77f      	b.n	8000620 <__aeabi_fadd+0x178>
 8000720:	2f00      	cmp	r7, #0
 8000722:	d0c4      	beq.n	80006ae <__aeabi_fadd+0x206>
 8000724:	1e53      	subs	r3, r2, #1
 8000726:	2a01      	cmp	r2, #1
 8000728:	d012      	beq.n	8000750 <__aeabi_fadd+0x2a8>
 800072a:	2aff      	cmp	r2, #255	; 0xff
 800072c:	d08c      	beq.n	8000648 <__aeabi_fadd+0x1a0>
 800072e:	001a      	movs	r2, r3
 8000730:	e79e      	b.n	8000670 <__aeabi_fadd+0x1c8>
 8000732:	2f00      	cmp	r7, #0
 8000734:	d000      	beq.n	8000738 <__aeabi_fadd+0x290>
 8000736:	e77c      	b.n	8000632 <__aeabi_fadd+0x18a>
 8000738:	4663      	mov	r3, ip
 800073a:	2b00      	cmp	r3, #0
 800073c:	d183      	bne.n	8000646 <__aeabi_fadd+0x19e>
 800073e:	2680      	movs	r6, #128	; 0x80
 8000740:	2400      	movs	r4, #0
 8000742:	20ff      	movs	r0, #255	; 0xff
 8000744:	03f6      	lsls	r6, r6, #15
 8000746:	e736      	b.n	80005b6 <__aeabi_fadd+0x10e>
 8000748:	4663      	mov	r3, ip
 800074a:	000c      	movs	r4, r1
 800074c:	1bde      	subs	r6, r3, r7
 800074e:	e717      	b.n	8000580 <__aeabi_fadd+0xd8>
 8000750:	003b      	movs	r3, r7
 8000752:	4463      	add	r3, ip
 8000754:	2501      	movs	r5, #1
 8000756:	015a      	lsls	r2, r3, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x2b4>
 800075a:	e761      	b.n	8000620 <__aeabi_fadd+0x178>
 800075c:	2502      	movs	r5, #2
 800075e:	e6f7      	b.n	8000550 <__aeabi_fadd+0xa8>
 8000760:	4663      	mov	r3, ip
 8000762:	2501      	movs	r5, #1
 8000764:	1afb      	subs	r3, r7, r3
 8000766:	e707      	b.n	8000578 <__aeabi_fadd+0xd0>
 8000768:	2320      	movs	r3, #32
 800076a:	1a9b      	subs	r3, r3, r2
 800076c:	0038      	movs	r0, r7
 800076e:	409f      	lsls	r7, r3
 8000770:	003b      	movs	r3, r7
 8000772:	40d0      	lsrs	r0, r2
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	4193      	sbcs	r3, r2
 8000778:	4303      	orrs	r3, r0
 800077a:	e7ae      	b.n	80006da <__aeabi_fadd+0x232>
 800077c:	2320      	movs	r3, #32
 800077e:	1a9b      	subs	r3, r3, r2
 8000780:	0039      	movs	r1, r7
 8000782:	409f      	lsls	r7, r3
 8000784:	003b      	movs	r3, r7
 8000786:	40d1      	lsrs	r1, r2
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	4193      	sbcs	r3, r2
 800078c:	430b      	orrs	r3, r1
 800078e:	e773      	b.n	8000678 <__aeabi_fadd+0x1d0>
 8000790:	2f00      	cmp	r7, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x2ee>
 8000794:	e758      	b.n	8000648 <__aeabi_fadd+0x1a0>
 8000796:	4662      	mov	r2, ip
 8000798:	2a00      	cmp	r2, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e755      	b.n	800064a <__aeabi_fadd+0x1a2>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e750      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007a8:	4641      	mov	r1, r8
 80007aa:	4211      	tst	r1, r2
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x308>
 80007ae:	e74c      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007b0:	4643      	mov	r3, r8
 80007b2:	e74a      	b.n	800064a <__aeabi_fadd+0x1a2>
 80007b4:	4663      	mov	r3, ip
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d083      	beq.n	80006c2 <__aeabi_fadd+0x21a>
 80007ba:	000c      	movs	r4, r1
 80007bc:	4646      	mov	r6, r8
 80007be:	2000      	movs	r0, #0
 80007c0:	e6f9      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007c2:	4663      	mov	r3, ip
 80007c4:	000c      	movs	r4, r1
 80007c6:	1bdb      	subs	r3, r3, r7
 80007c8:	3501      	adds	r5, #1
 80007ca:	e6d5      	b.n	8000578 <__aeabi_fadd+0xd0>
 80007cc:	4646      	mov	r6, r8
 80007ce:	2000      	movs	r0, #0
 80007d0:	e6f1      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fadd+0x330>
 80007d6:	e723      	b.n	8000620 <__aeabi_fadd+0x178>
 80007d8:	2400      	movs	r4, #0
 80007da:	2600      	movs	r6, #0
 80007dc:	e6eb      	b.n	80005b6 <__aeabi_fadd+0x10e>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	7dffffff 	.word	0x7dffffff
 80007e4:	fbffffff 	.word	0xfbffffff

080007e8 <__aeabi_fdiv>:
 80007e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ea:	464f      	mov	r7, r9
 80007ec:	4646      	mov	r6, r8
 80007ee:	46d6      	mov	lr, sl
 80007f0:	0245      	lsls	r5, r0, #9
 80007f2:	b5c0      	push	{r6, r7, lr}
 80007f4:	0047      	lsls	r7, r0, #1
 80007f6:	1c0c      	adds	r4, r1, #0
 80007f8:	0a6d      	lsrs	r5, r5, #9
 80007fa:	0e3f      	lsrs	r7, r7, #24
 80007fc:	0fc6      	lsrs	r6, r0, #31
 80007fe:	2f00      	cmp	r7, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fdiv+0x1c>
 8000802:	e06f      	b.n	80008e4 <__aeabi_fdiv+0xfc>
 8000804:	2fff      	cmp	r7, #255	; 0xff
 8000806:	d100      	bne.n	800080a <__aeabi_fdiv+0x22>
 8000808:	e074      	b.n	80008f4 <__aeabi_fdiv+0x10c>
 800080a:	2300      	movs	r3, #0
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	4699      	mov	r9, r3
 8000810:	469a      	mov	sl, r3
 8000812:	00ed      	lsls	r5, r5, #3
 8000814:	04d2      	lsls	r2, r2, #19
 8000816:	4315      	orrs	r5, r2
 8000818:	3f7f      	subs	r7, #127	; 0x7f
 800081a:	0263      	lsls	r3, r4, #9
 800081c:	0a5b      	lsrs	r3, r3, #9
 800081e:	4698      	mov	r8, r3
 8000820:	0063      	lsls	r3, r4, #1
 8000822:	0e1b      	lsrs	r3, r3, #24
 8000824:	0fe4      	lsrs	r4, r4, #31
 8000826:	2b00      	cmp	r3, #0
 8000828:	d04d      	beq.n	80008c6 <__aeabi_fdiv+0xde>
 800082a:	2bff      	cmp	r3, #255	; 0xff
 800082c:	d045      	beq.n	80008ba <__aeabi_fdiv+0xd2>
 800082e:	4642      	mov	r2, r8
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	00d2      	lsls	r2, r2, #3
 8000834:	04c9      	lsls	r1, r1, #19
 8000836:	4311      	orrs	r1, r2
 8000838:	4688      	mov	r8, r1
 800083a:	2200      	movs	r2, #0
 800083c:	3b7f      	subs	r3, #127	; 0x7f
 800083e:	0031      	movs	r1, r6
 8000840:	1aff      	subs	r7, r7, r3
 8000842:	464b      	mov	r3, r9
 8000844:	4061      	eors	r1, r4
 8000846:	b2c9      	uxtb	r1, r1
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d900      	bls.n	800084e <__aeabi_fdiv+0x66>
 800084c:	e0b8      	b.n	80009c0 <__aeabi_fdiv+0x1d8>
 800084e:	4870      	ldr	r0, [pc, #448]	; (8000a10 <__aeabi_fdiv+0x228>)
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	58c3      	ldr	r3, [r0, r3]
 8000854:	469f      	mov	pc, r3
 8000856:	2300      	movs	r3, #0
 8000858:	4698      	mov	r8, r3
 800085a:	0026      	movs	r6, r4
 800085c:	4645      	mov	r5, r8
 800085e:	4692      	mov	sl, r2
 8000860:	4653      	mov	r3, sl
 8000862:	2b02      	cmp	r3, #2
 8000864:	d100      	bne.n	8000868 <__aeabi_fdiv+0x80>
 8000866:	e08d      	b.n	8000984 <__aeabi_fdiv+0x19c>
 8000868:	2b03      	cmp	r3, #3
 800086a:	d100      	bne.n	800086e <__aeabi_fdiv+0x86>
 800086c:	e0a1      	b.n	80009b2 <__aeabi_fdiv+0x1ca>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d018      	beq.n	80008a4 <__aeabi_fdiv+0xbc>
 8000872:	003b      	movs	r3, r7
 8000874:	337f      	adds	r3, #127	; 0x7f
 8000876:	2b00      	cmp	r3, #0
 8000878:	dd6d      	ble.n	8000956 <__aeabi_fdiv+0x16e>
 800087a:	076a      	lsls	r2, r5, #29
 800087c:	d004      	beq.n	8000888 <__aeabi_fdiv+0xa0>
 800087e:	220f      	movs	r2, #15
 8000880:	402a      	ands	r2, r5
 8000882:	2a04      	cmp	r2, #4
 8000884:	d000      	beq.n	8000888 <__aeabi_fdiv+0xa0>
 8000886:	3504      	adds	r5, #4
 8000888:	012a      	lsls	r2, r5, #4
 800088a:	d503      	bpl.n	8000894 <__aeabi_fdiv+0xac>
 800088c:	4b61      	ldr	r3, [pc, #388]	; (8000a14 <__aeabi_fdiv+0x22c>)
 800088e:	401d      	ands	r5, r3
 8000890:	003b      	movs	r3, r7
 8000892:	3380      	adds	r3, #128	; 0x80
 8000894:	2bfe      	cmp	r3, #254	; 0xfe
 8000896:	dd00      	ble.n	800089a <__aeabi_fdiv+0xb2>
 8000898:	e074      	b.n	8000984 <__aeabi_fdiv+0x19c>
 800089a:	01aa      	lsls	r2, r5, #6
 800089c:	0a52      	lsrs	r2, r2, #9
 800089e:	b2d8      	uxtb	r0, r3
 80008a0:	e002      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 80008a2:	000e      	movs	r6, r1
 80008a4:	2000      	movs	r0, #0
 80008a6:	2200      	movs	r2, #0
 80008a8:	05c0      	lsls	r0, r0, #23
 80008aa:	07f6      	lsls	r6, r6, #31
 80008ac:	4310      	orrs	r0, r2
 80008ae:	4330      	orrs	r0, r6
 80008b0:	bce0      	pop	{r5, r6, r7}
 80008b2:	46ba      	mov	sl, r7
 80008b4:	46b1      	mov	r9, r6
 80008b6:	46a8      	mov	r8, r5
 80008b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ba:	4643      	mov	r3, r8
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d13f      	bne.n	8000940 <__aeabi_fdiv+0x158>
 80008c0:	2202      	movs	r2, #2
 80008c2:	3fff      	subs	r7, #255	; 0xff
 80008c4:	e003      	b.n	80008ce <__aeabi_fdiv+0xe6>
 80008c6:	4643      	mov	r3, r8
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d12d      	bne.n	8000928 <__aeabi_fdiv+0x140>
 80008cc:	2201      	movs	r2, #1
 80008ce:	0031      	movs	r1, r6
 80008d0:	464b      	mov	r3, r9
 80008d2:	4061      	eors	r1, r4
 80008d4:	b2c9      	uxtb	r1, r1
 80008d6:	4313      	orrs	r3, r2
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d838      	bhi.n	800094e <__aeabi_fdiv+0x166>
 80008dc:	484e      	ldr	r0, [pc, #312]	; (8000a18 <__aeabi_fdiv+0x230>)
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	58c3      	ldr	r3, [r0, r3]
 80008e2:	469f      	mov	pc, r3
 80008e4:	2d00      	cmp	r5, #0
 80008e6:	d113      	bne.n	8000910 <__aeabi_fdiv+0x128>
 80008e8:	2304      	movs	r3, #4
 80008ea:	4699      	mov	r9, r3
 80008ec:	3b03      	subs	r3, #3
 80008ee:	2700      	movs	r7, #0
 80008f0:	469a      	mov	sl, r3
 80008f2:	e792      	b.n	800081a <__aeabi_fdiv+0x32>
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d105      	bne.n	8000904 <__aeabi_fdiv+0x11c>
 80008f8:	2308      	movs	r3, #8
 80008fa:	4699      	mov	r9, r3
 80008fc:	3b06      	subs	r3, #6
 80008fe:	27ff      	movs	r7, #255	; 0xff
 8000900:	469a      	mov	sl, r3
 8000902:	e78a      	b.n	800081a <__aeabi_fdiv+0x32>
 8000904:	230c      	movs	r3, #12
 8000906:	4699      	mov	r9, r3
 8000908:	3b09      	subs	r3, #9
 800090a:	27ff      	movs	r7, #255	; 0xff
 800090c:	469a      	mov	sl, r3
 800090e:	e784      	b.n	800081a <__aeabi_fdiv+0x32>
 8000910:	0028      	movs	r0, r5
 8000912:	f002 fa9b 	bl	8002e4c <__clzsi2>
 8000916:	2776      	movs	r7, #118	; 0x76
 8000918:	1f43      	subs	r3, r0, #5
 800091a:	409d      	lsls	r5, r3
 800091c:	2300      	movs	r3, #0
 800091e:	427f      	negs	r7, r7
 8000920:	4699      	mov	r9, r3
 8000922:	469a      	mov	sl, r3
 8000924:	1a3f      	subs	r7, r7, r0
 8000926:	e778      	b.n	800081a <__aeabi_fdiv+0x32>
 8000928:	4640      	mov	r0, r8
 800092a:	f002 fa8f 	bl	8002e4c <__clzsi2>
 800092e:	4642      	mov	r2, r8
 8000930:	1f43      	subs	r3, r0, #5
 8000932:	409a      	lsls	r2, r3
 8000934:	2376      	movs	r3, #118	; 0x76
 8000936:	425b      	negs	r3, r3
 8000938:	4690      	mov	r8, r2
 800093a:	1a1b      	subs	r3, r3, r0
 800093c:	2200      	movs	r2, #0
 800093e:	e77e      	b.n	800083e <__aeabi_fdiv+0x56>
 8000940:	2303      	movs	r3, #3
 8000942:	464a      	mov	r2, r9
 8000944:	431a      	orrs	r2, r3
 8000946:	4691      	mov	r9, r2
 8000948:	33fc      	adds	r3, #252	; 0xfc
 800094a:	2203      	movs	r2, #3
 800094c:	e777      	b.n	800083e <__aeabi_fdiv+0x56>
 800094e:	000e      	movs	r6, r1
 8000950:	20ff      	movs	r0, #255	; 0xff
 8000952:	2200      	movs	r2, #0
 8000954:	e7a8      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 8000956:	2201      	movs	r2, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dca2      	bgt.n	80008a4 <__aeabi_fdiv+0xbc>
 800095e:	379e      	adds	r7, #158	; 0x9e
 8000960:	002a      	movs	r2, r5
 8000962:	40bd      	lsls	r5, r7
 8000964:	40da      	lsrs	r2, r3
 8000966:	1e6b      	subs	r3, r5, #1
 8000968:	419d      	sbcs	r5, r3
 800096a:	4315      	orrs	r5, r2
 800096c:	076a      	lsls	r2, r5, #29
 800096e:	d004      	beq.n	800097a <__aeabi_fdiv+0x192>
 8000970:	220f      	movs	r2, #15
 8000972:	402a      	ands	r2, r5
 8000974:	2a04      	cmp	r2, #4
 8000976:	d000      	beq.n	800097a <__aeabi_fdiv+0x192>
 8000978:	3504      	adds	r5, #4
 800097a:	016a      	lsls	r2, r5, #5
 800097c:	d544      	bpl.n	8000a08 <__aeabi_fdiv+0x220>
 800097e:	2001      	movs	r0, #1
 8000980:	2200      	movs	r2, #0
 8000982:	e791      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	2200      	movs	r2, #0
 8000988:	e78e      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	2600      	movs	r6, #0
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	03d2      	lsls	r2, r2, #15
 8000992:	e789      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 8000994:	2300      	movs	r3, #0
 8000996:	4698      	mov	r8, r3
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	03d2      	lsls	r2, r2, #15
 800099c:	4215      	tst	r5, r2
 800099e:	d008      	beq.n	80009b2 <__aeabi_fdiv+0x1ca>
 80009a0:	4643      	mov	r3, r8
 80009a2:	4213      	tst	r3, r2
 80009a4:	d105      	bne.n	80009b2 <__aeabi_fdiv+0x1ca>
 80009a6:	431a      	orrs	r2, r3
 80009a8:	0252      	lsls	r2, r2, #9
 80009aa:	0026      	movs	r6, r4
 80009ac:	20ff      	movs	r0, #255	; 0xff
 80009ae:	0a52      	lsrs	r2, r2, #9
 80009b0:	e77a      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	03d2      	lsls	r2, r2, #15
 80009b6:	432a      	orrs	r2, r5
 80009b8:	0252      	lsls	r2, r2, #9
 80009ba:	20ff      	movs	r0, #255	; 0xff
 80009bc:	0a52      	lsrs	r2, r2, #9
 80009be:	e773      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 80009c0:	4642      	mov	r2, r8
 80009c2:	016b      	lsls	r3, r5, #5
 80009c4:	0155      	lsls	r5, r2, #5
 80009c6:	42ab      	cmp	r3, r5
 80009c8:	d21a      	bcs.n	8000a00 <__aeabi_fdiv+0x218>
 80009ca:	201b      	movs	r0, #27
 80009cc:	2200      	movs	r2, #0
 80009ce:	3f01      	subs	r7, #1
 80009d0:	2601      	movs	r6, #1
 80009d2:	001c      	movs	r4, r3
 80009d4:	0052      	lsls	r2, r2, #1
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	2c00      	cmp	r4, #0
 80009da:	db01      	blt.n	80009e0 <__aeabi_fdiv+0x1f8>
 80009dc:	429d      	cmp	r5, r3
 80009de:	d801      	bhi.n	80009e4 <__aeabi_fdiv+0x1fc>
 80009e0:	1b5b      	subs	r3, r3, r5
 80009e2:	4332      	orrs	r2, r6
 80009e4:	3801      	subs	r0, #1
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d1f3      	bne.n	80009d2 <__aeabi_fdiv+0x1ea>
 80009ea:	1e58      	subs	r0, r3, #1
 80009ec:	4183      	sbcs	r3, r0
 80009ee:	4313      	orrs	r3, r2
 80009f0:	001d      	movs	r5, r3
 80009f2:	003b      	movs	r3, r7
 80009f4:	337f      	adds	r3, #127	; 0x7f
 80009f6:	000e      	movs	r6, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	dd00      	ble.n	80009fe <__aeabi_fdiv+0x216>
 80009fc:	e73d      	b.n	800087a <__aeabi_fdiv+0x92>
 80009fe:	e7aa      	b.n	8000956 <__aeabi_fdiv+0x16e>
 8000a00:	201a      	movs	r0, #26
 8000a02:	2201      	movs	r2, #1
 8000a04:	1b5b      	subs	r3, r3, r5
 8000a06:	e7e3      	b.n	80009d0 <__aeabi_fdiv+0x1e8>
 8000a08:	01aa      	lsls	r2, r5, #6
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	0a52      	lsrs	r2, r2, #9
 8000a0e:	e74b      	b.n	80008a8 <__aeabi_fdiv+0xc0>
 8000a10:	0800c608 	.word	0x0800c608
 8000a14:	f7ffffff 	.word	0xf7ffffff
 8000a18:	0800c648 	.word	0x0800c648

08000a1c <__aeabi_fmul>:
 8000a1c:	0243      	lsls	r3, r0, #9
 8000a1e:	0a5b      	lsrs	r3, r3, #9
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	464f      	mov	r7, r9
 8000a24:	4646      	mov	r6, r8
 8000a26:	4699      	mov	r9, r3
 8000a28:	46d6      	mov	lr, sl
 8000a2a:	0fc3      	lsrs	r3, r0, #31
 8000a2c:	0045      	lsls	r5, r0, #1
 8000a2e:	4698      	mov	r8, r3
 8000a30:	b5c0      	push	{r6, r7, lr}
 8000a32:	464b      	mov	r3, r9
 8000a34:	1c0f      	adds	r7, r1, #0
 8000a36:	0e2d      	lsrs	r5, r5, #24
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fmul+0x20>
 8000a3a:	e0cb      	b.n	8000bd4 <__aeabi_fmul+0x1b8>
 8000a3c:	2dff      	cmp	r5, #255	; 0xff
 8000a3e:	d100      	bne.n	8000a42 <__aeabi_fmul+0x26>
 8000a40:	e0cf      	b.n	8000be2 <__aeabi_fmul+0x1c6>
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	04d2      	lsls	r2, r2, #19
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4691      	mov	r9, r2
 8000a4e:	2600      	movs	r6, #0
 8000a50:	469a      	mov	sl, r3
 8000a52:	3d7f      	subs	r5, #127	; 0x7f
 8000a54:	027c      	lsls	r4, r7, #9
 8000a56:	007b      	lsls	r3, r7, #1
 8000a58:	0a64      	lsrs	r4, r4, #9
 8000a5a:	0e1b      	lsrs	r3, r3, #24
 8000a5c:	0fff      	lsrs	r7, r7, #31
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_fmul+0x48>
 8000a62:	e0a9      	b.n	8000bb8 <__aeabi_fmul+0x19c>
 8000a64:	2bff      	cmp	r3, #255	; 0xff
 8000a66:	d011      	beq.n	8000a8c <__aeabi_fmul+0x70>
 8000a68:	2280      	movs	r2, #128	; 0x80
 8000a6a:	00e4      	lsls	r4, r4, #3
 8000a6c:	04d2      	lsls	r2, r2, #19
 8000a6e:	4314      	orrs	r4, r2
 8000a70:	4642      	mov	r2, r8
 8000a72:	3b7f      	subs	r3, #127	; 0x7f
 8000a74:	195b      	adds	r3, r3, r5
 8000a76:	407a      	eors	r2, r7
 8000a78:	2000      	movs	r0, #0
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	1c5d      	adds	r5, r3, #1
 8000a7e:	2e0a      	cmp	r6, #10
 8000a80:	dd13      	ble.n	8000aaa <__aeabi_fmul+0x8e>
 8000a82:	003a      	movs	r2, r7
 8000a84:	2e0b      	cmp	r6, #11
 8000a86:	d047      	beq.n	8000b18 <__aeabi_fmul+0xfc>
 8000a88:	4647      	mov	r7, r8
 8000a8a:	e03f      	b.n	8000b0c <__aeabi_fmul+0xf0>
 8000a8c:	002b      	movs	r3, r5
 8000a8e:	33ff      	adds	r3, #255	; 0xff
 8000a90:	2c00      	cmp	r4, #0
 8000a92:	d11e      	bne.n	8000ad2 <__aeabi_fmul+0xb6>
 8000a94:	2202      	movs	r2, #2
 8000a96:	4316      	orrs	r6, r2
 8000a98:	4642      	mov	r2, r8
 8000a9a:	3501      	adds	r5, #1
 8000a9c:	407a      	eors	r2, r7
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	35ff      	adds	r5, #255	; 0xff
 8000aa2:	2e0a      	cmp	r6, #10
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_fmul+0x8c>
 8000aa6:	e0e4      	b.n	8000c72 <__aeabi_fmul+0x256>
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	2e02      	cmp	r6, #2
 8000aac:	dc1c      	bgt.n	8000ae8 <__aeabi_fmul+0xcc>
 8000aae:	3e01      	subs	r6, #1
 8000ab0:	2e01      	cmp	r6, #1
 8000ab2:	d842      	bhi.n	8000b3a <__aeabi_fmul+0x11e>
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d03d      	beq.n	8000b34 <__aeabi_fmul+0x118>
 8000ab8:	2801      	cmp	r0, #1
 8000aba:	d166      	bne.n	8000b8a <__aeabi_fmul+0x16e>
 8000abc:	2000      	movs	r0, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	05c0      	lsls	r0, r0, #23
 8000ac2:	4308      	orrs	r0, r1
 8000ac4:	07d2      	lsls	r2, r2, #31
 8000ac6:	4310      	orrs	r0, r2
 8000ac8:	bce0      	pop	{r5, r6, r7}
 8000aca:	46ba      	mov	sl, r7
 8000acc:	46b1      	mov	r9, r6
 8000ace:	46a8      	mov	r8, r5
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	4316      	orrs	r6, r2
 8000ad6:	4642      	mov	r2, r8
 8000ad8:	3501      	adds	r5, #1
 8000ada:	407a      	eors	r2, r7
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	35ff      	adds	r5, #255	; 0xff
 8000ae0:	2e0a      	cmp	r6, #10
 8000ae2:	dd00      	ble.n	8000ae6 <__aeabi_fmul+0xca>
 8000ae4:	e0e4      	b.n	8000cb0 <__aeabi_fmul+0x294>
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	2101      	movs	r1, #1
 8000aea:	40b1      	lsls	r1, r6
 8000aec:	26a6      	movs	r6, #166	; 0xa6
 8000aee:	00f6      	lsls	r6, r6, #3
 8000af0:	4231      	tst	r1, r6
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_fmul+0xee>
 8000af4:	2690      	movs	r6, #144	; 0x90
 8000af6:	00b6      	lsls	r6, r6, #2
 8000af8:	4231      	tst	r1, r6
 8000afa:	d116      	bne.n	8000b2a <__aeabi_fmul+0x10e>
 8000afc:	3eb9      	subs	r6, #185	; 0xb9
 8000afe:	3eff      	subs	r6, #255	; 0xff
 8000b00:	420e      	tst	r6, r1
 8000b02:	d01a      	beq.n	8000b3a <__aeabi_fmul+0x11e>
 8000b04:	46a1      	mov	r9, r4
 8000b06:	4682      	mov	sl, r0
 8000b08:	e000      	b.n	8000b0c <__aeabi_fmul+0xf0>
 8000b0a:	0017      	movs	r7, r2
 8000b0c:	4653      	mov	r3, sl
 8000b0e:	003a      	movs	r2, r7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d00f      	beq.n	8000b34 <__aeabi_fmul+0x118>
 8000b14:	464c      	mov	r4, r9
 8000b16:	4650      	mov	r0, sl
 8000b18:	2803      	cmp	r0, #3
 8000b1a:	d1cd      	bne.n	8000ab8 <__aeabi_fmul+0x9c>
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	03c9      	lsls	r1, r1, #15
 8000b20:	4321      	orrs	r1, r4
 8000b22:	0249      	lsls	r1, r1, #9
 8000b24:	20ff      	movs	r0, #255	; 0xff
 8000b26:	0a49      	lsrs	r1, r1, #9
 8000b28:	e7ca      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	20ff      	movs	r0, #255	; 0xff
 8000b30:	03c9      	lsls	r1, r1, #15
 8000b32:	e7c5      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000b34:	20ff      	movs	r0, #255	; 0xff
 8000b36:	2100      	movs	r1, #0
 8000b38:	e7c2      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000b3a:	0c20      	lsrs	r0, r4, #16
 8000b3c:	4649      	mov	r1, r9
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	0c24      	lsrs	r4, r4, #16
 8000b42:	0027      	movs	r7, r4
 8000b44:	0c0e      	lsrs	r6, r1, #16
 8000b46:	0409      	lsls	r1, r1, #16
 8000b48:	0c09      	lsrs	r1, r1, #16
 8000b4a:	4374      	muls	r4, r6
 8000b4c:	434f      	muls	r7, r1
 8000b4e:	4346      	muls	r6, r0
 8000b50:	4348      	muls	r0, r1
 8000b52:	0c39      	lsrs	r1, r7, #16
 8000b54:	1900      	adds	r0, r0, r4
 8000b56:	1809      	adds	r1, r1, r0
 8000b58:	428c      	cmp	r4, r1
 8000b5a:	d903      	bls.n	8000b64 <__aeabi_fmul+0x148>
 8000b5c:	2080      	movs	r0, #128	; 0x80
 8000b5e:	0240      	lsls	r0, r0, #9
 8000b60:	4684      	mov	ip, r0
 8000b62:	4466      	add	r6, ip
 8000b64:	043f      	lsls	r7, r7, #16
 8000b66:	0408      	lsls	r0, r1, #16
 8000b68:	0c3f      	lsrs	r7, r7, #16
 8000b6a:	19c0      	adds	r0, r0, r7
 8000b6c:	0184      	lsls	r4, r0, #6
 8000b6e:	1e67      	subs	r7, r4, #1
 8000b70:	41bc      	sbcs	r4, r7
 8000b72:	0c09      	lsrs	r1, r1, #16
 8000b74:	0e80      	lsrs	r0, r0, #26
 8000b76:	1989      	adds	r1, r1, r6
 8000b78:	4304      	orrs	r4, r0
 8000b7a:	0189      	lsls	r1, r1, #6
 8000b7c:	430c      	orrs	r4, r1
 8000b7e:	0109      	lsls	r1, r1, #4
 8000b80:	d571      	bpl.n	8000c66 <__aeabi_fmul+0x24a>
 8000b82:	2301      	movs	r3, #1
 8000b84:	0861      	lsrs	r1, r4, #1
 8000b86:	401c      	ands	r4, r3
 8000b88:	430c      	orrs	r4, r1
 8000b8a:	002b      	movs	r3, r5
 8000b8c:	337f      	adds	r3, #127	; 0x7f
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dd51      	ble.n	8000c36 <__aeabi_fmul+0x21a>
 8000b92:	0761      	lsls	r1, r4, #29
 8000b94:	d004      	beq.n	8000ba0 <__aeabi_fmul+0x184>
 8000b96:	210f      	movs	r1, #15
 8000b98:	4021      	ands	r1, r4
 8000b9a:	2904      	cmp	r1, #4
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fmul+0x184>
 8000b9e:	3404      	adds	r4, #4
 8000ba0:	0121      	lsls	r1, r4, #4
 8000ba2:	d503      	bpl.n	8000bac <__aeabi_fmul+0x190>
 8000ba4:	4b43      	ldr	r3, [pc, #268]	; (8000cb4 <__aeabi_fmul+0x298>)
 8000ba6:	401c      	ands	r4, r3
 8000ba8:	002b      	movs	r3, r5
 8000baa:	3380      	adds	r3, #128	; 0x80
 8000bac:	2bfe      	cmp	r3, #254	; 0xfe
 8000bae:	dcc1      	bgt.n	8000b34 <__aeabi_fmul+0x118>
 8000bb0:	01a1      	lsls	r1, r4, #6
 8000bb2:	0a49      	lsrs	r1, r1, #9
 8000bb4:	b2d8      	uxtb	r0, r3
 8000bb6:	e783      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000bb8:	2c00      	cmp	r4, #0
 8000bba:	d12c      	bne.n	8000c16 <__aeabi_fmul+0x1fa>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4642      	mov	r2, r8
 8000bc0:	431e      	orrs	r6, r3
 8000bc2:	002b      	movs	r3, r5
 8000bc4:	407a      	eors	r2, r7
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	1c5d      	adds	r5, r3, #1
 8000bcc:	2e0a      	cmp	r6, #10
 8000bce:	dd00      	ble.n	8000bd2 <__aeabi_fmul+0x1b6>
 8000bd0:	e757      	b.n	8000a82 <__aeabi_fmul+0x66>
 8000bd2:	e76a      	b.n	8000aaa <__aeabi_fmul+0x8e>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d110      	bne.n	8000bfa <__aeabi_fmul+0x1de>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2604      	movs	r6, #4
 8000bdc:	2500      	movs	r5, #0
 8000bde:	469a      	mov	sl, r3
 8000be0:	e738      	b.n	8000a54 <__aeabi_fmul+0x38>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <__aeabi_fmul+0x1d4>
 8000be6:	2302      	movs	r3, #2
 8000be8:	2608      	movs	r6, #8
 8000bea:	25ff      	movs	r5, #255	; 0xff
 8000bec:	469a      	mov	sl, r3
 8000bee:	e731      	b.n	8000a54 <__aeabi_fmul+0x38>
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	260c      	movs	r6, #12
 8000bf4:	25ff      	movs	r5, #255	; 0xff
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	e72c      	b.n	8000a54 <__aeabi_fmul+0x38>
 8000bfa:	4648      	mov	r0, r9
 8000bfc:	f002 f926 	bl	8002e4c <__clzsi2>
 8000c00:	464a      	mov	r2, r9
 8000c02:	1f43      	subs	r3, r0, #5
 8000c04:	2576      	movs	r5, #118	; 0x76
 8000c06:	409a      	lsls	r2, r3
 8000c08:	2300      	movs	r3, #0
 8000c0a:	426d      	negs	r5, r5
 8000c0c:	4691      	mov	r9, r2
 8000c0e:	2600      	movs	r6, #0
 8000c10:	469a      	mov	sl, r3
 8000c12:	1a2d      	subs	r5, r5, r0
 8000c14:	e71e      	b.n	8000a54 <__aeabi_fmul+0x38>
 8000c16:	0020      	movs	r0, r4
 8000c18:	f002 f918 	bl	8002e4c <__clzsi2>
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	1f43      	subs	r3, r0, #5
 8000c20:	409c      	lsls	r4, r3
 8000c22:	1a2b      	subs	r3, r5, r0
 8000c24:	3b76      	subs	r3, #118	; 0x76
 8000c26:	407a      	eors	r2, r7
 8000c28:	2000      	movs	r0, #0
 8000c2a:	b2d2      	uxtb	r2, r2
 8000c2c:	1c5d      	adds	r5, r3, #1
 8000c2e:	2e0a      	cmp	r6, #10
 8000c30:	dd00      	ble.n	8000c34 <__aeabi_fmul+0x218>
 8000c32:	e726      	b.n	8000a82 <__aeabi_fmul+0x66>
 8000c34:	e739      	b.n	8000aaa <__aeabi_fmul+0x8e>
 8000c36:	2101      	movs	r1, #1
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	2b1b      	cmp	r3, #27
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_fmul+0x224>
 8000c3e:	e73d      	b.n	8000abc <__aeabi_fmul+0xa0>
 8000c40:	359e      	adds	r5, #158	; 0x9e
 8000c42:	0021      	movs	r1, r4
 8000c44:	40ac      	lsls	r4, r5
 8000c46:	40d9      	lsrs	r1, r3
 8000c48:	1e63      	subs	r3, r4, #1
 8000c4a:	419c      	sbcs	r4, r3
 8000c4c:	4321      	orrs	r1, r4
 8000c4e:	074b      	lsls	r3, r1, #29
 8000c50:	d004      	beq.n	8000c5c <__aeabi_fmul+0x240>
 8000c52:	230f      	movs	r3, #15
 8000c54:	400b      	ands	r3, r1
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_fmul+0x240>
 8000c5a:	3104      	adds	r1, #4
 8000c5c:	014b      	lsls	r3, r1, #5
 8000c5e:	d504      	bpl.n	8000c6a <__aeabi_fmul+0x24e>
 8000c60:	2001      	movs	r0, #1
 8000c62:	2100      	movs	r1, #0
 8000c64:	e72c      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000c66:	001d      	movs	r5, r3
 8000c68:	e78f      	b.n	8000b8a <__aeabi_fmul+0x16e>
 8000c6a:	0189      	lsls	r1, r1, #6
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	0a49      	lsrs	r1, r1, #9
 8000c70:	e726      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000c72:	2302      	movs	r3, #2
 8000c74:	2e0f      	cmp	r6, #15
 8000c76:	d10c      	bne.n	8000c92 <__aeabi_fmul+0x276>
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	464b      	mov	r3, r9
 8000c7c:	03c9      	lsls	r1, r1, #15
 8000c7e:	420b      	tst	r3, r1
 8000c80:	d00d      	beq.n	8000c9e <__aeabi_fmul+0x282>
 8000c82:	420c      	tst	r4, r1
 8000c84:	d10b      	bne.n	8000c9e <__aeabi_fmul+0x282>
 8000c86:	4321      	orrs	r1, r4
 8000c88:	0249      	lsls	r1, r1, #9
 8000c8a:	003a      	movs	r2, r7
 8000c8c:	20ff      	movs	r0, #255	; 0xff
 8000c8e:	0a49      	lsrs	r1, r1, #9
 8000c90:	e716      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000c92:	2e0b      	cmp	r6, #11
 8000c94:	d000      	beq.n	8000c98 <__aeabi_fmul+0x27c>
 8000c96:	e6f7      	b.n	8000a88 <__aeabi_fmul+0x6c>
 8000c98:	46a1      	mov	r9, r4
 8000c9a:	469a      	mov	sl, r3
 8000c9c:	e736      	b.n	8000b0c <__aeabi_fmul+0xf0>
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	03c9      	lsls	r1, r1, #15
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	0249      	lsls	r1, r1, #9
 8000ca8:	4642      	mov	r2, r8
 8000caa:	20ff      	movs	r0, #255	; 0xff
 8000cac:	0a49      	lsrs	r1, r1, #9
 8000cae:	e707      	b.n	8000ac0 <__aeabi_fmul+0xa4>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e7df      	b.n	8000c74 <__aeabi_fmul+0x258>
 8000cb4:	f7ffffff 	.word	0xf7ffffff

08000cb8 <__aeabi_fsub>:
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	46c6      	mov	lr, r8
 8000cbc:	0243      	lsls	r3, r0, #9
 8000cbe:	0a5b      	lsrs	r3, r3, #9
 8000cc0:	0045      	lsls	r5, r0, #1
 8000cc2:	00da      	lsls	r2, r3, #3
 8000cc4:	0fc4      	lsrs	r4, r0, #31
 8000cc6:	0248      	lsls	r0, r1, #9
 8000cc8:	004f      	lsls	r7, r1, #1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	0a42      	lsrs	r2, r0, #9
 8000cce:	001e      	movs	r6, r3
 8000cd0:	4690      	mov	r8, r2
 8000cd2:	b500      	push	{lr}
 8000cd4:	0e2d      	lsrs	r5, r5, #24
 8000cd6:	0e3f      	lsrs	r7, r7, #24
 8000cd8:	0fc9      	lsrs	r1, r1, #31
 8000cda:	0980      	lsrs	r0, r0, #6
 8000cdc:	2fff      	cmp	r7, #255	; 0xff
 8000cde:	d059      	beq.n	8000d94 <__aeabi_fsub+0xdc>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4051      	eors	r1, r2
 8000ce4:	428c      	cmp	r4, r1
 8000ce6:	d039      	beq.n	8000d5c <__aeabi_fsub+0xa4>
 8000ce8:	1bea      	subs	r2, r5, r7
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	dd58      	ble.n	8000da0 <__aeabi_fsub+0xe8>
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d068      	beq.n	8000dc4 <__aeabi_fsub+0x10c>
 8000cf2:	2dff      	cmp	r5, #255	; 0xff
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_fsub+0x40>
 8000cf6:	e0d1      	b.n	8000e9c <__aeabi_fsub+0x1e4>
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	04db      	lsls	r3, r3, #19
 8000cfc:	4318      	orrs	r0, r3
 8000cfe:	2a1b      	cmp	r2, #27
 8000d00:	dc00      	bgt.n	8000d04 <__aeabi_fsub+0x4c>
 8000d02:	e0e3      	b.n	8000ecc <__aeabi_fsub+0x214>
 8000d04:	2301      	movs	r3, #1
 8000d06:	4662      	mov	r2, ip
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	015a      	lsls	r2, r3, #5
 8000d0c:	d400      	bmi.n	8000d10 <__aeabi_fsub+0x58>
 8000d0e:	e0ac      	b.n	8000e6a <__aeabi_fsub+0x1b2>
 8000d10:	019b      	lsls	r3, r3, #6
 8000d12:	099e      	lsrs	r6, r3, #6
 8000d14:	0030      	movs	r0, r6
 8000d16:	f002 f899 	bl	8002e4c <__clzsi2>
 8000d1a:	0033      	movs	r3, r6
 8000d1c:	3805      	subs	r0, #5
 8000d1e:	4083      	lsls	r3, r0
 8000d20:	4285      	cmp	r5, r0
 8000d22:	dc00      	bgt.n	8000d26 <__aeabi_fsub+0x6e>
 8000d24:	e0c6      	b.n	8000eb4 <__aeabi_fsub+0x1fc>
 8000d26:	4ab2      	ldr	r2, [pc, #712]	; (8000ff0 <__aeabi_fsub+0x338>)
 8000d28:	1a2d      	subs	r5, r5, r0
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	075a      	lsls	r2, r3, #29
 8000d2e:	d004      	beq.n	8000d3a <__aeabi_fsub+0x82>
 8000d30:	220f      	movs	r2, #15
 8000d32:	401a      	ands	r2, r3
 8000d34:	2a04      	cmp	r2, #4
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fsub+0x82>
 8000d38:	3304      	adds	r3, #4
 8000d3a:	015a      	lsls	r2, r3, #5
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_fsub+0x88>
 8000d3e:	e097      	b.n	8000e70 <__aeabi_fsub+0x1b8>
 8000d40:	1c6a      	adds	r2, r5, #1
 8000d42:	2dfe      	cmp	r5, #254	; 0xfe
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x90>
 8000d46:	e084      	b.n	8000e52 <__aeabi_fsub+0x19a>
 8000d48:	019b      	lsls	r3, r3, #6
 8000d4a:	0a5e      	lsrs	r6, r3, #9
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	05d0      	lsls	r0, r2, #23
 8000d50:	4330      	orrs	r0, r6
 8000d52:	07e4      	lsls	r4, r4, #31
 8000d54:	4320      	orrs	r0, r4
 8000d56:	bc80      	pop	{r7}
 8000d58:	46b8      	mov	r8, r7
 8000d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5c:	1bea      	subs	r2, r5, r7
 8000d5e:	2a00      	cmp	r2, #0
 8000d60:	dd41      	ble.n	8000de6 <__aeabi_fsub+0x12e>
 8000d62:	2f00      	cmp	r7, #0
 8000d64:	d06b      	beq.n	8000e3e <__aeabi_fsub+0x186>
 8000d66:	2dff      	cmp	r5, #255	; 0xff
 8000d68:	d100      	bne.n	8000d6c <__aeabi_fsub+0xb4>
 8000d6a:	e097      	b.n	8000e9c <__aeabi_fsub+0x1e4>
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	04db      	lsls	r3, r3, #19
 8000d70:	4318      	orrs	r0, r3
 8000d72:	2a1b      	cmp	r2, #27
 8000d74:	dc00      	bgt.n	8000d78 <__aeabi_fsub+0xc0>
 8000d76:	e0cc      	b.n	8000f12 <__aeabi_fsub+0x25a>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4463      	add	r3, ip
 8000d7c:	015a      	lsls	r2, r3, #5
 8000d7e:	d574      	bpl.n	8000e6a <__aeabi_fsub+0x1b2>
 8000d80:	3501      	adds	r5, #1
 8000d82:	2dff      	cmp	r5, #255	; 0xff
 8000d84:	d065      	beq.n	8000e52 <__aeabi_fsub+0x19a>
 8000d86:	2201      	movs	r2, #1
 8000d88:	499a      	ldr	r1, [pc, #616]	; (8000ff4 <__aeabi_fsub+0x33c>)
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	085b      	lsrs	r3, r3, #1
 8000d8e:	400b      	ands	r3, r1
 8000d90:	4313      	orrs	r3, r2
 8000d92:	e7cb      	b.n	8000d2c <__aeabi_fsub+0x74>
 8000d94:	2800      	cmp	r0, #0
 8000d96:	d01f      	beq.n	8000dd8 <__aeabi_fsub+0x120>
 8000d98:	428c      	cmp	r4, r1
 8000d9a:	d022      	beq.n	8000de2 <__aeabi_fsub+0x12a>
 8000d9c:	002a      	movs	r2, r5
 8000d9e:	3aff      	subs	r2, #255	; 0xff
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d035      	beq.n	8000e10 <__aeabi_fsub+0x158>
 8000da4:	1b7a      	subs	r2, r7, r5
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d000      	beq.n	8000dac <__aeabi_fsub+0xf4>
 8000daa:	e099      	b.n	8000ee0 <__aeabi_fsub+0x228>
 8000dac:	4663      	mov	r3, ip
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d100      	bne.n	8000db4 <__aeabi_fsub+0xfc>
 8000db2:	e0dd      	b.n	8000f70 <__aeabi_fsub+0x2b8>
 8000db4:	1e53      	subs	r3, r2, #1
 8000db6:	2a01      	cmp	r2, #1
 8000db8:	d100      	bne.n	8000dbc <__aeabi_fsub+0x104>
 8000dba:	e105      	b.n	8000fc8 <__aeabi_fsub+0x310>
 8000dbc:	2aff      	cmp	r2, #255	; 0xff
 8000dbe:	d06b      	beq.n	8000e98 <__aeabi_fsub+0x1e0>
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	e094      	b.n	8000eee <__aeabi_fsub+0x236>
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d073      	beq.n	8000eb0 <__aeabi_fsub+0x1f8>
 8000dc8:	1e51      	subs	r1, r2, #1
 8000dca:	2a01      	cmp	r2, #1
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fsub+0x118>
 8000dce:	e0df      	b.n	8000f90 <__aeabi_fsub+0x2d8>
 8000dd0:	2aff      	cmp	r2, #255	; 0xff
 8000dd2:	d063      	beq.n	8000e9c <__aeabi_fsub+0x1e4>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	e792      	b.n	8000cfe <__aeabi_fsub+0x46>
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4051      	eors	r1, r2
 8000ddc:	42a1      	cmp	r1, r4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_fsub+0x12a>
 8000de0:	e782      	b.n	8000ce8 <__aeabi_fsub+0x30>
 8000de2:	002a      	movs	r2, r5
 8000de4:	3aff      	subs	r2, #255	; 0xff
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d036      	beq.n	8000e58 <__aeabi_fsub+0x1a0>
 8000dea:	1b7a      	subs	r2, r7, r5
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x13a>
 8000df0:	e0aa      	b.n	8000f48 <__aeabi_fsub+0x290>
 8000df2:	2fff      	cmp	r7, #255	; 0xff
 8000df4:	d100      	bne.n	8000df8 <__aeabi_fsub+0x140>
 8000df6:	e0da      	b.n	8000fae <__aeabi_fsub+0x2f6>
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	4661      	mov	r1, ip
 8000dfc:	04db      	lsls	r3, r3, #19
 8000dfe:	4319      	orrs	r1, r3
 8000e00:	468c      	mov	ip, r1
 8000e02:	2a1b      	cmp	r2, #27
 8000e04:	dc00      	bgt.n	8000e08 <__aeabi_fsub+0x150>
 8000e06:	e0d4      	b.n	8000fb2 <__aeabi_fsub+0x2fa>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	003d      	movs	r5, r7
 8000e0c:	181b      	adds	r3, r3, r0
 8000e0e:	e7b5      	b.n	8000d7c <__aeabi_fsub+0xc4>
 8000e10:	27fe      	movs	r7, #254	; 0xfe
 8000e12:	1c6a      	adds	r2, r5, #1
 8000e14:	4217      	tst	r7, r2
 8000e16:	d171      	bne.n	8000efc <__aeabi_fsub+0x244>
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d000      	beq.n	8000e1e <__aeabi_fsub+0x166>
 8000e1c:	e09e      	b.n	8000f5c <__aeabi_fsub+0x2a4>
 8000e1e:	4663      	mov	r3, ip
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_fsub+0x16e>
 8000e24:	e0d5      	b.n	8000fd2 <__aeabi_fsub+0x31a>
 8000e26:	2200      	movs	r2, #0
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_fsub+0x176>
 8000e2c:	e78f      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000e2e:	1a1b      	subs	r3, r3, r0
 8000e30:	015e      	lsls	r6, r3, #5
 8000e32:	d400      	bmi.n	8000e36 <__aeabi_fsub+0x17e>
 8000e34:	e0d6      	b.n	8000fe4 <__aeabi_fsub+0x32c>
 8000e36:	4663      	mov	r3, ip
 8000e38:	000c      	movs	r4, r1
 8000e3a:	1ac3      	subs	r3, r0, r3
 8000e3c:	e776      	b.n	8000d2c <__aeabi_fsub+0x74>
 8000e3e:	2800      	cmp	r0, #0
 8000e40:	d036      	beq.n	8000eb0 <__aeabi_fsub+0x1f8>
 8000e42:	1e51      	subs	r1, r2, #1
 8000e44:	2a01      	cmp	r2, #1
 8000e46:	d100      	bne.n	8000e4a <__aeabi_fsub+0x192>
 8000e48:	e09a      	b.n	8000f80 <__aeabi_fsub+0x2c8>
 8000e4a:	2aff      	cmp	r2, #255	; 0xff
 8000e4c:	d026      	beq.n	8000e9c <__aeabi_fsub+0x1e4>
 8000e4e:	000a      	movs	r2, r1
 8000e50:	e78f      	b.n	8000d72 <__aeabi_fsub+0xba>
 8000e52:	22ff      	movs	r2, #255	; 0xff
 8000e54:	2600      	movs	r6, #0
 8000e56:	e77a      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000e58:	27fe      	movs	r7, #254	; 0xfe
 8000e5a:	1c6a      	adds	r2, r5, #1
 8000e5c:	4217      	tst	r7, r2
 8000e5e:	d062      	beq.n	8000f26 <__aeabi_fsub+0x26e>
 8000e60:	2aff      	cmp	r2, #255	; 0xff
 8000e62:	d0f6      	beq.n	8000e52 <__aeabi_fsub+0x19a>
 8000e64:	0015      	movs	r5, r2
 8000e66:	4460      	add	r0, ip
 8000e68:	0843      	lsrs	r3, r0, #1
 8000e6a:	075a      	lsls	r2, r3, #29
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_fsub+0x1b8>
 8000e6e:	e75f      	b.n	8000d30 <__aeabi_fsub+0x78>
 8000e70:	08db      	lsrs	r3, r3, #3
 8000e72:	2dff      	cmp	r5, #255	; 0xff
 8000e74:	d012      	beq.n	8000e9c <__aeabi_fsub+0x1e4>
 8000e76:	025b      	lsls	r3, r3, #9
 8000e78:	0a5e      	lsrs	r6, r3, #9
 8000e7a:	b2ea      	uxtb	r2, r5
 8000e7c:	e767      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000e7e:	4662      	mov	r2, ip
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x1ce>
 8000e84:	e093      	b.n	8000fae <__aeabi_fsub+0x2f6>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d008      	beq.n	8000e9c <__aeabi_fsub+0x1e4>
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	03d2      	lsls	r2, r2, #15
 8000e8e:	4213      	tst	r3, r2
 8000e90:	d004      	beq.n	8000e9c <__aeabi_fsub+0x1e4>
 8000e92:	4640      	mov	r0, r8
 8000e94:	4210      	tst	r0, r2
 8000e96:	d101      	bne.n	8000e9c <__aeabi_fsub+0x1e4>
 8000e98:	000c      	movs	r4, r1
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0d8      	beq.n	8000e52 <__aeabi_fsub+0x19a>
 8000ea0:	2680      	movs	r6, #128	; 0x80
 8000ea2:	03f6      	lsls	r6, r6, #15
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	0276      	lsls	r6, r6, #9
 8000ea8:	22ff      	movs	r2, #255	; 0xff
 8000eaa:	0a76      	lsrs	r6, r6, #9
 8000eac:	e74f      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000eae:	4643      	mov	r3, r8
 8000eb0:	0015      	movs	r5, r2
 8000eb2:	e7de      	b.n	8000e72 <__aeabi_fsub+0x1ba>
 8000eb4:	2220      	movs	r2, #32
 8000eb6:	1b40      	subs	r0, r0, r5
 8000eb8:	3001      	adds	r0, #1
 8000eba:	1a12      	subs	r2, r2, r0
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	40c1      	lsrs	r1, r0
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	4193      	sbcs	r3, r2
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	e72f      	b.n	8000d2c <__aeabi_fsub+0x74>
 8000ecc:	2320      	movs	r3, #32
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	0001      	movs	r1, r0
 8000ed2:	4098      	lsls	r0, r3
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	40d1      	lsrs	r1, r2
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	4193      	sbcs	r3, r2
 8000edc:	430b      	orrs	r3, r1
 8000ede:	e712      	b.n	8000d06 <__aeabi_fsub+0x4e>
 8000ee0:	2fff      	cmp	r7, #255	; 0xff
 8000ee2:	d0d9      	beq.n	8000e98 <__aeabi_fsub+0x1e0>
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	4664      	mov	r4, ip
 8000ee8:	04db      	lsls	r3, r3, #19
 8000eea:	431c      	orrs	r4, r3
 8000eec:	46a4      	mov	ip, r4
 8000eee:	2a1b      	cmp	r2, #27
 8000ef0:	dd52      	ble.n	8000f98 <__aeabi_fsub+0x2e0>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	000c      	movs	r4, r1
 8000ef6:	003d      	movs	r5, r7
 8000ef8:	1ac3      	subs	r3, r0, r3
 8000efa:	e706      	b.n	8000d0a <__aeabi_fsub+0x52>
 8000efc:	4663      	mov	r3, ip
 8000efe:	1a1e      	subs	r6, r3, r0
 8000f00:	0173      	lsls	r3, r6, #5
 8000f02:	d439      	bmi.n	8000f78 <__aeabi_fsub+0x2c0>
 8000f04:	2e00      	cmp	r6, #0
 8000f06:	d000      	beq.n	8000f0a <__aeabi_fsub+0x252>
 8000f08:	e704      	b.n	8000d14 <__aeabi_fsub+0x5c>
 8000f0a:	2400      	movs	r4, #0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2600      	movs	r6, #0
 8000f10:	e71d      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000f12:	2320      	movs	r3, #32
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	0001      	movs	r1, r0
 8000f18:	4098      	lsls	r0, r3
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	40d1      	lsrs	r1, r2
 8000f1e:	1e5a      	subs	r2, r3, #1
 8000f20:	4193      	sbcs	r3, r2
 8000f22:	430b      	orrs	r3, r1
 8000f24:	e729      	b.n	8000d7a <__aeabi_fsub+0xc2>
 8000f26:	2d00      	cmp	r5, #0
 8000f28:	d1a9      	bne.n	8000e7e <__aeabi_fsub+0x1c6>
 8000f2a:	4663      	mov	r3, ip
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d056      	beq.n	8000fde <__aeabi_fsub+0x326>
 8000f30:	2200      	movs	r2, #0
 8000f32:	2800      	cmp	r0, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x280>
 8000f36:	e70a      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	4463      	add	r3, ip
 8000f3c:	015a      	lsls	r2, r3, #5
 8000f3e:	d594      	bpl.n	8000e6a <__aeabi_fsub+0x1b2>
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <__aeabi_fsub+0x338>)
 8000f42:	3501      	adds	r5, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	e790      	b.n	8000e6a <__aeabi_fsub+0x1b2>
 8000f48:	4663      	mov	r3, ip
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0af      	beq.n	8000eae <__aeabi_fsub+0x1f6>
 8000f4e:	1e53      	subs	r3, r2, #1
 8000f50:	2a01      	cmp	r2, #1
 8000f52:	d015      	beq.n	8000f80 <__aeabi_fsub+0x2c8>
 8000f54:	2aff      	cmp	r2, #255	; 0xff
 8000f56:	d02a      	beq.n	8000fae <__aeabi_fsub+0x2f6>
 8000f58:	001a      	movs	r2, r3
 8000f5a:	e752      	b.n	8000e02 <__aeabi_fsub+0x14a>
 8000f5c:	4662      	mov	r2, ip
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d191      	bne.n	8000e86 <__aeabi_fsub+0x1ce>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d198      	bne.n	8000e98 <__aeabi_fsub+0x1e0>
 8000f66:	2680      	movs	r6, #128	; 0x80
 8000f68:	2400      	movs	r4, #0
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	03f6      	lsls	r6, r6, #15
 8000f6e:	e6ee      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000f70:	000c      	movs	r4, r1
 8000f72:	4643      	mov	r3, r8
 8000f74:	0015      	movs	r5, r2
 8000f76:	e77c      	b.n	8000e72 <__aeabi_fsub+0x1ba>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	000c      	movs	r4, r1
 8000f7c:	1ac6      	subs	r6, r0, r3
 8000f7e:	e6c9      	b.n	8000d14 <__aeabi_fsub+0x5c>
 8000f80:	0003      	movs	r3, r0
 8000f82:	4463      	add	r3, ip
 8000f84:	2501      	movs	r5, #1
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_fsub+0x2d4>
 8000f8a:	e76e      	b.n	8000e6a <__aeabi_fsub+0x1b2>
 8000f8c:	2502      	movs	r5, #2
 8000f8e:	e6fa      	b.n	8000d86 <__aeabi_fsub+0xce>
 8000f90:	4663      	mov	r3, ip
 8000f92:	2501      	movs	r5, #1
 8000f94:	1a1b      	subs	r3, r3, r0
 8000f96:	e6b8      	b.n	8000d0a <__aeabi_fsub+0x52>
 8000f98:	4664      	mov	r4, ip
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	40d4      	lsrs	r4, r2
 8000f9e:	1a9b      	subs	r3, r3, r2
 8000fa0:	4662      	mov	r2, ip
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	4193      	sbcs	r3, r2
 8000faa:	4323      	orrs	r3, r4
 8000fac:	e7a2      	b.n	8000ef4 <__aeabi_fsub+0x23c>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	e774      	b.n	8000e9c <__aeabi_fsub+0x1e4>
 8000fb2:	4661      	mov	r1, ip
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	40d1      	lsrs	r1, r2
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	4662      	mov	r2, ip
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	4193      	sbcs	r3, r2
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	e720      	b.n	8000e0a <__aeabi_fsub+0x152>
 8000fc8:	4663      	mov	r3, ip
 8000fca:	000c      	movs	r4, r1
 8000fcc:	2501      	movs	r5, #1
 8000fce:	1ac3      	subs	r3, r0, r3
 8000fd0:	e69b      	b.n	8000d0a <__aeabi_fsub+0x52>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	d099      	beq.n	8000f0a <__aeabi_fsub+0x252>
 8000fd6:	000c      	movs	r4, r1
 8000fd8:	4646      	mov	r6, r8
 8000fda:	2200      	movs	r2, #0
 8000fdc:	e6b7      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000fde:	4646      	mov	r6, r8
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e6b4      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x332>
 8000fe8:	e73f      	b.n	8000e6a <__aeabi_fsub+0x1b2>
 8000fea:	2400      	movs	r4, #0
 8000fec:	2600      	movs	r6, #0
 8000fee:	e6ae      	b.n	8000d4e <__aeabi_fsub+0x96>
 8000ff0:	fbffffff 	.word	0xfbffffff
 8000ff4:	7dffffff 	.word	0x7dffffff

08000ff8 <__aeabi_i2f>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d013      	beq.n	8001026 <__aeabi_i2f+0x2e>
 8000ffe:	17c3      	asrs	r3, r0, #31
 8001000:	18c5      	adds	r5, r0, r3
 8001002:	405d      	eors	r5, r3
 8001004:	0fc4      	lsrs	r4, r0, #31
 8001006:	0028      	movs	r0, r5
 8001008:	f001 ff20 	bl	8002e4c <__clzsi2>
 800100c:	239e      	movs	r3, #158	; 0x9e
 800100e:	0001      	movs	r1, r0
 8001010:	1a1b      	subs	r3, r3, r0
 8001012:	2b96      	cmp	r3, #150	; 0x96
 8001014:	dc0f      	bgt.n	8001036 <__aeabi_i2f+0x3e>
 8001016:	2808      	cmp	r0, #8
 8001018:	d031      	beq.n	800107e <__aeabi_i2f+0x86>
 800101a:	3908      	subs	r1, #8
 800101c:	408d      	lsls	r5, r1
 800101e:	026d      	lsls	r5, r5, #9
 8001020:	0a6d      	lsrs	r5, r5, #9
 8001022:	b2d8      	uxtb	r0, r3
 8001024:	e002      	b.n	800102c <__aeabi_i2f+0x34>
 8001026:	2400      	movs	r4, #0
 8001028:	2000      	movs	r0, #0
 800102a:	2500      	movs	r5, #0
 800102c:	05c0      	lsls	r0, r0, #23
 800102e:	4328      	orrs	r0, r5
 8001030:	07e4      	lsls	r4, r4, #31
 8001032:	4320      	orrs	r0, r4
 8001034:	bd70      	pop	{r4, r5, r6, pc}
 8001036:	2b99      	cmp	r3, #153	; 0x99
 8001038:	dd0c      	ble.n	8001054 <__aeabi_i2f+0x5c>
 800103a:	2205      	movs	r2, #5
 800103c:	1a12      	subs	r2, r2, r0
 800103e:	0028      	movs	r0, r5
 8001040:	40d0      	lsrs	r0, r2
 8001042:	0002      	movs	r2, r0
 8001044:	0008      	movs	r0, r1
 8001046:	301b      	adds	r0, #27
 8001048:	4085      	lsls	r5, r0
 800104a:	0028      	movs	r0, r5
 800104c:	1e45      	subs	r5, r0, #1
 800104e:	41a8      	sbcs	r0, r5
 8001050:	4302      	orrs	r2, r0
 8001052:	0015      	movs	r5, r2
 8001054:	2905      	cmp	r1, #5
 8001056:	dc16      	bgt.n	8001086 <__aeabi_i2f+0x8e>
 8001058:	002a      	movs	r2, r5
 800105a:	480f      	ldr	r0, [pc, #60]	; (8001098 <__aeabi_i2f+0xa0>)
 800105c:	4002      	ands	r2, r0
 800105e:	076e      	lsls	r6, r5, #29
 8001060:	d009      	beq.n	8001076 <__aeabi_i2f+0x7e>
 8001062:	260f      	movs	r6, #15
 8001064:	4035      	ands	r5, r6
 8001066:	2d04      	cmp	r5, #4
 8001068:	d005      	beq.n	8001076 <__aeabi_i2f+0x7e>
 800106a:	3204      	adds	r2, #4
 800106c:	0155      	lsls	r5, r2, #5
 800106e:	d502      	bpl.n	8001076 <__aeabi_i2f+0x7e>
 8001070:	239f      	movs	r3, #159	; 0x9f
 8001072:	4002      	ands	r2, r0
 8001074:	1a5b      	subs	r3, r3, r1
 8001076:	0192      	lsls	r2, r2, #6
 8001078:	0a55      	lsrs	r5, r2, #9
 800107a:	b2d8      	uxtb	r0, r3
 800107c:	e7d6      	b.n	800102c <__aeabi_i2f+0x34>
 800107e:	026d      	lsls	r5, r5, #9
 8001080:	2096      	movs	r0, #150	; 0x96
 8001082:	0a6d      	lsrs	r5, r5, #9
 8001084:	e7d2      	b.n	800102c <__aeabi_i2f+0x34>
 8001086:	1f4a      	subs	r2, r1, #5
 8001088:	4095      	lsls	r5, r2
 800108a:	002a      	movs	r2, r5
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <__aeabi_i2f+0xa0>)
 800108e:	4002      	ands	r2, r0
 8001090:	076e      	lsls	r6, r5, #29
 8001092:	d0f0      	beq.n	8001076 <__aeabi_i2f+0x7e>
 8001094:	e7e5      	b.n	8001062 <__aeabi_i2f+0x6a>
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	fbffffff 	.word	0xfbffffff

0800109c <__aeabi_ui2f>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	1e04      	subs	r4, r0, #0
 80010a0:	d00e      	beq.n	80010c0 <__aeabi_ui2f+0x24>
 80010a2:	f001 fed3 	bl	8002e4c <__clzsi2>
 80010a6:	239e      	movs	r3, #158	; 0x9e
 80010a8:	0001      	movs	r1, r0
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	2b96      	cmp	r3, #150	; 0x96
 80010ae:	dc0c      	bgt.n	80010ca <__aeabi_ui2f+0x2e>
 80010b0:	2808      	cmp	r0, #8
 80010b2:	d02c      	beq.n	800110e <__aeabi_ui2f+0x72>
 80010b4:	3908      	subs	r1, #8
 80010b6:	408c      	lsls	r4, r1
 80010b8:	0264      	lsls	r4, r4, #9
 80010ba:	0a64      	lsrs	r4, r4, #9
 80010bc:	b2d8      	uxtb	r0, r3
 80010be:	e001      	b.n	80010c4 <__aeabi_ui2f+0x28>
 80010c0:	2000      	movs	r0, #0
 80010c2:	2400      	movs	r4, #0
 80010c4:	05c0      	lsls	r0, r0, #23
 80010c6:	4320      	orrs	r0, r4
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	2b99      	cmp	r3, #153	; 0x99
 80010cc:	dd0a      	ble.n	80010e4 <__aeabi_ui2f+0x48>
 80010ce:	0002      	movs	r2, r0
 80010d0:	0020      	movs	r0, r4
 80010d2:	321b      	adds	r2, #27
 80010d4:	4090      	lsls	r0, r2
 80010d6:	0002      	movs	r2, r0
 80010d8:	1e50      	subs	r0, r2, #1
 80010da:	4182      	sbcs	r2, r0
 80010dc:	2005      	movs	r0, #5
 80010de:	1a40      	subs	r0, r0, r1
 80010e0:	40c4      	lsrs	r4, r0
 80010e2:	4314      	orrs	r4, r2
 80010e4:	2905      	cmp	r1, #5
 80010e6:	dc16      	bgt.n	8001116 <__aeabi_ui2f+0x7a>
 80010e8:	0022      	movs	r2, r4
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <__aeabi_ui2f+0x8c>)
 80010ec:	4002      	ands	r2, r0
 80010ee:	0765      	lsls	r5, r4, #29
 80010f0:	d009      	beq.n	8001106 <__aeabi_ui2f+0x6a>
 80010f2:	250f      	movs	r5, #15
 80010f4:	402c      	ands	r4, r5
 80010f6:	2c04      	cmp	r4, #4
 80010f8:	d005      	beq.n	8001106 <__aeabi_ui2f+0x6a>
 80010fa:	3204      	adds	r2, #4
 80010fc:	0154      	lsls	r4, r2, #5
 80010fe:	d502      	bpl.n	8001106 <__aeabi_ui2f+0x6a>
 8001100:	239f      	movs	r3, #159	; 0x9f
 8001102:	4002      	ands	r2, r0
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	0192      	lsls	r2, r2, #6
 8001108:	0a54      	lsrs	r4, r2, #9
 800110a:	b2d8      	uxtb	r0, r3
 800110c:	e7da      	b.n	80010c4 <__aeabi_ui2f+0x28>
 800110e:	0264      	lsls	r4, r4, #9
 8001110:	2096      	movs	r0, #150	; 0x96
 8001112:	0a64      	lsrs	r4, r4, #9
 8001114:	e7d6      	b.n	80010c4 <__aeabi_ui2f+0x28>
 8001116:	1f4a      	subs	r2, r1, #5
 8001118:	4094      	lsls	r4, r2
 800111a:	0022      	movs	r2, r4
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <__aeabi_ui2f+0x8c>)
 800111e:	4002      	ands	r2, r0
 8001120:	0765      	lsls	r5, r4, #29
 8001122:	d0f0      	beq.n	8001106 <__aeabi_ui2f+0x6a>
 8001124:	e7e5      	b.n	80010f2 <__aeabi_ui2f+0x56>
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	fbffffff 	.word	0xfbffffff

0800112c <__aeabi_dadd>:
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	464f      	mov	r7, r9
 8001130:	4646      	mov	r6, r8
 8001132:	46d6      	mov	lr, sl
 8001134:	0004      	movs	r4, r0
 8001136:	b5c0      	push	{r6, r7, lr}
 8001138:	001f      	movs	r7, r3
 800113a:	030b      	lsls	r3, r1, #12
 800113c:	0010      	movs	r0, r2
 800113e:	004e      	lsls	r6, r1, #1
 8001140:	0a5b      	lsrs	r3, r3, #9
 8001142:	0fcd      	lsrs	r5, r1, #31
 8001144:	0f61      	lsrs	r1, r4, #29
 8001146:	007a      	lsls	r2, r7, #1
 8001148:	4319      	orrs	r1, r3
 800114a:	00e3      	lsls	r3, r4, #3
 800114c:	033c      	lsls	r4, r7, #12
 800114e:	0fff      	lsrs	r7, r7, #31
 8001150:	46bc      	mov	ip, r7
 8001152:	0a64      	lsrs	r4, r4, #9
 8001154:	0f47      	lsrs	r7, r0, #29
 8001156:	4327      	orrs	r7, r4
 8001158:	0d76      	lsrs	r6, r6, #21
 800115a:	0d52      	lsrs	r2, r2, #21
 800115c:	00c0      	lsls	r0, r0, #3
 800115e:	46b9      	mov	r9, r7
 8001160:	4680      	mov	r8, r0
 8001162:	1ab7      	subs	r7, r6, r2
 8001164:	4565      	cmp	r5, ip
 8001166:	d100      	bne.n	800116a <__aeabi_dadd+0x3e>
 8001168:	e09b      	b.n	80012a2 <__aeabi_dadd+0x176>
 800116a:	2f00      	cmp	r7, #0
 800116c:	dc00      	bgt.n	8001170 <__aeabi_dadd+0x44>
 800116e:	e084      	b.n	800127a <__aeabi_dadd+0x14e>
 8001170:	2a00      	cmp	r2, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x4a>
 8001174:	e0be      	b.n	80012f4 <__aeabi_dadd+0x1c8>
 8001176:	4ac8      	ldr	r2, [pc, #800]	; (8001498 <__aeabi_dadd+0x36c>)
 8001178:	4296      	cmp	r6, r2
 800117a:	d100      	bne.n	800117e <__aeabi_dadd+0x52>
 800117c:	e124      	b.n	80013c8 <__aeabi_dadd+0x29c>
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	464c      	mov	r4, r9
 8001182:	0412      	lsls	r2, r2, #16
 8001184:	4314      	orrs	r4, r2
 8001186:	46a1      	mov	r9, r4
 8001188:	2f38      	cmp	r7, #56	; 0x38
 800118a:	dd00      	ble.n	800118e <__aeabi_dadd+0x62>
 800118c:	e167      	b.n	800145e <__aeabi_dadd+0x332>
 800118e:	2f1f      	cmp	r7, #31
 8001190:	dd00      	ble.n	8001194 <__aeabi_dadd+0x68>
 8001192:	e1d6      	b.n	8001542 <__aeabi_dadd+0x416>
 8001194:	2220      	movs	r2, #32
 8001196:	464c      	mov	r4, r9
 8001198:	1bd2      	subs	r2, r2, r7
 800119a:	4094      	lsls	r4, r2
 800119c:	46a2      	mov	sl, r4
 800119e:	4644      	mov	r4, r8
 80011a0:	40fc      	lsrs	r4, r7
 80011a2:	0020      	movs	r0, r4
 80011a4:	4654      	mov	r4, sl
 80011a6:	4304      	orrs	r4, r0
 80011a8:	4640      	mov	r0, r8
 80011aa:	4090      	lsls	r0, r2
 80011ac:	1e42      	subs	r2, r0, #1
 80011ae:	4190      	sbcs	r0, r2
 80011b0:	464a      	mov	r2, r9
 80011b2:	40fa      	lsrs	r2, r7
 80011b4:	4304      	orrs	r4, r0
 80011b6:	1a89      	subs	r1, r1, r2
 80011b8:	1b1c      	subs	r4, r3, r4
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	4192      	sbcs	r2, r2
 80011be:	4252      	negs	r2, r2
 80011c0:	1a8b      	subs	r3, r1, r2
 80011c2:	469a      	mov	sl, r3
 80011c4:	4653      	mov	r3, sl
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	d400      	bmi.n	80011cc <__aeabi_dadd+0xa0>
 80011ca:	e0d4      	b.n	8001376 <__aeabi_dadd+0x24a>
 80011cc:	4653      	mov	r3, sl
 80011ce:	025a      	lsls	r2, r3, #9
 80011d0:	0a53      	lsrs	r3, r2, #9
 80011d2:	469a      	mov	sl, r3
 80011d4:	4653      	mov	r3, sl
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0xb0>
 80011da:	e104      	b.n	80013e6 <__aeabi_dadd+0x2ba>
 80011dc:	4650      	mov	r0, sl
 80011de:	f001 fe35 	bl	8002e4c <__clzsi2>
 80011e2:	0003      	movs	r3, r0
 80011e4:	3b08      	subs	r3, #8
 80011e6:	2220      	movs	r2, #32
 80011e8:	0020      	movs	r0, r4
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	4651      	mov	r1, sl
 80011ee:	40d0      	lsrs	r0, r2
 80011f0:	4099      	lsls	r1, r3
 80011f2:	0002      	movs	r2, r0
 80011f4:	409c      	lsls	r4, r3
 80011f6:	430a      	orrs	r2, r1
 80011f8:	42b3      	cmp	r3, r6
 80011fa:	da00      	bge.n	80011fe <__aeabi_dadd+0xd2>
 80011fc:	e102      	b.n	8001404 <__aeabi_dadd+0x2d8>
 80011fe:	1b9b      	subs	r3, r3, r6
 8001200:	1c59      	adds	r1, r3, #1
 8001202:	291f      	cmp	r1, #31
 8001204:	dd00      	ble.n	8001208 <__aeabi_dadd+0xdc>
 8001206:	e0a7      	b.n	8001358 <__aeabi_dadd+0x22c>
 8001208:	2320      	movs	r3, #32
 800120a:	0010      	movs	r0, r2
 800120c:	0026      	movs	r6, r4
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	409c      	lsls	r4, r3
 8001212:	4098      	lsls	r0, r3
 8001214:	40ce      	lsrs	r6, r1
 8001216:	40ca      	lsrs	r2, r1
 8001218:	1e63      	subs	r3, r4, #1
 800121a:	419c      	sbcs	r4, r3
 800121c:	4330      	orrs	r0, r6
 800121e:	4692      	mov	sl, r2
 8001220:	2600      	movs	r6, #0
 8001222:	4304      	orrs	r4, r0
 8001224:	0763      	lsls	r3, r4, #29
 8001226:	d009      	beq.n	800123c <__aeabi_dadd+0x110>
 8001228:	230f      	movs	r3, #15
 800122a:	4023      	ands	r3, r4
 800122c:	2b04      	cmp	r3, #4
 800122e:	d005      	beq.n	800123c <__aeabi_dadd+0x110>
 8001230:	1d23      	adds	r3, r4, #4
 8001232:	42a3      	cmp	r3, r4
 8001234:	41a4      	sbcs	r4, r4
 8001236:	4264      	negs	r4, r4
 8001238:	44a2      	add	sl, r4
 800123a:	001c      	movs	r4, r3
 800123c:	4653      	mov	r3, sl
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	d400      	bmi.n	8001244 <__aeabi_dadd+0x118>
 8001242:	e09b      	b.n	800137c <__aeabi_dadd+0x250>
 8001244:	4b94      	ldr	r3, [pc, #592]	; (8001498 <__aeabi_dadd+0x36c>)
 8001246:	3601      	adds	r6, #1
 8001248:	429e      	cmp	r6, r3
 800124a:	d100      	bne.n	800124e <__aeabi_dadd+0x122>
 800124c:	e0b8      	b.n	80013c0 <__aeabi_dadd+0x294>
 800124e:	4653      	mov	r3, sl
 8001250:	4992      	ldr	r1, [pc, #584]	; (800149c <__aeabi_dadd+0x370>)
 8001252:	08e4      	lsrs	r4, r4, #3
 8001254:	400b      	ands	r3, r1
 8001256:	0019      	movs	r1, r3
 8001258:	075b      	lsls	r3, r3, #29
 800125a:	4323      	orrs	r3, r4
 800125c:	0572      	lsls	r2, r6, #21
 800125e:	024c      	lsls	r4, r1, #9
 8001260:	0b24      	lsrs	r4, r4, #12
 8001262:	0d52      	lsrs	r2, r2, #21
 8001264:	0512      	lsls	r2, r2, #20
 8001266:	07ed      	lsls	r5, r5, #31
 8001268:	4322      	orrs	r2, r4
 800126a:	432a      	orrs	r2, r5
 800126c:	0018      	movs	r0, r3
 800126e:	0011      	movs	r1, r2
 8001270:	bce0      	pop	{r5, r6, r7}
 8001272:	46ba      	mov	sl, r7
 8001274:	46b1      	mov	r9, r6
 8001276:	46a8      	mov	r8, r5
 8001278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127a:	2f00      	cmp	r7, #0
 800127c:	d048      	beq.n	8001310 <__aeabi_dadd+0x1e4>
 800127e:	1b97      	subs	r7, r2, r6
 8001280:	2e00      	cmp	r6, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_dadd+0x15a>
 8001284:	e10e      	b.n	80014a4 <__aeabi_dadd+0x378>
 8001286:	000c      	movs	r4, r1
 8001288:	431c      	orrs	r4, r3
 800128a:	d100      	bne.n	800128e <__aeabi_dadd+0x162>
 800128c:	e1b7      	b.n	80015fe <__aeabi_dadd+0x4d2>
 800128e:	1e7c      	subs	r4, r7, #1
 8001290:	2f01      	cmp	r7, #1
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0x16a>
 8001294:	e226      	b.n	80016e4 <__aeabi_dadd+0x5b8>
 8001296:	4d80      	ldr	r5, [pc, #512]	; (8001498 <__aeabi_dadd+0x36c>)
 8001298:	42af      	cmp	r7, r5
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x172>
 800129c:	e1d5      	b.n	800164a <__aeabi_dadd+0x51e>
 800129e:	0027      	movs	r7, r4
 80012a0:	e107      	b.n	80014b2 <__aeabi_dadd+0x386>
 80012a2:	2f00      	cmp	r7, #0
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_dadd+0x17c>
 80012a6:	e0b2      	b.n	800140e <__aeabi_dadd+0x2e2>
 80012a8:	2a00      	cmp	r2, #0
 80012aa:	d047      	beq.n	800133c <__aeabi_dadd+0x210>
 80012ac:	4a7a      	ldr	r2, [pc, #488]	; (8001498 <__aeabi_dadd+0x36c>)
 80012ae:	4296      	cmp	r6, r2
 80012b0:	d100      	bne.n	80012b4 <__aeabi_dadd+0x188>
 80012b2:	e089      	b.n	80013c8 <__aeabi_dadd+0x29c>
 80012b4:	2280      	movs	r2, #128	; 0x80
 80012b6:	464c      	mov	r4, r9
 80012b8:	0412      	lsls	r2, r2, #16
 80012ba:	4314      	orrs	r4, r2
 80012bc:	46a1      	mov	r9, r4
 80012be:	2f38      	cmp	r7, #56	; 0x38
 80012c0:	dc6b      	bgt.n	800139a <__aeabi_dadd+0x26e>
 80012c2:	2f1f      	cmp	r7, #31
 80012c4:	dc00      	bgt.n	80012c8 <__aeabi_dadd+0x19c>
 80012c6:	e16e      	b.n	80015a6 <__aeabi_dadd+0x47a>
 80012c8:	003a      	movs	r2, r7
 80012ca:	4648      	mov	r0, r9
 80012cc:	3a20      	subs	r2, #32
 80012ce:	40d0      	lsrs	r0, r2
 80012d0:	4684      	mov	ip, r0
 80012d2:	2f20      	cmp	r7, #32
 80012d4:	d007      	beq.n	80012e6 <__aeabi_dadd+0x1ba>
 80012d6:	2240      	movs	r2, #64	; 0x40
 80012d8:	4648      	mov	r0, r9
 80012da:	1bd2      	subs	r2, r2, r7
 80012dc:	4090      	lsls	r0, r2
 80012de:	0002      	movs	r2, r0
 80012e0:	4640      	mov	r0, r8
 80012e2:	4310      	orrs	r0, r2
 80012e4:	4680      	mov	r8, r0
 80012e6:	4640      	mov	r0, r8
 80012e8:	1e42      	subs	r2, r0, #1
 80012ea:	4190      	sbcs	r0, r2
 80012ec:	4662      	mov	r2, ip
 80012ee:	0004      	movs	r4, r0
 80012f0:	4314      	orrs	r4, r2
 80012f2:	e057      	b.n	80013a4 <__aeabi_dadd+0x278>
 80012f4:	464a      	mov	r2, r9
 80012f6:	4302      	orrs	r2, r0
 80012f8:	d100      	bne.n	80012fc <__aeabi_dadd+0x1d0>
 80012fa:	e103      	b.n	8001504 <__aeabi_dadd+0x3d8>
 80012fc:	1e7a      	subs	r2, r7, #1
 80012fe:	2f01      	cmp	r7, #1
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x1d8>
 8001302:	e193      	b.n	800162c <__aeabi_dadd+0x500>
 8001304:	4c64      	ldr	r4, [pc, #400]	; (8001498 <__aeabi_dadd+0x36c>)
 8001306:	42a7      	cmp	r7, r4
 8001308:	d100      	bne.n	800130c <__aeabi_dadd+0x1e0>
 800130a:	e18a      	b.n	8001622 <__aeabi_dadd+0x4f6>
 800130c:	0017      	movs	r7, r2
 800130e:	e73b      	b.n	8001188 <__aeabi_dadd+0x5c>
 8001310:	4c63      	ldr	r4, [pc, #396]	; (80014a0 <__aeabi_dadd+0x374>)
 8001312:	1c72      	adds	r2, r6, #1
 8001314:	4222      	tst	r2, r4
 8001316:	d000      	beq.n	800131a <__aeabi_dadd+0x1ee>
 8001318:	e0e0      	b.n	80014dc <__aeabi_dadd+0x3b0>
 800131a:	000a      	movs	r2, r1
 800131c:	431a      	orrs	r2, r3
 800131e:	2e00      	cmp	r6, #0
 8001320:	d000      	beq.n	8001324 <__aeabi_dadd+0x1f8>
 8001322:	e174      	b.n	800160e <__aeabi_dadd+0x4e2>
 8001324:	2a00      	cmp	r2, #0
 8001326:	d100      	bne.n	800132a <__aeabi_dadd+0x1fe>
 8001328:	e1d0      	b.n	80016cc <__aeabi_dadd+0x5a0>
 800132a:	464a      	mov	r2, r9
 800132c:	4302      	orrs	r2, r0
 800132e:	d000      	beq.n	8001332 <__aeabi_dadd+0x206>
 8001330:	e1e3      	b.n	80016fa <__aeabi_dadd+0x5ce>
 8001332:	074a      	lsls	r2, r1, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	08c9      	lsrs	r1, r1, #3
 800133a:	e029      	b.n	8001390 <__aeabi_dadd+0x264>
 800133c:	464a      	mov	r2, r9
 800133e:	4302      	orrs	r2, r0
 8001340:	d100      	bne.n	8001344 <__aeabi_dadd+0x218>
 8001342:	e17d      	b.n	8001640 <__aeabi_dadd+0x514>
 8001344:	1e7a      	subs	r2, r7, #1
 8001346:	2f01      	cmp	r7, #1
 8001348:	d100      	bne.n	800134c <__aeabi_dadd+0x220>
 800134a:	e0e0      	b.n	800150e <__aeabi_dadd+0x3e2>
 800134c:	4c52      	ldr	r4, [pc, #328]	; (8001498 <__aeabi_dadd+0x36c>)
 800134e:	42a7      	cmp	r7, r4
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x228>
 8001352:	e166      	b.n	8001622 <__aeabi_dadd+0x4f6>
 8001354:	0017      	movs	r7, r2
 8001356:	e7b2      	b.n	80012be <__aeabi_dadd+0x192>
 8001358:	0010      	movs	r0, r2
 800135a:	3b1f      	subs	r3, #31
 800135c:	40d8      	lsrs	r0, r3
 800135e:	2920      	cmp	r1, #32
 8001360:	d003      	beq.n	800136a <__aeabi_dadd+0x23e>
 8001362:	2340      	movs	r3, #64	; 0x40
 8001364:	1a5b      	subs	r3, r3, r1
 8001366:	409a      	lsls	r2, r3
 8001368:	4314      	orrs	r4, r2
 800136a:	1e63      	subs	r3, r4, #1
 800136c:	419c      	sbcs	r4, r3
 800136e:	2300      	movs	r3, #0
 8001370:	2600      	movs	r6, #0
 8001372:	469a      	mov	sl, r3
 8001374:	4304      	orrs	r4, r0
 8001376:	0763      	lsls	r3, r4, #29
 8001378:	d000      	beq.n	800137c <__aeabi_dadd+0x250>
 800137a:	e755      	b.n	8001228 <__aeabi_dadd+0xfc>
 800137c:	4652      	mov	r2, sl
 800137e:	08e3      	lsrs	r3, r4, #3
 8001380:	0752      	lsls	r2, r2, #29
 8001382:	4313      	orrs	r3, r2
 8001384:	4652      	mov	r2, sl
 8001386:	0037      	movs	r7, r6
 8001388:	08d1      	lsrs	r1, r2, #3
 800138a:	4a43      	ldr	r2, [pc, #268]	; (8001498 <__aeabi_dadd+0x36c>)
 800138c:	4297      	cmp	r7, r2
 800138e:	d01f      	beq.n	80013d0 <__aeabi_dadd+0x2a4>
 8001390:	0309      	lsls	r1, r1, #12
 8001392:	057a      	lsls	r2, r7, #21
 8001394:	0b0c      	lsrs	r4, r1, #12
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	e764      	b.n	8001264 <__aeabi_dadd+0x138>
 800139a:	4642      	mov	r2, r8
 800139c:	464c      	mov	r4, r9
 800139e:	4314      	orrs	r4, r2
 80013a0:	1e62      	subs	r2, r4, #1
 80013a2:	4194      	sbcs	r4, r2
 80013a4:	18e4      	adds	r4, r4, r3
 80013a6:	429c      	cmp	r4, r3
 80013a8:	4192      	sbcs	r2, r2
 80013aa:	4252      	negs	r2, r2
 80013ac:	4692      	mov	sl, r2
 80013ae:	448a      	add	sl, r1
 80013b0:	4653      	mov	r3, sl
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	d5df      	bpl.n	8001376 <__aeabi_dadd+0x24a>
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <__aeabi_dadd+0x36c>)
 80013b8:	3601      	adds	r6, #1
 80013ba:	429e      	cmp	r6, r3
 80013bc:	d000      	beq.n	80013c0 <__aeabi_dadd+0x294>
 80013be:	e0b3      	b.n	8001528 <__aeabi_dadd+0x3fc>
 80013c0:	0032      	movs	r2, r6
 80013c2:	2400      	movs	r4, #0
 80013c4:	2300      	movs	r3, #0
 80013c6:	e74d      	b.n	8001264 <__aeabi_dadd+0x138>
 80013c8:	074a      	lsls	r2, r1, #29
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	08c9      	lsrs	r1, r1, #3
 80013d0:	001a      	movs	r2, r3
 80013d2:	430a      	orrs	r2, r1
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dadd+0x2ac>
 80013d6:	e200      	b.n	80017da <__aeabi_dadd+0x6ae>
 80013d8:	2480      	movs	r4, #128	; 0x80
 80013da:	0324      	lsls	r4, r4, #12
 80013dc:	430c      	orrs	r4, r1
 80013de:	0324      	lsls	r4, r4, #12
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <__aeabi_dadd+0x36c>)
 80013e2:	0b24      	lsrs	r4, r4, #12
 80013e4:	e73e      	b.n	8001264 <__aeabi_dadd+0x138>
 80013e6:	0020      	movs	r0, r4
 80013e8:	f001 fd30 	bl	8002e4c <__clzsi2>
 80013ec:	0003      	movs	r3, r0
 80013ee:	3318      	adds	r3, #24
 80013f0:	2b1f      	cmp	r3, #31
 80013f2:	dc00      	bgt.n	80013f6 <__aeabi_dadd+0x2ca>
 80013f4:	e6f7      	b.n	80011e6 <__aeabi_dadd+0xba>
 80013f6:	0022      	movs	r2, r4
 80013f8:	3808      	subs	r0, #8
 80013fa:	4082      	lsls	r2, r0
 80013fc:	2400      	movs	r4, #0
 80013fe:	42b3      	cmp	r3, r6
 8001400:	db00      	blt.n	8001404 <__aeabi_dadd+0x2d8>
 8001402:	e6fc      	b.n	80011fe <__aeabi_dadd+0xd2>
 8001404:	1af6      	subs	r6, r6, r3
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <__aeabi_dadd+0x370>)
 8001408:	401a      	ands	r2, r3
 800140a:	4692      	mov	sl, r2
 800140c:	e70a      	b.n	8001224 <__aeabi_dadd+0xf8>
 800140e:	2f00      	cmp	r7, #0
 8001410:	d02b      	beq.n	800146a <__aeabi_dadd+0x33e>
 8001412:	1b97      	subs	r7, r2, r6
 8001414:	2e00      	cmp	r6, #0
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x2ee>
 8001418:	e0b8      	b.n	800158c <__aeabi_dadd+0x460>
 800141a:	4c1f      	ldr	r4, [pc, #124]	; (8001498 <__aeabi_dadd+0x36c>)
 800141c:	42a2      	cmp	r2, r4
 800141e:	d100      	bne.n	8001422 <__aeabi_dadd+0x2f6>
 8001420:	e11c      	b.n	800165c <__aeabi_dadd+0x530>
 8001422:	2480      	movs	r4, #128	; 0x80
 8001424:	0424      	lsls	r4, r4, #16
 8001426:	4321      	orrs	r1, r4
 8001428:	2f38      	cmp	r7, #56	; 0x38
 800142a:	dd00      	ble.n	800142e <__aeabi_dadd+0x302>
 800142c:	e11e      	b.n	800166c <__aeabi_dadd+0x540>
 800142e:	2f1f      	cmp	r7, #31
 8001430:	dd00      	ble.n	8001434 <__aeabi_dadd+0x308>
 8001432:	e19e      	b.n	8001772 <__aeabi_dadd+0x646>
 8001434:	2620      	movs	r6, #32
 8001436:	000c      	movs	r4, r1
 8001438:	1bf6      	subs	r6, r6, r7
 800143a:	0018      	movs	r0, r3
 800143c:	40b3      	lsls	r3, r6
 800143e:	40b4      	lsls	r4, r6
 8001440:	40f8      	lsrs	r0, r7
 8001442:	1e5e      	subs	r6, r3, #1
 8001444:	41b3      	sbcs	r3, r6
 8001446:	40f9      	lsrs	r1, r7
 8001448:	4304      	orrs	r4, r0
 800144a:	431c      	orrs	r4, r3
 800144c:	4489      	add	r9, r1
 800144e:	4444      	add	r4, r8
 8001450:	4544      	cmp	r4, r8
 8001452:	419b      	sbcs	r3, r3
 8001454:	425b      	negs	r3, r3
 8001456:	444b      	add	r3, r9
 8001458:	469a      	mov	sl, r3
 800145a:	0016      	movs	r6, r2
 800145c:	e7a8      	b.n	80013b0 <__aeabi_dadd+0x284>
 800145e:	4642      	mov	r2, r8
 8001460:	464c      	mov	r4, r9
 8001462:	4314      	orrs	r4, r2
 8001464:	1e62      	subs	r2, r4, #1
 8001466:	4194      	sbcs	r4, r2
 8001468:	e6a6      	b.n	80011b8 <__aeabi_dadd+0x8c>
 800146a:	4c0d      	ldr	r4, [pc, #52]	; (80014a0 <__aeabi_dadd+0x374>)
 800146c:	1c72      	adds	r2, r6, #1
 800146e:	4222      	tst	r2, r4
 8001470:	d000      	beq.n	8001474 <__aeabi_dadd+0x348>
 8001472:	e0a8      	b.n	80015c6 <__aeabi_dadd+0x49a>
 8001474:	000a      	movs	r2, r1
 8001476:	431a      	orrs	r2, r3
 8001478:	2e00      	cmp	r6, #0
 800147a:	d000      	beq.n	800147e <__aeabi_dadd+0x352>
 800147c:	e10a      	b.n	8001694 <__aeabi_dadd+0x568>
 800147e:	2a00      	cmp	r2, #0
 8001480:	d100      	bne.n	8001484 <__aeabi_dadd+0x358>
 8001482:	e15e      	b.n	8001742 <__aeabi_dadd+0x616>
 8001484:	464a      	mov	r2, r9
 8001486:	4302      	orrs	r2, r0
 8001488:	d000      	beq.n	800148c <__aeabi_dadd+0x360>
 800148a:	e161      	b.n	8001750 <__aeabi_dadd+0x624>
 800148c:	074a      	lsls	r2, r1, #29
 800148e:	08db      	lsrs	r3, r3, #3
 8001490:	4313      	orrs	r3, r2
 8001492:	08c9      	lsrs	r1, r1, #3
 8001494:	e77c      	b.n	8001390 <__aeabi_dadd+0x264>
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	000007ff 	.word	0x000007ff
 800149c:	ff7fffff 	.word	0xff7fffff
 80014a0:	000007fe 	.word	0x000007fe
 80014a4:	4ccf      	ldr	r4, [pc, #828]	; (80017e4 <__aeabi_dadd+0x6b8>)
 80014a6:	42a2      	cmp	r2, r4
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x380>
 80014aa:	e0ce      	b.n	800164a <__aeabi_dadd+0x51e>
 80014ac:	2480      	movs	r4, #128	; 0x80
 80014ae:	0424      	lsls	r4, r4, #16
 80014b0:	4321      	orrs	r1, r4
 80014b2:	2f38      	cmp	r7, #56	; 0x38
 80014b4:	dc5b      	bgt.n	800156e <__aeabi_dadd+0x442>
 80014b6:	2f1f      	cmp	r7, #31
 80014b8:	dd00      	ble.n	80014bc <__aeabi_dadd+0x390>
 80014ba:	e0dc      	b.n	8001676 <__aeabi_dadd+0x54a>
 80014bc:	2520      	movs	r5, #32
 80014be:	000c      	movs	r4, r1
 80014c0:	1bed      	subs	r5, r5, r7
 80014c2:	001e      	movs	r6, r3
 80014c4:	40ab      	lsls	r3, r5
 80014c6:	40ac      	lsls	r4, r5
 80014c8:	40fe      	lsrs	r6, r7
 80014ca:	1e5d      	subs	r5, r3, #1
 80014cc:	41ab      	sbcs	r3, r5
 80014ce:	4334      	orrs	r4, r6
 80014d0:	40f9      	lsrs	r1, r7
 80014d2:	431c      	orrs	r4, r3
 80014d4:	464b      	mov	r3, r9
 80014d6:	1a5b      	subs	r3, r3, r1
 80014d8:	4699      	mov	r9, r3
 80014da:	e04c      	b.n	8001576 <__aeabi_dadd+0x44a>
 80014dc:	464a      	mov	r2, r9
 80014de:	1a1c      	subs	r4, r3, r0
 80014e0:	1a88      	subs	r0, r1, r2
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	4192      	sbcs	r2, r2
 80014e6:	4252      	negs	r2, r2
 80014e8:	4692      	mov	sl, r2
 80014ea:	0002      	movs	r2, r0
 80014ec:	4650      	mov	r0, sl
 80014ee:	1a12      	subs	r2, r2, r0
 80014f0:	4692      	mov	sl, r2
 80014f2:	0212      	lsls	r2, r2, #8
 80014f4:	d478      	bmi.n	80015e8 <__aeabi_dadd+0x4bc>
 80014f6:	4653      	mov	r3, sl
 80014f8:	4323      	orrs	r3, r4
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x3d2>
 80014fc:	e66a      	b.n	80011d4 <__aeabi_dadd+0xa8>
 80014fe:	2100      	movs	r1, #0
 8001500:	2500      	movs	r5, #0
 8001502:	e745      	b.n	8001390 <__aeabi_dadd+0x264>
 8001504:	074a      	lsls	r2, r1, #29
 8001506:	08db      	lsrs	r3, r3, #3
 8001508:	4313      	orrs	r3, r2
 800150a:	08c9      	lsrs	r1, r1, #3
 800150c:	e73d      	b.n	800138a <__aeabi_dadd+0x25e>
 800150e:	181c      	adds	r4, r3, r0
 8001510:	429c      	cmp	r4, r3
 8001512:	419b      	sbcs	r3, r3
 8001514:	4449      	add	r1, r9
 8001516:	468a      	mov	sl, r1
 8001518:	425b      	negs	r3, r3
 800151a:	449a      	add	sl, r3
 800151c:	4653      	mov	r3, sl
 800151e:	2601      	movs	r6, #1
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	d400      	bmi.n	8001526 <__aeabi_dadd+0x3fa>
 8001524:	e727      	b.n	8001376 <__aeabi_dadd+0x24a>
 8001526:	2602      	movs	r6, #2
 8001528:	4652      	mov	r2, sl
 800152a:	4baf      	ldr	r3, [pc, #700]	; (80017e8 <__aeabi_dadd+0x6bc>)
 800152c:	2101      	movs	r1, #1
 800152e:	401a      	ands	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	4021      	ands	r1, r4
 8001534:	0862      	lsrs	r2, r4, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	07dc      	lsls	r4, r3, #31
 800153a:	085b      	lsrs	r3, r3, #1
 800153c:	469a      	mov	sl, r3
 800153e:	4314      	orrs	r4, r2
 8001540:	e670      	b.n	8001224 <__aeabi_dadd+0xf8>
 8001542:	003a      	movs	r2, r7
 8001544:	464c      	mov	r4, r9
 8001546:	3a20      	subs	r2, #32
 8001548:	40d4      	lsrs	r4, r2
 800154a:	46a4      	mov	ip, r4
 800154c:	2f20      	cmp	r7, #32
 800154e:	d007      	beq.n	8001560 <__aeabi_dadd+0x434>
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	4648      	mov	r0, r9
 8001554:	1bd2      	subs	r2, r2, r7
 8001556:	4090      	lsls	r0, r2
 8001558:	0002      	movs	r2, r0
 800155a:	4640      	mov	r0, r8
 800155c:	4310      	orrs	r0, r2
 800155e:	4680      	mov	r8, r0
 8001560:	4640      	mov	r0, r8
 8001562:	1e42      	subs	r2, r0, #1
 8001564:	4190      	sbcs	r0, r2
 8001566:	4662      	mov	r2, ip
 8001568:	0004      	movs	r4, r0
 800156a:	4314      	orrs	r4, r2
 800156c:	e624      	b.n	80011b8 <__aeabi_dadd+0x8c>
 800156e:	4319      	orrs	r1, r3
 8001570:	000c      	movs	r4, r1
 8001572:	1e63      	subs	r3, r4, #1
 8001574:	419c      	sbcs	r4, r3
 8001576:	4643      	mov	r3, r8
 8001578:	1b1c      	subs	r4, r3, r4
 800157a:	45a0      	cmp	r8, r4
 800157c:	419b      	sbcs	r3, r3
 800157e:	4649      	mov	r1, r9
 8001580:	425b      	negs	r3, r3
 8001582:	1acb      	subs	r3, r1, r3
 8001584:	469a      	mov	sl, r3
 8001586:	4665      	mov	r5, ip
 8001588:	0016      	movs	r6, r2
 800158a:	e61b      	b.n	80011c4 <__aeabi_dadd+0x98>
 800158c:	000c      	movs	r4, r1
 800158e:	431c      	orrs	r4, r3
 8001590:	d100      	bne.n	8001594 <__aeabi_dadd+0x468>
 8001592:	e0c7      	b.n	8001724 <__aeabi_dadd+0x5f8>
 8001594:	1e7c      	subs	r4, r7, #1
 8001596:	2f01      	cmp	r7, #1
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x470>
 800159a:	e0f9      	b.n	8001790 <__aeabi_dadd+0x664>
 800159c:	4e91      	ldr	r6, [pc, #580]	; (80017e4 <__aeabi_dadd+0x6b8>)
 800159e:	42b7      	cmp	r7, r6
 80015a0:	d05c      	beq.n	800165c <__aeabi_dadd+0x530>
 80015a2:	0027      	movs	r7, r4
 80015a4:	e740      	b.n	8001428 <__aeabi_dadd+0x2fc>
 80015a6:	2220      	movs	r2, #32
 80015a8:	464c      	mov	r4, r9
 80015aa:	4640      	mov	r0, r8
 80015ac:	1bd2      	subs	r2, r2, r7
 80015ae:	4094      	lsls	r4, r2
 80015b0:	40f8      	lsrs	r0, r7
 80015b2:	4304      	orrs	r4, r0
 80015b4:	4640      	mov	r0, r8
 80015b6:	4090      	lsls	r0, r2
 80015b8:	1e42      	subs	r2, r0, #1
 80015ba:	4190      	sbcs	r0, r2
 80015bc:	464a      	mov	r2, r9
 80015be:	40fa      	lsrs	r2, r7
 80015c0:	4304      	orrs	r4, r0
 80015c2:	1889      	adds	r1, r1, r2
 80015c4:	e6ee      	b.n	80013a4 <__aeabi_dadd+0x278>
 80015c6:	4c87      	ldr	r4, [pc, #540]	; (80017e4 <__aeabi_dadd+0x6b8>)
 80015c8:	42a2      	cmp	r2, r4
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x4a2>
 80015cc:	e6f9      	b.n	80013c2 <__aeabi_dadd+0x296>
 80015ce:	1818      	adds	r0, r3, r0
 80015d0:	4298      	cmp	r0, r3
 80015d2:	419b      	sbcs	r3, r3
 80015d4:	4449      	add	r1, r9
 80015d6:	425b      	negs	r3, r3
 80015d8:	18cb      	adds	r3, r1, r3
 80015da:	07dc      	lsls	r4, r3, #31
 80015dc:	0840      	lsrs	r0, r0, #1
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	469a      	mov	sl, r3
 80015e2:	0016      	movs	r6, r2
 80015e4:	4304      	orrs	r4, r0
 80015e6:	e6c6      	b.n	8001376 <__aeabi_dadd+0x24a>
 80015e8:	4642      	mov	r2, r8
 80015ea:	1ad4      	subs	r4, r2, r3
 80015ec:	45a0      	cmp	r8, r4
 80015ee:	4180      	sbcs	r0, r0
 80015f0:	464b      	mov	r3, r9
 80015f2:	4240      	negs	r0, r0
 80015f4:	1a59      	subs	r1, r3, r1
 80015f6:	1a0b      	subs	r3, r1, r0
 80015f8:	469a      	mov	sl, r3
 80015fa:	4665      	mov	r5, ip
 80015fc:	e5ea      	b.n	80011d4 <__aeabi_dadd+0xa8>
 80015fe:	464b      	mov	r3, r9
 8001600:	464a      	mov	r2, r9
 8001602:	08c0      	lsrs	r0, r0, #3
 8001604:	075b      	lsls	r3, r3, #29
 8001606:	4665      	mov	r5, ip
 8001608:	4303      	orrs	r3, r0
 800160a:	08d1      	lsrs	r1, r2, #3
 800160c:	e6bd      	b.n	800138a <__aeabi_dadd+0x25e>
 800160e:	2a00      	cmp	r2, #0
 8001610:	d000      	beq.n	8001614 <__aeabi_dadd+0x4e8>
 8001612:	e08e      	b.n	8001732 <__aeabi_dadd+0x606>
 8001614:	464b      	mov	r3, r9
 8001616:	4303      	orrs	r3, r0
 8001618:	d117      	bne.n	800164a <__aeabi_dadd+0x51e>
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	2500      	movs	r5, #0
 800161e:	0309      	lsls	r1, r1, #12
 8001620:	e6da      	b.n	80013d8 <__aeabi_dadd+0x2ac>
 8001622:	074a      	lsls	r2, r1, #29
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	4313      	orrs	r3, r2
 8001628:	08c9      	lsrs	r1, r1, #3
 800162a:	e6d1      	b.n	80013d0 <__aeabi_dadd+0x2a4>
 800162c:	1a1c      	subs	r4, r3, r0
 800162e:	464a      	mov	r2, r9
 8001630:	42a3      	cmp	r3, r4
 8001632:	419b      	sbcs	r3, r3
 8001634:	1a89      	subs	r1, r1, r2
 8001636:	425b      	negs	r3, r3
 8001638:	1acb      	subs	r3, r1, r3
 800163a:	469a      	mov	sl, r3
 800163c:	2601      	movs	r6, #1
 800163e:	e5c1      	b.n	80011c4 <__aeabi_dadd+0x98>
 8001640:	074a      	lsls	r2, r1, #29
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	08c9      	lsrs	r1, r1, #3
 8001648:	e69f      	b.n	800138a <__aeabi_dadd+0x25e>
 800164a:	4643      	mov	r3, r8
 800164c:	08d8      	lsrs	r0, r3, #3
 800164e:	464b      	mov	r3, r9
 8001650:	464a      	mov	r2, r9
 8001652:	075b      	lsls	r3, r3, #29
 8001654:	4665      	mov	r5, ip
 8001656:	4303      	orrs	r3, r0
 8001658:	08d1      	lsrs	r1, r2, #3
 800165a:	e6b9      	b.n	80013d0 <__aeabi_dadd+0x2a4>
 800165c:	4643      	mov	r3, r8
 800165e:	08d8      	lsrs	r0, r3, #3
 8001660:	464b      	mov	r3, r9
 8001662:	464a      	mov	r2, r9
 8001664:	075b      	lsls	r3, r3, #29
 8001666:	4303      	orrs	r3, r0
 8001668:	08d1      	lsrs	r1, r2, #3
 800166a:	e6b1      	b.n	80013d0 <__aeabi_dadd+0x2a4>
 800166c:	4319      	orrs	r1, r3
 800166e:	000c      	movs	r4, r1
 8001670:	1e63      	subs	r3, r4, #1
 8001672:	419c      	sbcs	r4, r3
 8001674:	e6eb      	b.n	800144e <__aeabi_dadd+0x322>
 8001676:	003c      	movs	r4, r7
 8001678:	000d      	movs	r5, r1
 800167a:	3c20      	subs	r4, #32
 800167c:	40e5      	lsrs	r5, r4
 800167e:	2f20      	cmp	r7, #32
 8001680:	d003      	beq.n	800168a <__aeabi_dadd+0x55e>
 8001682:	2440      	movs	r4, #64	; 0x40
 8001684:	1be4      	subs	r4, r4, r7
 8001686:	40a1      	lsls	r1, r4
 8001688:	430b      	orrs	r3, r1
 800168a:	001c      	movs	r4, r3
 800168c:	1e63      	subs	r3, r4, #1
 800168e:	419c      	sbcs	r4, r3
 8001690:	432c      	orrs	r4, r5
 8001692:	e770      	b.n	8001576 <__aeabi_dadd+0x44a>
 8001694:	2a00      	cmp	r2, #0
 8001696:	d0e1      	beq.n	800165c <__aeabi_dadd+0x530>
 8001698:	464a      	mov	r2, r9
 800169a:	4302      	orrs	r2, r0
 800169c:	d0c1      	beq.n	8001622 <__aeabi_dadd+0x4f6>
 800169e:	074a      	lsls	r2, r1, #29
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	2280      	movs	r2, #128	; 0x80
 80016a6:	08c9      	lsrs	r1, r1, #3
 80016a8:	0312      	lsls	r2, r2, #12
 80016aa:	4211      	tst	r1, r2
 80016ac:	d008      	beq.n	80016c0 <__aeabi_dadd+0x594>
 80016ae:	4648      	mov	r0, r9
 80016b0:	08c4      	lsrs	r4, r0, #3
 80016b2:	4214      	tst	r4, r2
 80016b4:	d104      	bne.n	80016c0 <__aeabi_dadd+0x594>
 80016b6:	4643      	mov	r3, r8
 80016b8:	0021      	movs	r1, r4
 80016ba:	08db      	lsrs	r3, r3, #3
 80016bc:	0742      	lsls	r2, r0, #29
 80016be:	4313      	orrs	r3, r2
 80016c0:	0f5a      	lsrs	r2, r3, #29
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	0752      	lsls	r2, r2, #29
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	e681      	b.n	80013d0 <__aeabi_dadd+0x2a4>
 80016cc:	464b      	mov	r3, r9
 80016ce:	4303      	orrs	r3, r0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x5a8>
 80016d2:	e714      	b.n	80014fe <__aeabi_dadd+0x3d2>
 80016d4:	464b      	mov	r3, r9
 80016d6:	464a      	mov	r2, r9
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	075b      	lsls	r3, r3, #29
 80016dc:	4665      	mov	r5, ip
 80016de:	4303      	orrs	r3, r0
 80016e0:	08d1      	lsrs	r1, r2, #3
 80016e2:	e655      	b.n	8001390 <__aeabi_dadd+0x264>
 80016e4:	1ac4      	subs	r4, r0, r3
 80016e6:	45a0      	cmp	r8, r4
 80016e8:	4180      	sbcs	r0, r0
 80016ea:	464b      	mov	r3, r9
 80016ec:	4240      	negs	r0, r0
 80016ee:	1a59      	subs	r1, r3, r1
 80016f0:	1a0b      	subs	r3, r1, r0
 80016f2:	469a      	mov	sl, r3
 80016f4:	4665      	mov	r5, ip
 80016f6:	2601      	movs	r6, #1
 80016f8:	e564      	b.n	80011c4 <__aeabi_dadd+0x98>
 80016fa:	1a1c      	subs	r4, r3, r0
 80016fc:	464a      	mov	r2, r9
 80016fe:	42a3      	cmp	r3, r4
 8001700:	4180      	sbcs	r0, r0
 8001702:	1a8a      	subs	r2, r1, r2
 8001704:	4240      	negs	r0, r0
 8001706:	1a12      	subs	r2, r2, r0
 8001708:	4692      	mov	sl, r2
 800170a:	0212      	lsls	r2, r2, #8
 800170c:	d549      	bpl.n	80017a2 <__aeabi_dadd+0x676>
 800170e:	4642      	mov	r2, r8
 8001710:	1ad4      	subs	r4, r2, r3
 8001712:	45a0      	cmp	r8, r4
 8001714:	4180      	sbcs	r0, r0
 8001716:	464b      	mov	r3, r9
 8001718:	4240      	negs	r0, r0
 800171a:	1a59      	subs	r1, r3, r1
 800171c:	1a0b      	subs	r3, r1, r0
 800171e:	469a      	mov	sl, r3
 8001720:	4665      	mov	r5, ip
 8001722:	e57f      	b.n	8001224 <__aeabi_dadd+0xf8>
 8001724:	464b      	mov	r3, r9
 8001726:	464a      	mov	r2, r9
 8001728:	08c0      	lsrs	r0, r0, #3
 800172a:	075b      	lsls	r3, r3, #29
 800172c:	4303      	orrs	r3, r0
 800172e:	08d1      	lsrs	r1, r2, #3
 8001730:	e62b      	b.n	800138a <__aeabi_dadd+0x25e>
 8001732:	464a      	mov	r2, r9
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	4302      	orrs	r2, r0
 8001738:	d138      	bne.n	80017ac <__aeabi_dadd+0x680>
 800173a:	074a      	lsls	r2, r1, #29
 800173c:	4313      	orrs	r3, r2
 800173e:	08c9      	lsrs	r1, r1, #3
 8001740:	e646      	b.n	80013d0 <__aeabi_dadd+0x2a4>
 8001742:	464b      	mov	r3, r9
 8001744:	464a      	mov	r2, r9
 8001746:	08c0      	lsrs	r0, r0, #3
 8001748:	075b      	lsls	r3, r3, #29
 800174a:	4303      	orrs	r3, r0
 800174c:	08d1      	lsrs	r1, r2, #3
 800174e:	e61f      	b.n	8001390 <__aeabi_dadd+0x264>
 8001750:	181c      	adds	r4, r3, r0
 8001752:	429c      	cmp	r4, r3
 8001754:	419b      	sbcs	r3, r3
 8001756:	4449      	add	r1, r9
 8001758:	468a      	mov	sl, r1
 800175a:	425b      	negs	r3, r3
 800175c:	449a      	add	sl, r3
 800175e:	4653      	mov	r3, sl
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	d400      	bmi.n	8001766 <__aeabi_dadd+0x63a>
 8001764:	e607      	b.n	8001376 <__aeabi_dadd+0x24a>
 8001766:	4652      	mov	r2, sl
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <__aeabi_dadd+0x6bc>)
 800176a:	2601      	movs	r6, #1
 800176c:	401a      	ands	r2, r3
 800176e:	4692      	mov	sl, r2
 8001770:	e601      	b.n	8001376 <__aeabi_dadd+0x24a>
 8001772:	003c      	movs	r4, r7
 8001774:	000e      	movs	r6, r1
 8001776:	3c20      	subs	r4, #32
 8001778:	40e6      	lsrs	r6, r4
 800177a:	2f20      	cmp	r7, #32
 800177c:	d003      	beq.n	8001786 <__aeabi_dadd+0x65a>
 800177e:	2440      	movs	r4, #64	; 0x40
 8001780:	1be4      	subs	r4, r4, r7
 8001782:	40a1      	lsls	r1, r4
 8001784:	430b      	orrs	r3, r1
 8001786:	001c      	movs	r4, r3
 8001788:	1e63      	subs	r3, r4, #1
 800178a:	419c      	sbcs	r4, r3
 800178c:	4334      	orrs	r4, r6
 800178e:	e65e      	b.n	800144e <__aeabi_dadd+0x322>
 8001790:	4443      	add	r3, r8
 8001792:	4283      	cmp	r3, r0
 8001794:	4180      	sbcs	r0, r0
 8001796:	4449      	add	r1, r9
 8001798:	468a      	mov	sl, r1
 800179a:	4240      	negs	r0, r0
 800179c:	001c      	movs	r4, r3
 800179e:	4482      	add	sl, r0
 80017a0:	e6bc      	b.n	800151c <__aeabi_dadd+0x3f0>
 80017a2:	4653      	mov	r3, sl
 80017a4:	4323      	orrs	r3, r4
 80017a6:	d100      	bne.n	80017aa <__aeabi_dadd+0x67e>
 80017a8:	e6a9      	b.n	80014fe <__aeabi_dadd+0x3d2>
 80017aa:	e5e4      	b.n	8001376 <__aeabi_dadd+0x24a>
 80017ac:	074a      	lsls	r2, r1, #29
 80017ae:	4313      	orrs	r3, r2
 80017b0:	2280      	movs	r2, #128	; 0x80
 80017b2:	08c9      	lsrs	r1, r1, #3
 80017b4:	0312      	lsls	r2, r2, #12
 80017b6:	4211      	tst	r1, r2
 80017b8:	d009      	beq.n	80017ce <__aeabi_dadd+0x6a2>
 80017ba:	4648      	mov	r0, r9
 80017bc:	08c4      	lsrs	r4, r0, #3
 80017be:	4214      	tst	r4, r2
 80017c0:	d105      	bne.n	80017ce <__aeabi_dadd+0x6a2>
 80017c2:	4643      	mov	r3, r8
 80017c4:	4665      	mov	r5, ip
 80017c6:	0021      	movs	r1, r4
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	0742      	lsls	r2, r0, #29
 80017cc:	4313      	orrs	r3, r2
 80017ce:	0f5a      	lsrs	r2, r3, #29
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	0752      	lsls	r2, r2, #29
 80017d6:	4313      	orrs	r3, r2
 80017d8:	e5fa      	b.n	80013d0 <__aeabi_dadd+0x2a4>
 80017da:	2300      	movs	r3, #0
 80017dc:	4a01      	ldr	r2, [pc, #4]	; (80017e4 <__aeabi_dadd+0x6b8>)
 80017de:	001c      	movs	r4, r3
 80017e0:	e540      	b.n	8001264 <__aeabi_dadd+0x138>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	000007ff 	.word	0x000007ff
 80017e8:	ff7fffff 	.word	0xff7fffff

080017ec <__aeabi_ddiv>:
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	4657      	mov	r7, sl
 80017f0:	464e      	mov	r6, r9
 80017f2:	4645      	mov	r5, r8
 80017f4:	46de      	mov	lr, fp
 80017f6:	b5e0      	push	{r5, r6, r7, lr}
 80017f8:	030c      	lsls	r4, r1, #12
 80017fa:	001f      	movs	r7, r3
 80017fc:	004b      	lsls	r3, r1, #1
 80017fe:	4681      	mov	r9, r0
 8001800:	4692      	mov	sl, r2
 8001802:	0005      	movs	r5, r0
 8001804:	b085      	sub	sp, #20
 8001806:	0b24      	lsrs	r4, r4, #12
 8001808:	0d5b      	lsrs	r3, r3, #21
 800180a:	0fce      	lsrs	r6, r1, #31
 800180c:	2b00      	cmp	r3, #0
 800180e:	d100      	bne.n	8001812 <__aeabi_ddiv+0x26>
 8001810:	e152      	b.n	8001ab8 <__aeabi_ddiv+0x2cc>
 8001812:	4ad2      	ldr	r2, [pc, #840]	; (8001b5c <__aeabi_ddiv+0x370>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d100      	bne.n	800181a <__aeabi_ddiv+0x2e>
 8001818:	e16e      	b.n	8001af8 <__aeabi_ddiv+0x30c>
 800181a:	0f42      	lsrs	r2, r0, #29
 800181c:	00e4      	lsls	r4, r4, #3
 800181e:	4314      	orrs	r4, r2
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0412      	lsls	r2, r2, #16
 8001824:	4322      	orrs	r2, r4
 8001826:	4690      	mov	r8, r2
 8001828:	4acd      	ldr	r2, [pc, #820]	; (8001b60 <__aeabi_ddiv+0x374>)
 800182a:	00c5      	lsls	r5, r0, #3
 800182c:	4693      	mov	fp, r2
 800182e:	449b      	add	fp, r3
 8001830:	2300      	movs	r3, #0
 8001832:	4699      	mov	r9, r3
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	033c      	lsls	r4, r7, #12
 8001838:	007b      	lsls	r3, r7, #1
 800183a:	4650      	mov	r0, sl
 800183c:	0b24      	lsrs	r4, r4, #12
 800183e:	0d5b      	lsrs	r3, r3, #21
 8001840:	0fff      	lsrs	r7, r7, #31
 8001842:	2b00      	cmp	r3, #0
 8001844:	d100      	bne.n	8001848 <__aeabi_ddiv+0x5c>
 8001846:	e11a      	b.n	8001a7e <__aeabi_ddiv+0x292>
 8001848:	4ac4      	ldr	r2, [pc, #784]	; (8001b5c <__aeabi_ddiv+0x370>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d100      	bne.n	8001850 <__aeabi_ddiv+0x64>
 800184e:	e15e      	b.n	8001b0e <__aeabi_ddiv+0x322>
 8001850:	0f42      	lsrs	r2, r0, #29
 8001852:	00e4      	lsls	r4, r4, #3
 8001854:	4322      	orrs	r2, r4
 8001856:	2480      	movs	r4, #128	; 0x80
 8001858:	0424      	lsls	r4, r4, #16
 800185a:	4314      	orrs	r4, r2
 800185c:	4ac0      	ldr	r2, [pc, #768]	; (8001b60 <__aeabi_ddiv+0x374>)
 800185e:	00c1      	lsls	r1, r0, #3
 8001860:	4694      	mov	ip, r2
 8001862:	465a      	mov	r2, fp
 8001864:	4463      	add	r3, ip
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	469b      	mov	fp, r3
 800186a:	2000      	movs	r0, #0
 800186c:	0033      	movs	r3, r6
 800186e:	407b      	eors	r3, r7
 8001870:	469a      	mov	sl, r3
 8001872:	464b      	mov	r3, r9
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d827      	bhi.n	80018c8 <__aeabi_ddiv+0xdc>
 8001878:	4aba      	ldr	r2, [pc, #744]	; (8001b64 <__aeabi_ddiv+0x378>)
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	58d3      	ldr	r3, [r2, r3]
 800187e:	469f      	mov	pc, r3
 8001880:	46b2      	mov	sl, r6
 8001882:	9b00      	ldr	r3, [sp, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d016      	beq.n	80018b6 <__aeabi_ddiv+0xca>
 8001888:	2b03      	cmp	r3, #3
 800188a:	d100      	bne.n	800188e <__aeabi_ddiv+0xa2>
 800188c:	e287      	b.n	8001d9e <__aeabi_ddiv+0x5b2>
 800188e:	2b01      	cmp	r3, #1
 8001890:	d000      	beq.n	8001894 <__aeabi_ddiv+0xa8>
 8001892:	e0d5      	b.n	8001a40 <__aeabi_ddiv+0x254>
 8001894:	2300      	movs	r3, #0
 8001896:	2200      	movs	r2, #0
 8001898:	2500      	movs	r5, #0
 800189a:	051b      	lsls	r3, r3, #20
 800189c:	4313      	orrs	r3, r2
 800189e:	4652      	mov	r2, sl
 80018a0:	07d2      	lsls	r2, r2, #31
 80018a2:	4313      	orrs	r3, r2
 80018a4:	0028      	movs	r0, r5
 80018a6:	0019      	movs	r1, r3
 80018a8:	b005      	add	sp, #20
 80018aa:	bcf0      	pop	{r4, r5, r6, r7}
 80018ac:	46bb      	mov	fp, r7
 80018ae:	46b2      	mov	sl, r6
 80018b0:	46a9      	mov	r9, r5
 80018b2:	46a0      	mov	r8, r4
 80018b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b6:	2200      	movs	r2, #0
 80018b8:	2500      	movs	r5, #0
 80018ba:	4ba8      	ldr	r3, [pc, #672]	; (8001b5c <__aeabi_ddiv+0x370>)
 80018bc:	e7ed      	b.n	800189a <__aeabi_ddiv+0xae>
 80018be:	46ba      	mov	sl, r7
 80018c0:	46a0      	mov	r8, r4
 80018c2:	000d      	movs	r5, r1
 80018c4:	9000      	str	r0, [sp, #0]
 80018c6:	e7dc      	b.n	8001882 <__aeabi_ddiv+0x96>
 80018c8:	4544      	cmp	r4, r8
 80018ca:	d200      	bcs.n	80018ce <__aeabi_ddiv+0xe2>
 80018cc:	e1c4      	b.n	8001c58 <__aeabi_ddiv+0x46c>
 80018ce:	d100      	bne.n	80018d2 <__aeabi_ddiv+0xe6>
 80018d0:	e1bf      	b.n	8001c52 <__aeabi_ddiv+0x466>
 80018d2:	2301      	movs	r3, #1
 80018d4:	425b      	negs	r3, r3
 80018d6:	469c      	mov	ip, r3
 80018d8:	002e      	movs	r6, r5
 80018da:	4640      	mov	r0, r8
 80018dc:	2500      	movs	r5, #0
 80018de:	44e3      	add	fp, ip
 80018e0:	0223      	lsls	r3, r4, #8
 80018e2:	0e0c      	lsrs	r4, r1, #24
 80018e4:	431c      	orrs	r4, r3
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	4699      	mov	r9, r3
 80018ea:	0423      	lsls	r3, r4, #16
 80018ec:	020a      	lsls	r2, r1, #8
 80018ee:	0c1f      	lsrs	r7, r3, #16
 80018f0:	4649      	mov	r1, r9
 80018f2:	9200      	str	r2, [sp, #0]
 80018f4:	9701      	str	r7, [sp, #4]
 80018f6:	f7fe fca9 	bl	800024c <__aeabi_uidivmod>
 80018fa:	0002      	movs	r2, r0
 80018fc:	437a      	muls	r2, r7
 80018fe:	040b      	lsls	r3, r1, #16
 8001900:	0c31      	lsrs	r1, r6, #16
 8001902:	4680      	mov	r8, r0
 8001904:	4319      	orrs	r1, r3
 8001906:	428a      	cmp	r2, r1
 8001908:	d907      	bls.n	800191a <__aeabi_ddiv+0x12e>
 800190a:	2301      	movs	r3, #1
 800190c:	425b      	negs	r3, r3
 800190e:	469c      	mov	ip, r3
 8001910:	1909      	adds	r1, r1, r4
 8001912:	44e0      	add	r8, ip
 8001914:	428c      	cmp	r4, r1
 8001916:	d800      	bhi.n	800191a <__aeabi_ddiv+0x12e>
 8001918:	e201      	b.n	8001d1e <__aeabi_ddiv+0x532>
 800191a:	1a88      	subs	r0, r1, r2
 800191c:	4649      	mov	r1, r9
 800191e:	f7fe fc95 	bl	800024c <__aeabi_uidivmod>
 8001922:	9a01      	ldr	r2, [sp, #4]
 8001924:	0436      	lsls	r6, r6, #16
 8001926:	4342      	muls	r2, r0
 8001928:	0409      	lsls	r1, r1, #16
 800192a:	0c36      	lsrs	r6, r6, #16
 800192c:	0003      	movs	r3, r0
 800192e:	430e      	orrs	r6, r1
 8001930:	42b2      	cmp	r2, r6
 8001932:	d904      	bls.n	800193e <__aeabi_ddiv+0x152>
 8001934:	1936      	adds	r6, r6, r4
 8001936:	3b01      	subs	r3, #1
 8001938:	42b4      	cmp	r4, r6
 800193a:	d800      	bhi.n	800193e <__aeabi_ddiv+0x152>
 800193c:	e1e9      	b.n	8001d12 <__aeabi_ddiv+0x526>
 800193e:	1ab0      	subs	r0, r6, r2
 8001940:	4642      	mov	r2, r8
 8001942:	9e00      	ldr	r6, [sp, #0]
 8001944:	0412      	lsls	r2, r2, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	0c33      	lsrs	r3, r6, #16
 800194a:	001f      	movs	r7, r3
 800194c:	0c11      	lsrs	r1, r2, #16
 800194e:	4690      	mov	r8, r2
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	0413      	lsls	r3, r2, #16
 8001954:	0432      	lsls	r2, r6, #16
 8001956:	0c16      	lsrs	r6, r2, #16
 8001958:	0032      	movs	r2, r6
 800195a:	0c1b      	lsrs	r3, r3, #16
 800195c:	435a      	muls	r2, r3
 800195e:	9603      	str	r6, [sp, #12]
 8001960:	437b      	muls	r3, r7
 8001962:	434e      	muls	r6, r1
 8001964:	4379      	muls	r1, r7
 8001966:	0c17      	lsrs	r7, r2, #16
 8001968:	46bc      	mov	ip, r7
 800196a:	199b      	adds	r3, r3, r6
 800196c:	4463      	add	r3, ip
 800196e:	429e      	cmp	r6, r3
 8001970:	d903      	bls.n	800197a <__aeabi_ddiv+0x18e>
 8001972:	2680      	movs	r6, #128	; 0x80
 8001974:	0276      	lsls	r6, r6, #9
 8001976:	46b4      	mov	ip, r6
 8001978:	4461      	add	r1, ip
 800197a:	0c1e      	lsrs	r6, r3, #16
 800197c:	1871      	adds	r1, r6, r1
 800197e:	0416      	lsls	r6, r2, #16
 8001980:	041b      	lsls	r3, r3, #16
 8001982:	0c36      	lsrs	r6, r6, #16
 8001984:	199e      	adds	r6, r3, r6
 8001986:	4288      	cmp	r0, r1
 8001988:	d302      	bcc.n	8001990 <__aeabi_ddiv+0x1a4>
 800198a:	d112      	bne.n	80019b2 <__aeabi_ddiv+0x1c6>
 800198c:	42b5      	cmp	r5, r6
 800198e:	d210      	bcs.n	80019b2 <__aeabi_ddiv+0x1c6>
 8001990:	4643      	mov	r3, r8
 8001992:	1e5a      	subs	r2, r3, #1
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	469c      	mov	ip, r3
 8001998:	4465      	add	r5, ip
 800199a:	001f      	movs	r7, r3
 800199c:	429d      	cmp	r5, r3
 800199e:	419b      	sbcs	r3, r3
 80019a0:	425b      	negs	r3, r3
 80019a2:	191b      	adds	r3, r3, r4
 80019a4:	18c0      	adds	r0, r0, r3
 80019a6:	4284      	cmp	r4, r0
 80019a8:	d200      	bcs.n	80019ac <__aeabi_ddiv+0x1c0>
 80019aa:	e19e      	b.n	8001cea <__aeabi_ddiv+0x4fe>
 80019ac:	d100      	bne.n	80019b0 <__aeabi_ddiv+0x1c4>
 80019ae:	e199      	b.n	8001ce4 <__aeabi_ddiv+0x4f8>
 80019b0:	4690      	mov	r8, r2
 80019b2:	1bae      	subs	r6, r5, r6
 80019b4:	42b5      	cmp	r5, r6
 80019b6:	41ad      	sbcs	r5, r5
 80019b8:	1a40      	subs	r0, r0, r1
 80019ba:	426d      	negs	r5, r5
 80019bc:	1b40      	subs	r0, r0, r5
 80019be:	4284      	cmp	r4, r0
 80019c0:	d100      	bne.n	80019c4 <__aeabi_ddiv+0x1d8>
 80019c2:	e1d2      	b.n	8001d6a <__aeabi_ddiv+0x57e>
 80019c4:	4649      	mov	r1, r9
 80019c6:	f7fe fc41 	bl	800024c <__aeabi_uidivmod>
 80019ca:	9a01      	ldr	r2, [sp, #4]
 80019cc:	040b      	lsls	r3, r1, #16
 80019ce:	4342      	muls	r2, r0
 80019d0:	0c31      	lsrs	r1, r6, #16
 80019d2:	0005      	movs	r5, r0
 80019d4:	4319      	orrs	r1, r3
 80019d6:	428a      	cmp	r2, r1
 80019d8:	d900      	bls.n	80019dc <__aeabi_ddiv+0x1f0>
 80019da:	e16c      	b.n	8001cb6 <__aeabi_ddiv+0x4ca>
 80019dc:	1a88      	subs	r0, r1, r2
 80019de:	4649      	mov	r1, r9
 80019e0:	f7fe fc34 	bl	800024c <__aeabi_uidivmod>
 80019e4:	9a01      	ldr	r2, [sp, #4]
 80019e6:	0436      	lsls	r6, r6, #16
 80019e8:	4342      	muls	r2, r0
 80019ea:	0409      	lsls	r1, r1, #16
 80019ec:	0c36      	lsrs	r6, r6, #16
 80019ee:	0003      	movs	r3, r0
 80019f0:	430e      	orrs	r6, r1
 80019f2:	42b2      	cmp	r2, r6
 80019f4:	d900      	bls.n	80019f8 <__aeabi_ddiv+0x20c>
 80019f6:	e153      	b.n	8001ca0 <__aeabi_ddiv+0x4b4>
 80019f8:	9803      	ldr	r0, [sp, #12]
 80019fa:	1ab6      	subs	r6, r6, r2
 80019fc:	0002      	movs	r2, r0
 80019fe:	042d      	lsls	r5, r5, #16
 8001a00:	431d      	orrs	r5, r3
 8001a02:	9f02      	ldr	r7, [sp, #8]
 8001a04:	042b      	lsls	r3, r5, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	435a      	muls	r2, r3
 8001a0a:	437b      	muls	r3, r7
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	0c29      	lsrs	r1, r5, #16
 8001a10:	4348      	muls	r0, r1
 8001a12:	0c13      	lsrs	r3, r2, #16
 8001a14:	4484      	add	ip, r0
 8001a16:	4463      	add	r3, ip
 8001a18:	4379      	muls	r1, r7
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	d903      	bls.n	8001a26 <__aeabi_ddiv+0x23a>
 8001a1e:	2080      	movs	r0, #128	; 0x80
 8001a20:	0240      	lsls	r0, r0, #9
 8001a22:	4684      	mov	ip, r0
 8001a24:	4461      	add	r1, ip
 8001a26:	0c18      	lsrs	r0, r3, #16
 8001a28:	0412      	lsls	r2, r2, #16
 8001a2a:	041b      	lsls	r3, r3, #16
 8001a2c:	0c12      	lsrs	r2, r2, #16
 8001a2e:	1840      	adds	r0, r0, r1
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	4286      	cmp	r6, r0
 8001a34:	d200      	bcs.n	8001a38 <__aeabi_ddiv+0x24c>
 8001a36:	e100      	b.n	8001c3a <__aeabi_ddiv+0x44e>
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x250>
 8001a3a:	e0fb      	b.n	8001c34 <__aeabi_ddiv+0x448>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	431d      	orrs	r5, r3
 8001a40:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <__aeabi_ddiv+0x37c>)
 8001a42:	445b      	add	r3, fp
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dc00      	bgt.n	8001a4a <__aeabi_ddiv+0x25e>
 8001a48:	e0aa      	b.n	8001ba0 <__aeabi_ddiv+0x3b4>
 8001a4a:	076a      	lsls	r2, r5, #29
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_ddiv+0x264>
 8001a4e:	e13d      	b.n	8001ccc <__aeabi_ddiv+0x4e0>
 8001a50:	08e9      	lsrs	r1, r5, #3
 8001a52:	4642      	mov	r2, r8
 8001a54:	01d2      	lsls	r2, r2, #7
 8001a56:	d506      	bpl.n	8001a66 <__aeabi_ddiv+0x27a>
 8001a58:	4642      	mov	r2, r8
 8001a5a:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <__aeabi_ddiv+0x380>)
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	4690      	mov	r8, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	445b      	add	r3, fp
 8001a66:	4a42      	ldr	r2, [pc, #264]	; (8001b70 <__aeabi_ddiv+0x384>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	dd00      	ble.n	8001a6e <__aeabi_ddiv+0x282>
 8001a6c:	e723      	b.n	80018b6 <__aeabi_ddiv+0xca>
 8001a6e:	4642      	mov	r2, r8
 8001a70:	055b      	lsls	r3, r3, #21
 8001a72:	0755      	lsls	r5, r2, #29
 8001a74:	0252      	lsls	r2, r2, #9
 8001a76:	430d      	orrs	r5, r1
 8001a78:	0b12      	lsrs	r2, r2, #12
 8001a7a:	0d5b      	lsrs	r3, r3, #21
 8001a7c:	e70d      	b.n	800189a <__aeabi_ddiv+0xae>
 8001a7e:	4651      	mov	r1, sl
 8001a80:	4321      	orrs	r1, r4
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0x29a>
 8001a84:	e07c      	b.n	8001b80 <__aeabi_ddiv+0x394>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_ddiv+0x2a0>
 8001a8a:	e0fb      	b.n	8001c84 <__aeabi_ddiv+0x498>
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	f001 f9dd 	bl	8002e4c <__clzsi2>
 8001a92:	0002      	movs	r2, r0
 8001a94:	3a0b      	subs	r2, #11
 8001a96:	231d      	movs	r3, #29
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	0001      	movs	r1, r0
 8001a9e:	40da      	lsrs	r2, r3
 8001aa0:	4653      	mov	r3, sl
 8001aa2:	3908      	subs	r1, #8
 8001aa4:	408b      	lsls	r3, r1
 8001aa6:	408c      	lsls	r4, r1
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	4314      	orrs	r4, r2
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <__aeabi_ddiv+0x388>)
 8001aae:	4458      	add	r0, fp
 8001ab0:	469b      	mov	fp, r3
 8001ab2:	4483      	add	fp, r0
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e6d9      	b.n	800186c <__aeabi_ddiv+0x80>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	4323      	orrs	r3, r4
 8001abc:	4698      	mov	r8, r3
 8001abe:	d044      	beq.n	8001b4a <__aeabi_ddiv+0x35e>
 8001ac0:	2c00      	cmp	r4, #0
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_ddiv+0x2da>
 8001ac4:	e0cf      	b.n	8001c66 <__aeabi_ddiv+0x47a>
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	f001 f9c0 	bl	8002e4c <__clzsi2>
 8001acc:	0001      	movs	r1, r0
 8001ace:	0002      	movs	r2, r0
 8001ad0:	390b      	subs	r1, #11
 8001ad2:	231d      	movs	r3, #29
 8001ad4:	1a5b      	subs	r3, r3, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	0010      	movs	r0, r2
 8001ada:	40d9      	lsrs	r1, r3
 8001adc:	3808      	subs	r0, #8
 8001ade:	4084      	lsls	r4, r0
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	464d      	mov	r5, r9
 8001ae4:	4323      	orrs	r3, r4
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	4085      	lsls	r5, r0
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <__aeabi_ddiv+0x38c>)
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	469b      	mov	fp, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	4699      	mov	r9, r3
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	e69e      	b.n	8001836 <__aeabi_ddiv+0x4a>
 8001af8:	0002      	movs	r2, r0
 8001afa:	4322      	orrs	r2, r4
 8001afc:	4690      	mov	r8, r2
 8001afe:	d11d      	bne.n	8001b3c <__aeabi_ddiv+0x350>
 8001b00:	2208      	movs	r2, #8
 8001b02:	469b      	mov	fp, r3
 8001b04:	2302      	movs	r3, #2
 8001b06:	2500      	movs	r5, #0
 8001b08:	4691      	mov	r9, r2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	e693      	b.n	8001836 <__aeabi_ddiv+0x4a>
 8001b0e:	4651      	mov	r1, sl
 8001b10:	4321      	orrs	r1, r4
 8001b12:	d109      	bne.n	8001b28 <__aeabi_ddiv+0x33c>
 8001b14:	2302      	movs	r3, #2
 8001b16:	464a      	mov	r2, r9
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <__aeabi_ddiv+0x390>)
 8001b1c:	4691      	mov	r9, r2
 8001b1e:	469c      	mov	ip, r3
 8001b20:	2400      	movs	r4, #0
 8001b22:	2002      	movs	r0, #2
 8001b24:	44e3      	add	fp, ip
 8001b26:	e6a1      	b.n	800186c <__aeabi_ddiv+0x80>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	464a      	mov	r2, r9
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <__aeabi_ddiv+0x390>)
 8001b30:	4691      	mov	r9, r2
 8001b32:	469c      	mov	ip, r3
 8001b34:	4651      	mov	r1, sl
 8001b36:	2003      	movs	r0, #3
 8001b38:	44e3      	add	fp, ip
 8001b3a:	e697      	b.n	800186c <__aeabi_ddiv+0x80>
 8001b3c:	220c      	movs	r2, #12
 8001b3e:	469b      	mov	fp, r3
 8001b40:	2303      	movs	r3, #3
 8001b42:	46a0      	mov	r8, r4
 8001b44:	4691      	mov	r9, r2
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	e675      	b.n	8001836 <__aeabi_ddiv+0x4a>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	2300      	movs	r3, #0
 8001b50:	469b      	mov	fp, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	2500      	movs	r5, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	e66d      	b.n	8001836 <__aeabi_ddiv+0x4a>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	000007ff 	.word	0x000007ff
 8001b60:	fffffc01 	.word	0xfffffc01
 8001b64:	0800c688 	.word	0x0800c688
 8001b68:	000003ff 	.word	0x000003ff
 8001b6c:	feffffff 	.word	0xfeffffff
 8001b70:	000007fe 	.word	0x000007fe
 8001b74:	000003f3 	.word	0x000003f3
 8001b78:	fffffc0d 	.word	0xfffffc0d
 8001b7c:	fffff801 	.word	0xfffff801
 8001b80:	464a      	mov	r2, r9
 8001b82:	2301      	movs	r3, #1
 8001b84:	431a      	orrs	r2, r3
 8001b86:	4691      	mov	r9, r2
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e66e      	b.n	800186c <__aeabi_ddiv+0x80>
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2280      	movs	r2, #128	; 0x80
 8001b92:	469a      	mov	sl, r3
 8001b94:	2500      	movs	r5, #0
 8001b96:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <__aeabi_ddiv+0x5cc>)
 8001b98:	0312      	lsls	r2, r2, #12
 8001b9a:	e67e      	b.n	800189a <__aeabi_ddiv+0xae>
 8001b9c:	2501      	movs	r5, #1
 8001b9e:	426d      	negs	r5, r5
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	1ad2      	subs	r2, r2, r3
 8001ba4:	2a38      	cmp	r2, #56	; 0x38
 8001ba6:	dd00      	ble.n	8001baa <__aeabi_ddiv+0x3be>
 8001ba8:	e674      	b.n	8001894 <__aeabi_ddiv+0xa8>
 8001baa:	2a1f      	cmp	r2, #31
 8001bac:	dc00      	bgt.n	8001bb0 <__aeabi_ddiv+0x3c4>
 8001bae:	e0bd      	b.n	8001d2c <__aeabi_ddiv+0x540>
 8001bb0:	211f      	movs	r1, #31
 8001bb2:	4249      	negs	r1, r1
 8001bb4:	1acb      	subs	r3, r1, r3
 8001bb6:	4641      	mov	r1, r8
 8001bb8:	40d9      	lsrs	r1, r3
 8001bba:	000b      	movs	r3, r1
 8001bbc:	2a20      	cmp	r2, #32
 8001bbe:	d004      	beq.n	8001bca <__aeabi_ddiv+0x3de>
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	4a7e      	ldr	r2, [pc, #504]	; (8001dbc <__aeabi_ddiv+0x5d0>)
 8001bc4:	445a      	add	r2, fp
 8001bc6:	4091      	lsls	r1, r2
 8001bc8:	430d      	orrs	r5, r1
 8001bca:	0029      	movs	r1, r5
 8001bcc:	1e4a      	subs	r2, r1, #1
 8001bce:	4191      	sbcs	r1, r2
 8001bd0:	4319      	orrs	r1, r3
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	001d      	movs	r5, r3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	400d      	ands	r5, r1
 8001bda:	420b      	tst	r3, r1
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_ddiv+0x3f4>
 8001bde:	e0d0      	b.n	8001d82 <__aeabi_ddiv+0x596>
 8001be0:	220f      	movs	r2, #15
 8001be2:	2300      	movs	r3, #0
 8001be4:	400a      	ands	r2, r1
 8001be6:	2a04      	cmp	r2, #4
 8001be8:	d100      	bne.n	8001bec <__aeabi_ddiv+0x400>
 8001bea:	e0c7      	b.n	8001d7c <__aeabi_ddiv+0x590>
 8001bec:	1d0a      	adds	r2, r1, #4
 8001bee:	428a      	cmp	r2, r1
 8001bf0:	4189      	sbcs	r1, r1
 8001bf2:	4249      	negs	r1, r1
 8001bf4:	185b      	adds	r3, r3, r1
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	021a      	lsls	r2, r3, #8
 8001bfa:	d400      	bmi.n	8001bfe <__aeabi_ddiv+0x412>
 8001bfc:	e0be      	b.n	8001d7c <__aeabi_ddiv+0x590>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2200      	movs	r2, #0
 8001c02:	2500      	movs	r5, #0
 8001c04:	e649      	b.n	800189a <__aeabi_ddiv+0xae>
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	4643      	mov	r3, r8
 8001c0a:	0312      	lsls	r2, r2, #12
 8001c0c:	4213      	tst	r3, r2
 8001c0e:	d008      	beq.n	8001c22 <__aeabi_ddiv+0x436>
 8001c10:	4214      	tst	r4, r2
 8001c12:	d106      	bne.n	8001c22 <__aeabi_ddiv+0x436>
 8001c14:	4322      	orrs	r2, r4
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	46ba      	mov	sl, r7
 8001c1a:	000d      	movs	r5, r1
 8001c1c:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <__aeabi_ddiv+0x5cc>)
 8001c1e:	0b12      	lsrs	r2, r2, #12
 8001c20:	e63b      	b.n	800189a <__aeabi_ddiv+0xae>
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	4643      	mov	r3, r8
 8001c26:	0312      	lsls	r2, r2, #12
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	0312      	lsls	r2, r2, #12
 8001c2c:	46b2      	mov	sl, r6
 8001c2e:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <__aeabi_ddiv+0x5cc>)
 8001c30:	0b12      	lsrs	r2, r2, #12
 8001c32:	e632      	b.n	800189a <__aeabi_ddiv+0xae>
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0x44e>
 8001c38:	e702      	b.n	8001a40 <__aeabi_ddiv+0x254>
 8001c3a:	19a6      	adds	r6, r4, r6
 8001c3c:	1e6a      	subs	r2, r5, #1
 8001c3e:	42a6      	cmp	r6, r4
 8001c40:	d200      	bcs.n	8001c44 <__aeabi_ddiv+0x458>
 8001c42:	e089      	b.n	8001d58 <__aeabi_ddiv+0x56c>
 8001c44:	4286      	cmp	r6, r0
 8001c46:	d200      	bcs.n	8001c4a <__aeabi_ddiv+0x45e>
 8001c48:	e09f      	b.n	8001d8a <__aeabi_ddiv+0x59e>
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_ddiv+0x462>
 8001c4c:	e0af      	b.n	8001dae <__aeabi_ddiv+0x5c2>
 8001c4e:	0015      	movs	r5, r2
 8001c50:	e6f4      	b.n	8001a3c <__aeabi_ddiv+0x250>
 8001c52:	42a9      	cmp	r1, r5
 8001c54:	d900      	bls.n	8001c58 <__aeabi_ddiv+0x46c>
 8001c56:	e63c      	b.n	80018d2 <__aeabi_ddiv+0xe6>
 8001c58:	4643      	mov	r3, r8
 8001c5a:	07de      	lsls	r6, r3, #31
 8001c5c:	0858      	lsrs	r0, r3, #1
 8001c5e:	086b      	lsrs	r3, r5, #1
 8001c60:	431e      	orrs	r6, r3
 8001c62:	07ed      	lsls	r5, r5, #31
 8001c64:	e63c      	b.n	80018e0 <__aeabi_ddiv+0xf4>
 8001c66:	f001 f8f1 	bl	8002e4c <__clzsi2>
 8001c6a:	0001      	movs	r1, r0
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	3115      	adds	r1, #21
 8001c70:	3220      	adds	r2, #32
 8001c72:	291c      	cmp	r1, #28
 8001c74:	dc00      	bgt.n	8001c78 <__aeabi_ddiv+0x48c>
 8001c76:	e72c      	b.n	8001ad2 <__aeabi_ddiv+0x2e6>
 8001c78:	464b      	mov	r3, r9
 8001c7a:	3808      	subs	r0, #8
 8001c7c:	4083      	lsls	r3, r0
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4698      	mov	r8, r3
 8001c82:	e732      	b.n	8001aea <__aeabi_ddiv+0x2fe>
 8001c84:	f001 f8e2 	bl	8002e4c <__clzsi2>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	3215      	adds	r2, #21
 8001c8e:	3020      	adds	r0, #32
 8001c90:	2a1c      	cmp	r2, #28
 8001c92:	dc00      	bgt.n	8001c96 <__aeabi_ddiv+0x4aa>
 8001c94:	e6ff      	b.n	8001a96 <__aeabi_ddiv+0x2aa>
 8001c96:	4654      	mov	r4, sl
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	409c      	lsls	r4, r3
 8001c9e:	e705      	b.n	8001aac <__aeabi_ddiv+0x2c0>
 8001ca0:	1936      	adds	r6, r6, r4
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	42b4      	cmp	r4, r6
 8001ca6:	d900      	bls.n	8001caa <__aeabi_ddiv+0x4be>
 8001ca8:	e6a6      	b.n	80019f8 <__aeabi_ddiv+0x20c>
 8001caa:	42b2      	cmp	r2, r6
 8001cac:	d800      	bhi.n	8001cb0 <__aeabi_ddiv+0x4c4>
 8001cae:	e6a3      	b.n	80019f8 <__aeabi_ddiv+0x20c>
 8001cb0:	1e83      	subs	r3, r0, #2
 8001cb2:	1936      	adds	r6, r6, r4
 8001cb4:	e6a0      	b.n	80019f8 <__aeabi_ddiv+0x20c>
 8001cb6:	1909      	adds	r1, r1, r4
 8001cb8:	3d01      	subs	r5, #1
 8001cba:	428c      	cmp	r4, r1
 8001cbc:	d900      	bls.n	8001cc0 <__aeabi_ddiv+0x4d4>
 8001cbe:	e68d      	b.n	80019dc <__aeabi_ddiv+0x1f0>
 8001cc0:	428a      	cmp	r2, r1
 8001cc2:	d800      	bhi.n	8001cc6 <__aeabi_ddiv+0x4da>
 8001cc4:	e68a      	b.n	80019dc <__aeabi_ddiv+0x1f0>
 8001cc6:	1e85      	subs	r5, r0, #2
 8001cc8:	1909      	adds	r1, r1, r4
 8001cca:	e687      	b.n	80019dc <__aeabi_ddiv+0x1f0>
 8001ccc:	220f      	movs	r2, #15
 8001cce:	402a      	ands	r2, r5
 8001cd0:	2a04      	cmp	r2, #4
 8001cd2:	d100      	bne.n	8001cd6 <__aeabi_ddiv+0x4ea>
 8001cd4:	e6bc      	b.n	8001a50 <__aeabi_ddiv+0x264>
 8001cd6:	1d29      	adds	r1, r5, #4
 8001cd8:	42a9      	cmp	r1, r5
 8001cda:	41ad      	sbcs	r5, r5
 8001cdc:	426d      	negs	r5, r5
 8001cde:	08c9      	lsrs	r1, r1, #3
 8001ce0:	44a8      	add	r8, r5
 8001ce2:	e6b6      	b.n	8001a52 <__aeabi_ddiv+0x266>
 8001ce4:	42af      	cmp	r7, r5
 8001ce6:	d900      	bls.n	8001cea <__aeabi_ddiv+0x4fe>
 8001ce8:	e662      	b.n	80019b0 <__aeabi_ddiv+0x1c4>
 8001cea:	4281      	cmp	r1, r0
 8001cec:	d804      	bhi.n	8001cf8 <__aeabi_ddiv+0x50c>
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_ddiv+0x506>
 8001cf0:	e65e      	b.n	80019b0 <__aeabi_ddiv+0x1c4>
 8001cf2:	42ae      	cmp	r6, r5
 8001cf4:	d800      	bhi.n	8001cf8 <__aeabi_ddiv+0x50c>
 8001cf6:	e65b      	b.n	80019b0 <__aeabi_ddiv+0x1c4>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	425b      	negs	r3, r3
 8001cfc:	469c      	mov	ip, r3
 8001cfe:	9b00      	ldr	r3, [sp, #0]
 8001d00:	44e0      	add	r8, ip
 8001d02:	469c      	mov	ip, r3
 8001d04:	4465      	add	r5, ip
 8001d06:	429d      	cmp	r5, r3
 8001d08:	419b      	sbcs	r3, r3
 8001d0a:	425b      	negs	r3, r3
 8001d0c:	191b      	adds	r3, r3, r4
 8001d0e:	18c0      	adds	r0, r0, r3
 8001d10:	e64f      	b.n	80019b2 <__aeabi_ddiv+0x1c6>
 8001d12:	42b2      	cmp	r2, r6
 8001d14:	d800      	bhi.n	8001d18 <__aeabi_ddiv+0x52c>
 8001d16:	e612      	b.n	800193e <__aeabi_ddiv+0x152>
 8001d18:	1e83      	subs	r3, r0, #2
 8001d1a:	1936      	adds	r6, r6, r4
 8001d1c:	e60f      	b.n	800193e <__aeabi_ddiv+0x152>
 8001d1e:	428a      	cmp	r2, r1
 8001d20:	d800      	bhi.n	8001d24 <__aeabi_ddiv+0x538>
 8001d22:	e5fa      	b.n	800191a <__aeabi_ddiv+0x12e>
 8001d24:	1e83      	subs	r3, r0, #2
 8001d26:	4698      	mov	r8, r3
 8001d28:	1909      	adds	r1, r1, r4
 8001d2a:	e5f6      	b.n	800191a <__aeabi_ddiv+0x12e>
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <__aeabi_ddiv+0x5d4>)
 8001d2e:	0028      	movs	r0, r5
 8001d30:	445b      	add	r3, fp
 8001d32:	4641      	mov	r1, r8
 8001d34:	409d      	lsls	r5, r3
 8001d36:	4099      	lsls	r1, r3
 8001d38:	40d0      	lsrs	r0, r2
 8001d3a:	1e6b      	subs	r3, r5, #1
 8001d3c:	419d      	sbcs	r5, r3
 8001d3e:	4643      	mov	r3, r8
 8001d40:	4301      	orrs	r1, r0
 8001d42:	4329      	orrs	r1, r5
 8001d44:	40d3      	lsrs	r3, r2
 8001d46:	074a      	lsls	r2, r1, #29
 8001d48:	d100      	bne.n	8001d4c <__aeabi_ddiv+0x560>
 8001d4a:	e755      	b.n	8001bf8 <__aeabi_ddiv+0x40c>
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	400a      	ands	r2, r1
 8001d50:	2a04      	cmp	r2, #4
 8001d52:	d000      	beq.n	8001d56 <__aeabi_ddiv+0x56a>
 8001d54:	e74a      	b.n	8001bec <__aeabi_ddiv+0x400>
 8001d56:	e74f      	b.n	8001bf8 <__aeabi_ddiv+0x40c>
 8001d58:	0015      	movs	r5, r2
 8001d5a:	4286      	cmp	r6, r0
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_ddiv+0x574>
 8001d5e:	e66d      	b.n	8001a3c <__aeabi_ddiv+0x250>
 8001d60:	9a00      	ldr	r2, [sp, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0x57c>
 8001d66:	e669      	b.n	8001a3c <__aeabi_ddiv+0x250>
 8001d68:	e66a      	b.n	8001a40 <__aeabi_ddiv+0x254>
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <__aeabi_ddiv+0x5d8>)
 8001d6c:	445b      	add	r3, fp
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	dc00      	bgt.n	8001d74 <__aeabi_ddiv+0x588>
 8001d72:	e713      	b.n	8001b9c <__aeabi_ddiv+0x3b0>
 8001d74:	2501      	movs	r5, #1
 8001d76:	2100      	movs	r1, #0
 8001d78:	44a8      	add	r8, r5
 8001d7a:	e66a      	b.n	8001a52 <__aeabi_ddiv+0x266>
 8001d7c:	075d      	lsls	r5, r3, #29
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	0b1a      	lsrs	r2, r3, #12
 8001d82:	08c9      	lsrs	r1, r1, #3
 8001d84:	2300      	movs	r3, #0
 8001d86:	430d      	orrs	r5, r1
 8001d88:	e587      	b.n	800189a <__aeabi_ddiv+0xae>
 8001d8a:	9900      	ldr	r1, [sp, #0]
 8001d8c:	3d02      	subs	r5, #2
 8001d8e:	004a      	lsls	r2, r1, #1
 8001d90:	428a      	cmp	r2, r1
 8001d92:	41bf      	sbcs	r7, r7
 8001d94:	427f      	negs	r7, r7
 8001d96:	193f      	adds	r7, r7, r4
 8001d98:	19f6      	adds	r6, r6, r7
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	e7dd      	b.n	8001d5a <__aeabi_ddiv+0x56e>
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	4643      	mov	r3, r8
 8001da2:	0312      	lsls	r2, r2, #12
 8001da4:	431a      	orrs	r2, r3
 8001da6:	0312      	lsls	r2, r2, #12
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <__aeabi_ddiv+0x5cc>)
 8001daa:	0b12      	lsrs	r2, r2, #12
 8001dac:	e575      	b.n	800189a <__aeabi_ddiv+0xae>
 8001dae:	9900      	ldr	r1, [sp, #0]
 8001db0:	4299      	cmp	r1, r3
 8001db2:	d3ea      	bcc.n	8001d8a <__aeabi_ddiv+0x59e>
 8001db4:	0015      	movs	r5, r2
 8001db6:	e7d3      	b.n	8001d60 <__aeabi_ddiv+0x574>
 8001db8:	000007ff 	.word	0x000007ff
 8001dbc:	0000043e 	.word	0x0000043e
 8001dc0:	0000041e 	.word	0x0000041e
 8001dc4:	000003ff 	.word	0x000003ff

08001dc8 <__eqdf2>:
 8001dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dca:	464e      	mov	r6, r9
 8001dcc:	4645      	mov	r5, r8
 8001dce:	46de      	mov	lr, fp
 8001dd0:	4657      	mov	r7, sl
 8001dd2:	4690      	mov	r8, r2
 8001dd4:	b5e0      	push	{r5, r6, r7, lr}
 8001dd6:	0017      	movs	r7, r2
 8001dd8:	031a      	lsls	r2, r3, #12
 8001dda:	0b12      	lsrs	r2, r2, #12
 8001ddc:	0005      	movs	r5, r0
 8001dde:	4684      	mov	ip, r0
 8001de0:	4819      	ldr	r0, [pc, #100]	; (8001e48 <__eqdf2+0x80>)
 8001de2:	030e      	lsls	r6, r1, #12
 8001de4:	004c      	lsls	r4, r1, #1
 8001de6:	4691      	mov	r9, r2
 8001de8:	005a      	lsls	r2, r3, #1
 8001dea:	0fdb      	lsrs	r3, r3, #31
 8001dec:	469b      	mov	fp, r3
 8001dee:	0b36      	lsrs	r6, r6, #12
 8001df0:	0d64      	lsrs	r4, r4, #21
 8001df2:	0fc9      	lsrs	r1, r1, #31
 8001df4:	0d52      	lsrs	r2, r2, #21
 8001df6:	4284      	cmp	r4, r0
 8001df8:	d019      	beq.n	8001e2e <__eqdf2+0x66>
 8001dfa:	4282      	cmp	r2, r0
 8001dfc:	d010      	beq.n	8001e20 <__eqdf2+0x58>
 8001dfe:	2001      	movs	r0, #1
 8001e00:	4294      	cmp	r4, r2
 8001e02:	d10e      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e04:	454e      	cmp	r6, r9
 8001e06:	d10c      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e08:	2001      	movs	r0, #1
 8001e0a:	45c4      	cmp	ip, r8
 8001e0c:	d109      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e0e:	4559      	cmp	r1, fp
 8001e10:	d017      	beq.n	8001e42 <__eqdf2+0x7a>
 8001e12:	2c00      	cmp	r4, #0
 8001e14:	d105      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e16:	0030      	movs	r0, r6
 8001e18:	4328      	orrs	r0, r5
 8001e1a:	1e43      	subs	r3, r0, #1
 8001e1c:	4198      	sbcs	r0, r3
 8001e1e:	e000      	b.n	8001e22 <__eqdf2+0x5a>
 8001e20:	2001      	movs	r0, #1
 8001e22:	bcf0      	pop	{r4, r5, r6, r7}
 8001e24:	46bb      	mov	fp, r7
 8001e26:	46b2      	mov	sl, r6
 8001e28:	46a9      	mov	r9, r5
 8001e2a:	46a0      	mov	r8, r4
 8001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2e:	0033      	movs	r3, r6
 8001e30:	2001      	movs	r0, #1
 8001e32:	432b      	orrs	r3, r5
 8001e34:	d1f5      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e36:	42a2      	cmp	r2, r4
 8001e38:	d1f3      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	433b      	orrs	r3, r7
 8001e3e:	d1f0      	bne.n	8001e22 <__eqdf2+0x5a>
 8001e40:	e7e2      	b.n	8001e08 <__eqdf2+0x40>
 8001e42:	2000      	movs	r0, #0
 8001e44:	e7ed      	b.n	8001e22 <__eqdf2+0x5a>
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	000007ff 	.word	0x000007ff

08001e4c <__gedf2>:
 8001e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4e:	4647      	mov	r7, r8
 8001e50:	46ce      	mov	lr, r9
 8001e52:	0004      	movs	r4, r0
 8001e54:	0018      	movs	r0, r3
 8001e56:	0016      	movs	r6, r2
 8001e58:	031b      	lsls	r3, r3, #12
 8001e5a:	0b1b      	lsrs	r3, r3, #12
 8001e5c:	4d2d      	ldr	r5, [pc, #180]	; (8001f14 <__gedf2+0xc8>)
 8001e5e:	004a      	lsls	r2, r1, #1
 8001e60:	4699      	mov	r9, r3
 8001e62:	b580      	push	{r7, lr}
 8001e64:	0043      	lsls	r3, r0, #1
 8001e66:	030f      	lsls	r7, r1, #12
 8001e68:	46a4      	mov	ip, r4
 8001e6a:	46b0      	mov	r8, r6
 8001e6c:	0b3f      	lsrs	r7, r7, #12
 8001e6e:	0d52      	lsrs	r2, r2, #21
 8001e70:	0fc9      	lsrs	r1, r1, #31
 8001e72:	0d5b      	lsrs	r3, r3, #21
 8001e74:	0fc0      	lsrs	r0, r0, #31
 8001e76:	42aa      	cmp	r2, r5
 8001e78:	d021      	beq.n	8001ebe <__gedf2+0x72>
 8001e7a:	42ab      	cmp	r3, r5
 8001e7c:	d013      	beq.n	8001ea6 <__gedf2+0x5a>
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d122      	bne.n	8001ec8 <__gedf2+0x7c>
 8001e82:	433c      	orrs	r4, r7
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <__gedf2+0x42>
 8001e88:	464d      	mov	r5, r9
 8001e8a:	432e      	orrs	r6, r5
 8001e8c:	d022      	beq.n	8001ed4 <__gedf2+0x88>
 8001e8e:	2c00      	cmp	r4, #0
 8001e90:	d010      	beq.n	8001eb4 <__gedf2+0x68>
 8001e92:	4281      	cmp	r1, r0
 8001e94:	d022      	beq.n	8001edc <__gedf2+0x90>
 8001e96:	2002      	movs	r0, #2
 8001e98:	3901      	subs	r1, #1
 8001e9a:	4008      	ands	r0, r1
 8001e9c:	3801      	subs	r0, #1
 8001e9e:	bcc0      	pop	{r6, r7}
 8001ea0:	46b9      	mov	r9, r7
 8001ea2:	46b0      	mov	r8, r6
 8001ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea6:	464d      	mov	r5, r9
 8001ea8:	432e      	orrs	r6, r5
 8001eaa:	d129      	bne.n	8001f00 <__gedf2+0xb4>
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d1f0      	bne.n	8001e92 <__gedf2+0x46>
 8001eb0:	433c      	orrs	r4, r7
 8001eb2:	d1ee      	bne.n	8001e92 <__gedf2+0x46>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d1f2      	bne.n	8001e9e <__gedf2+0x52>
 8001eb8:	2001      	movs	r0, #1
 8001eba:	4240      	negs	r0, r0
 8001ebc:	e7ef      	b.n	8001e9e <__gedf2+0x52>
 8001ebe:	003d      	movs	r5, r7
 8001ec0:	4325      	orrs	r5, r4
 8001ec2:	d11d      	bne.n	8001f00 <__gedf2+0xb4>
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d0ee      	beq.n	8001ea6 <__gedf2+0x5a>
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e2      	bne.n	8001e92 <__gedf2+0x46>
 8001ecc:	464c      	mov	r4, r9
 8001ece:	4326      	orrs	r6, r4
 8001ed0:	d1df      	bne.n	8001e92 <__gedf2+0x46>
 8001ed2:	e7e0      	b.n	8001e96 <__gedf2+0x4a>
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	2c00      	cmp	r4, #0
 8001ed8:	d0e1      	beq.n	8001e9e <__gedf2+0x52>
 8001eda:	e7dc      	b.n	8001e96 <__gedf2+0x4a>
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dc0a      	bgt.n	8001ef6 <__gedf2+0xaa>
 8001ee0:	dbe8      	blt.n	8001eb4 <__gedf2+0x68>
 8001ee2:	454f      	cmp	r7, r9
 8001ee4:	d8d7      	bhi.n	8001e96 <__gedf2+0x4a>
 8001ee6:	d00e      	beq.n	8001f06 <__gedf2+0xba>
 8001ee8:	2000      	movs	r0, #0
 8001eea:	454f      	cmp	r7, r9
 8001eec:	d2d7      	bcs.n	8001e9e <__gedf2+0x52>
 8001eee:	2900      	cmp	r1, #0
 8001ef0:	d0e2      	beq.n	8001eb8 <__gedf2+0x6c>
 8001ef2:	0008      	movs	r0, r1
 8001ef4:	e7d3      	b.n	8001e9e <__gedf2+0x52>
 8001ef6:	4243      	negs	r3, r0
 8001ef8:	4158      	adcs	r0, r3
 8001efa:	0040      	lsls	r0, r0, #1
 8001efc:	3801      	subs	r0, #1
 8001efe:	e7ce      	b.n	8001e9e <__gedf2+0x52>
 8001f00:	2002      	movs	r0, #2
 8001f02:	4240      	negs	r0, r0
 8001f04:	e7cb      	b.n	8001e9e <__gedf2+0x52>
 8001f06:	45c4      	cmp	ip, r8
 8001f08:	d8c5      	bhi.n	8001e96 <__gedf2+0x4a>
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	45c4      	cmp	ip, r8
 8001f0e:	d2c6      	bcs.n	8001e9e <__gedf2+0x52>
 8001f10:	e7ed      	b.n	8001eee <__gedf2+0xa2>
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	000007ff 	.word	0x000007ff

08001f18 <__ledf2>:
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f1a:	4647      	mov	r7, r8
 8001f1c:	46ce      	mov	lr, r9
 8001f1e:	0004      	movs	r4, r0
 8001f20:	0018      	movs	r0, r3
 8001f22:	0016      	movs	r6, r2
 8001f24:	031b      	lsls	r3, r3, #12
 8001f26:	0b1b      	lsrs	r3, r3, #12
 8001f28:	4d2c      	ldr	r5, [pc, #176]	; (8001fdc <__ledf2+0xc4>)
 8001f2a:	004a      	lsls	r2, r1, #1
 8001f2c:	4699      	mov	r9, r3
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	0043      	lsls	r3, r0, #1
 8001f32:	030f      	lsls	r7, r1, #12
 8001f34:	46a4      	mov	ip, r4
 8001f36:	46b0      	mov	r8, r6
 8001f38:	0b3f      	lsrs	r7, r7, #12
 8001f3a:	0d52      	lsrs	r2, r2, #21
 8001f3c:	0fc9      	lsrs	r1, r1, #31
 8001f3e:	0d5b      	lsrs	r3, r3, #21
 8001f40:	0fc0      	lsrs	r0, r0, #31
 8001f42:	42aa      	cmp	r2, r5
 8001f44:	d00d      	beq.n	8001f62 <__ledf2+0x4a>
 8001f46:	42ab      	cmp	r3, r5
 8001f48:	d010      	beq.n	8001f6c <__ledf2+0x54>
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	d127      	bne.n	8001f9e <__ledf2+0x86>
 8001f4e:	433c      	orrs	r4, r7
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d111      	bne.n	8001f78 <__ledf2+0x60>
 8001f54:	464d      	mov	r5, r9
 8001f56:	432e      	orrs	r6, r5
 8001f58:	d10e      	bne.n	8001f78 <__ledf2+0x60>
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	2c00      	cmp	r4, #0
 8001f5e:	d015      	beq.n	8001f8c <__ledf2+0x74>
 8001f60:	e00e      	b.n	8001f80 <__ledf2+0x68>
 8001f62:	003d      	movs	r5, r7
 8001f64:	4325      	orrs	r5, r4
 8001f66:	d110      	bne.n	8001f8a <__ledf2+0x72>
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d118      	bne.n	8001f9e <__ledf2+0x86>
 8001f6c:	464d      	mov	r5, r9
 8001f6e:	432e      	orrs	r6, r5
 8001f70:	d10b      	bne.n	8001f8a <__ledf2+0x72>
 8001f72:	2a00      	cmp	r2, #0
 8001f74:	d102      	bne.n	8001f7c <__ledf2+0x64>
 8001f76:	433c      	orrs	r4, r7
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	d00b      	beq.n	8001f94 <__ledf2+0x7c>
 8001f7c:	4281      	cmp	r1, r0
 8001f7e:	d014      	beq.n	8001faa <__ledf2+0x92>
 8001f80:	2002      	movs	r0, #2
 8001f82:	3901      	subs	r1, #1
 8001f84:	4008      	ands	r0, r1
 8001f86:	3801      	subs	r0, #1
 8001f88:	e000      	b.n	8001f8c <__ledf2+0x74>
 8001f8a:	2002      	movs	r0, #2
 8001f8c:	bcc0      	pop	{r6, r7}
 8001f8e:	46b9      	mov	r9, r7
 8001f90:	46b0      	mov	r8, r6
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d1f9      	bne.n	8001f8c <__ledf2+0x74>
 8001f98:	2001      	movs	r0, #1
 8001f9a:	4240      	negs	r0, r0
 8001f9c:	e7f6      	b.n	8001f8c <__ledf2+0x74>
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ec      	bne.n	8001f7c <__ledf2+0x64>
 8001fa2:	464c      	mov	r4, r9
 8001fa4:	4326      	orrs	r6, r4
 8001fa6:	d1e9      	bne.n	8001f7c <__ledf2+0x64>
 8001fa8:	e7ea      	b.n	8001f80 <__ledf2+0x68>
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dd04      	ble.n	8001fb8 <__ledf2+0xa0>
 8001fae:	4243      	negs	r3, r0
 8001fb0:	4158      	adcs	r0, r3
 8001fb2:	0040      	lsls	r0, r0, #1
 8001fb4:	3801      	subs	r0, #1
 8001fb6:	e7e9      	b.n	8001f8c <__ledf2+0x74>
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbeb      	blt.n	8001f94 <__ledf2+0x7c>
 8001fbc:	454f      	cmp	r7, r9
 8001fbe:	d8df      	bhi.n	8001f80 <__ledf2+0x68>
 8001fc0:	d006      	beq.n	8001fd0 <__ledf2+0xb8>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	454f      	cmp	r7, r9
 8001fc6:	d2e1      	bcs.n	8001f8c <__ledf2+0x74>
 8001fc8:	2900      	cmp	r1, #0
 8001fca:	d0e5      	beq.n	8001f98 <__ledf2+0x80>
 8001fcc:	0008      	movs	r0, r1
 8001fce:	e7dd      	b.n	8001f8c <__ledf2+0x74>
 8001fd0:	45c4      	cmp	ip, r8
 8001fd2:	d8d5      	bhi.n	8001f80 <__ledf2+0x68>
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	45c4      	cmp	ip, r8
 8001fd8:	d2d8      	bcs.n	8001f8c <__ledf2+0x74>
 8001fda:	e7f5      	b.n	8001fc8 <__ledf2+0xb0>
 8001fdc:	000007ff 	.word	0x000007ff

08001fe0 <__aeabi_dmul>:
 8001fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe2:	4645      	mov	r5, r8
 8001fe4:	46de      	mov	lr, fp
 8001fe6:	4657      	mov	r7, sl
 8001fe8:	464e      	mov	r6, r9
 8001fea:	b5e0      	push	{r5, r6, r7, lr}
 8001fec:	001f      	movs	r7, r3
 8001fee:	030b      	lsls	r3, r1, #12
 8001ff0:	0b1b      	lsrs	r3, r3, #12
 8001ff2:	469b      	mov	fp, r3
 8001ff4:	004d      	lsls	r5, r1, #1
 8001ff6:	0fcb      	lsrs	r3, r1, #31
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	4691      	mov	r9, r2
 8001ffc:	4698      	mov	r8, r3
 8001ffe:	b087      	sub	sp, #28
 8002000:	0d6d      	lsrs	r5, r5, #21
 8002002:	d100      	bne.n	8002006 <__aeabi_dmul+0x26>
 8002004:	e1cd      	b.n	80023a2 <__aeabi_dmul+0x3c2>
 8002006:	4bce      	ldr	r3, [pc, #824]	; (8002340 <__aeabi_dmul+0x360>)
 8002008:	429d      	cmp	r5, r3
 800200a:	d100      	bne.n	800200e <__aeabi_dmul+0x2e>
 800200c:	e1e9      	b.n	80023e2 <__aeabi_dmul+0x402>
 800200e:	465a      	mov	r2, fp
 8002010:	0f43      	lsrs	r3, r0, #29
 8002012:	00d2      	lsls	r2, r2, #3
 8002014:	4313      	orrs	r3, r2
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	431a      	orrs	r2, r3
 800201c:	00c3      	lsls	r3, r0, #3
 800201e:	469a      	mov	sl, r3
 8002020:	4bc8      	ldr	r3, [pc, #800]	; (8002344 <__aeabi_dmul+0x364>)
 8002022:	4693      	mov	fp, r2
 8002024:	469c      	mov	ip, r3
 8002026:	2300      	movs	r3, #0
 8002028:	2600      	movs	r6, #0
 800202a:	4465      	add	r5, ip
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	033c      	lsls	r4, r7, #12
 8002030:	007b      	lsls	r3, r7, #1
 8002032:	4648      	mov	r0, r9
 8002034:	0b24      	lsrs	r4, r4, #12
 8002036:	0d5b      	lsrs	r3, r3, #21
 8002038:	0fff      	lsrs	r7, r7, #31
 800203a:	2b00      	cmp	r3, #0
 800203c:	d100      	bne.n	8002040 <__aeabi_dmul+0x60>
 800203e:	e189      	b.n	8002354 <__aeabi_dmul+0x374>
 8002040:	4abf      	ldr	r2, [pc, #764]	; (8002340 <__aeabi_dmul+0x360>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d019      	beq.n	800207a <__aeabi_dmul+0x9a>
 8002046:	0f42      	lsrs	r2, r0, #29
 8002048:	00e4      	lsls	r4, r4, #3
 800204a:	4322      	orrs	r2, r4
 800204c:	2480      	movs	r4, #128	; 0x80
 800204e:	0424      	lsls	r4, r4, #16
 8002050:	4314      	orrs	r4, r2
 8002052:	4abc      	ldr	r2, [pc, #752]	; (8002344 <__aeabi_dmul+0x364>)
 8002054:	2100      	movs	r1, #0
 8002056:	4694      	mov	ip, r2
 8002058:	4642      	mov	r2, r8
 800205a:	4463      	add	r3, ip
 800205c:	195b      	adds	r3, r3, r5
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	9b01      	ldr	r3, [sp, #4]
 8002062:	407a      	eors	r2, r7
 8002064:	3301      	adds	r3, #1
 8002066:	00c0      	lsls	r0, r0, #3
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	9302      	str	r3, [sp, #8]
 800206c:	2e0a      	cmp	r6, #10
 800206e:	dd1c      	ble.n	80020aa <__aeabi_dmul+0xca>
 8002070:	003a      	movs	r2, r7
 8002072:	2e0b      	cmp	r6, #11
 8002074:	d05e      	beq.n	8002134 <__aeabi_dmul+0x154>
 8002076:	4647      	mov	r7, r8
 8002078:	e056      	b.n	8002128 <__aeabi_dmul+0x148>
 800207a:	4649      	mov	r1, r9
 800207c:	4bb0      	ldr	r3, [pc, #704]	; (8002340 <__aeabi_dmul+0x360>)
 800207e:	4321      	orrs	r1, r4
 8002080:	18eb      	adds	r3, r5, r3
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2900      	cmp	r1, #0
 8002086:	d12a      	bne.n	80020de <__aeabi_dmul+0xfe>
 8002088:	2080      	movs	r0, #128	; 0x80
 800208a:	2202      	movs	r2, #2
 800208c:	0100      	lsls	r0, r0, #4
 800208e:	002b      	movs	r3, r5
 8002090:	4684      	mov	ip, r0
 8002092:	4316      	orrs	r6, r2
 8002094:	4642      	mov	r2, r8
 8002096:	4463      	add	r3, ip
 8002098:	407a      	eors	r2, r7
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	2e0a      	cmp	r6, #10
 80020a0:	dd00      	ble.n	80020a4 <__aeabi_dmul+0xc4>
 80020a2:	e231      	b.n	8002508 <__aeabi_dmul+0x528>
 80020a4:	2000      	movs	r0, #0
 80020a6:	2400      	movs	r4, #0
 80020a8:	2102      	movs	r1, #2
 80020aa:	2e02      	cmp	r6, #2
 80020ac:	dc26      	bgt.n	80020fc <__aeabi_dmul+0x11c>
 80020ae:	3e01      	subs	r6, #1
 80020b0:	2e01      	cmp	r6, #1
 80020b2:	d852      	bhi.n	800215a <__aeabi_dmul+0x17a>
 80020b4:	2902      	cmp	r1, #2
 80020b6:	d04c      	beq.n	8002152 <__aeabi_dmul+0x172>
 80020b8:	2901      	cmp	r1, #1
 80020ba:	d000      	beq.n	80020be <__aeabi_dmul+0xde>
 80020bc:	e118      	b.n	80022f0 <__aeabi_dmul+0x310>
 80020be:	2300      	movs	r3, #0
 80020c0:	2400      	movs	r4, #0
 80020c2:	2500      	movs	r5, #0
 80020c4:	051b      	lsls	r3, r3, #20
 80020c6:	4323      	orrs	r3, r4
 80020c8:	07d2      	lsls	r2, r2, #31
 80020ca:	4313      	orrs	r3, r2
 80020cc:	0028      	movs	r0, r5
 80020ce:	0019      	movs	r1, r3
 80020d0:	b007      	add	sp, #28
 80020d2:	bcf0      	pop	{r4, r5, r6, r7}
 80020d4:	46bb      	mov	fp, r7
 80020d6:	46b2      	mov	sl, r6
 80020d8:	46a9      	mov	r9, r5
 80020da:	46a0      	mov	r8, r4
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	2203      	movs	r2, #3
 80020e2:	0109      	lsls	r1, r1, #4
 80020e4:	002b      	movs	r3, r5
 80020e6:	468c      	mov	ip, r1
 80020e8:	4316      	orrs	r6, r2
 80020ea:	4642      	mov	r2, r8
 80020ec:	4463      	add	r3, ip
 80020ee:	407a      	eors	r2, r7
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	9302      	str	r3, [sp, #8]
 80020f4:	2e0a      	cmp	r6, #10
 80020f6:	dd00      	ble.n	80020fa <__aeabi_dmul+0x11a>
 80020f8:	e228      	b.n	800254c <__aeabi_dmul+0x56c>
 80020fa:	2103      	movs	r1, #3
 80020fc:	2501      	movs	r5, #1
 80020fe:	40b5      	lsls	r5, r6
 8002100:	46ac      	mov	ip, r5
 8002102:	26a6      	movs	r6, #166	; 0xa6
 8002104:	4663      	mov	r3, ip
 8002106:	00f6      	lsls	r6, r6, #3
 8002108:	4035      	ands	r5, r6
 800210a:	4233      	tst	r3, r6
 800210c:	d10b      	bne.n	8002126 <__aeabi_dmul+0x146>
 800210e:	2690      	movs	r6, #144	; 0x90
 8002110:	00b6      	lsls	r6, r6, #2
 8002112:	4233      	tst	r3, r6
 8002114:	d118      	bne.n	8002148 <__aeabi_dmul+0x168>
 8002116:	3eb9      	subs	r6, #185	; 0xb9
 8002118:	3eff      	subs	r6, #255	; 0xff
 800211a:	421e      	tst	r6, r3
 800211c:	d01d      	beq.n	800215a <__aeabi_dmul+0x17a>
 800211e:	46a3      	mov	fp, r4
 8002120:	4682      	mov	sl, r0
 8002122:	9100      	str	r1, [sp, #0]
 8002124:	e000      	b.n	8002128 <__aeabi_dmul+0x148>
 8002126:	0017      	movs	r7, r2
 8002128:	9900      	ldr	r1, [sp, #0]
 800212a:	003a      	movs	r2, r7
 800212c:	2902      	cmp	r1, #2
 800212e:	d010      	beq.n	8002152 <__aeabi_dmul+0x172>
 8002130:	465c      	mov	r4, fp
 8002132:	4650      	mov	r0, sl
 8002134:	2903      	cmp	r1, #3
 8002136:	d1bf      	bne.n	80020b8 <__aeabi_dmul+0xd8>
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	031b      	lsls	r3, r3, #12
 800213c:	431c      	orrs	r4, r3
 800213e:	0324      	lsls	r4, r4, #12
 8002140:	0005      	movs	r5, r0
 8002142:	4b7f      	ldr	r3, [pc, #508]	; (8002340 <__aeabi_dmul+0x360>)
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	e7bd      	b.n	80020c4 <__aeabi_dmul+0xe4>
 8002148:	2480      	movs	r4, #128	; 0x80
 800214a:	2200      	movs	r2, #0
 800214c:	4b7c      	ldr	r3, [pc, #496]	; (8002340 <__aeabi_dmul+0x360>)
 800214e:	0324      	lsls	r4, r4, #12
 8002150:	e7b8      	b.n	80020c4 <__aeabi_dmul+0xe4>
 8002152:	2400      	movs	r4, #0
 8002154:	2500      	movs	r5, #0
 8002156:	4b7a      	ldr	r3, [pc, #488]	; (8002340 <__aeabi_dmul+0x360>)
 8002158:	e7b4      	b.n	80020c4 <__aeabi_dmul+0xe4>
 800215a:	4653      	mov	r3, sl
 800215c:	041e      	lsls	r6, r3, #16
 800215e:	0c36      	lsrs	r6, r6, #16
 8002160:	0c1f      	lsrs	r7, r3, #16
 8002162:	0033      	movs	r3, r6
 8002164:	0c01      	lsrs	r1, r0, #16
 8002166:	0400      	lsls	r0, r0, #16
 8002168:	0c00      	lsrs	r0, r0, #16
 800216a:	4343      	muls	r3, r0
 800216c:	4698      	mov	r8, r3
 800216e:	0003      	movs	r3, r0
 8002170:	437b      	muls	r3, r7
 8002172:	4699      	mov	r9, r3
 8002174:	0033      	movs	r3, r6
 8002176:	434b      	muls	r3, r1
 8002178:	469c      	mov	ip, r3
 800217a:	4643      	mov	r3, r8
 800217c:	000d      	movs	r5, r1
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	469a      	mov	sl, r3
 8002182:	437d      	muls	r5, r7
 8002184:	44cc      	add	ip, r9
 8002186:	44d4      	add	ip, sl
 8002188:	9500      	str	r5, [sp, #0]
 800218a:	45e1      	cmp	r9, ip
 800218c:	d904      	bls.n	8002198 <__aeabi_dmul+0x1b8>
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	025b      	lsls	r3, r3, #9
 8002192:	4699      	mov	r9, r3
 8002194:	444d      	add	r5, r9
 8002196:	9500      	str	r5, [sp, #0]
 8002198:	4663      	mov	r3, ip
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	001d      	movs	r5, r3
 800219e:	4663      	mov	r3, ip
 80021a0:	041b      	lsls	r3, r3, #16
 80021a2:	469c      	mov	ip, r3
 80021a4:	4643      	mov	r3, r8
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	4698      	mov	r8, r3
 80021ac:	4663      	mov	r3, ip
 80021ae:	4443      	add	r3, r8
 80021b0:	9303      	str	r3, [sp, #12]
 80021b2:	0c23      	lsrs	r3, r4, #16
 80021b4:	4698      	mov	r8, r3
 80021b6:	0033      	movs	r3, r6
 80021b8:	0424      	lsls	r4, r4, #16
 80021ba:	0c24      	lsrs	r4, r4, #16
 80021bc:	4363      	muls	r3, r4
 80021be:	469c      	mov	ip, r3
 80021c0:	0023      	movs	r3, r4
 80021c2:	437b      	muls	r3, r7
 80021c4:	4699      	mov	r9, r3
 80021c6:	4643      	mov	r3, r8
 80021c8:	435e      	muls	r6, r3
 80021ca:	435f      	muls	r7, r3
 80021cc:	444e      	add	r6, r9
 80021ce:	4663      	mov	r3, ip
 80021d0:	46b2      	mov	sl, r6
 80021d2:	0c1e      	lsrs	r6, r3, #16
 80021d4:	4456      	add	r6, sl
 80021d6:	45b1      	cmp	r9, r6
 80021d8:	d903      	bls.n	80021e2 <__aeabi_dmul+0x202>
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	4699      	mov	r9, r3
 80021e0:	444f      	add	r7, r9
 80021e2:	0c33      	lsrs	r3, r6, #16
 80021e4:	4699      	mov	r9, r3
 80021e6:	003b      	movs	r3, r7
 80021e8:	444b      	add	r3, r9
 80021ea:	9305      	str	r3, [sp, #20]
 80021ec:	4663      	mov	r3, ip
 80021ee:	46ac      	mov	ip, r5
 80021f0:	041f      	lsls	r7, r3, #16
 80021f2:	0c3f      	lsrs	r7, r7, #16
 80021f4:	0436      	lsls	r6, r6, #16
 80021f6:	19f6      	adds	r6, r6, r7
 80021f8:	44b4      	add	ip, r6
 80021fa:	4663      	mov	r3, ip
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	465b      	mov	r3, fp
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	469c      	mov	ip, r3
 8002204:	465b      	mov	r3, fp
 8002206:	041f      	lsls	r7, r3, #16
 8002208:	0c3f      	lsrs	r7, r7, #16
 800220a:	003b      	movs	r3, r7
 800220c:	4343      	muls	r3, r0
 800220e:	4699      	mov	r9, r3
 8002210:	4663      	mov	r3, ip
 8002212:	4343      	muls	r3, r0
 8002214:	469a      	mov	sl, r3
 8002216:	464b      	mov	r3, r9
 8002218:	4660      	mov	r0, ip
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	469b      	mov	fp, r3
 800221e:	4348      	muls	r0, r1
 8002220:	4379      	muls	r1, r7
 8002222:	4451      	add	r1, sl
 8002224:	4459      	add	r1, fp
 8002226:	458a      	cmp	sl, r1
 8002228:	d903      	bls.n	8002232 <__aeabi_dmul+0x252>
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	025b      	lsls	r3, r3, #9
 800222e:	469a      	mov	sl, r3
 8002230:	4450      	add	r0, sl
 8002232:	0c0b      	lsrs	r3, r1, #16
 8002234:	469a      	mov	sl, r3
 8002236:	464b      	mov	r3, r9
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	4699      	mov	r9, r3
 800223e:	003b      	movs	r3, r7
 8002240:	4363      	muls	r3, r4
 8002242:	0409      	lsls	r1, r1, #16
 8002244:	4645      	mov	r5, r8
 8002246:	4449      	add	r1, r9
 8002248:	4699      	mov	r9, r3
 800224a:	4663      	mov	r3, ip
 800224c:	435c      	muls	r4, r3
 800224e:	436b      	muls	r3, r5
 8002250:	469c      	mov	ip, r3
 8002252:	464b      	mov	r3, r9
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	4698      	mov	r8, r3
 8002258:	436f      	muls	r7, r5
 800225a:	193f      	adds	r7, r7, r4
 800225c:	4447      	add	r7, r8
 800225e:	4450      	add	r0, sl
 8002260:	42bc      	cmp	r4, r7
 8002262:	d903      	bls.n	800226c <__aeabi_dmul+0x28c>
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	025b      	lsls	r3, r3, #9
 8002268:	4698      	mov	r8, r3
 800226a:	44c4      	add	ip, r8
 800226c:	9b04      	ldr	r3, [sp, #16]
 800226e:	9d00      	ldr	r5, [sp, #0]
 8002270:	4698      	mov	r8, r3
 8002272:	4445      	add	r5, r8
 8002274:	42b5      	cmp	r5, r6
 8002276:	41b6      	sbcs	r6, r6
 8002278:	4273      	negs	r3, r6
 800227a:	4698      	mov	r8, r3
 800227c:	464b      	mov	r3, r9
 800227e:	041e      	lsls	r6, r3, #16
 8002280:	9b05      	ldr	r3, [sp, #20]
 8002282:	043c      	lsls	r4, r7, #16
 8002284:	4699      	mov	r9, r3
 8002286:	0c36      	lsrs	r6, r6, #16
 8002288:	19a4      	adds	r4, r4, r6
 800228a:	444c      	add	r4, r9
 800228c:	46a1      	mov	r9, r4
 800228e:	4683      	mov	fp, r0
 8002290:	186e      	adds	r6, r5, r1
 8002292:	44c1      	add	r9, r8
 8002294:	428e      	cmp	r6, r1
 8002296:	4189      	sbcs	r1, r1
 8002298:	44cb      	add	fp, r9
 800229a:	465d      	mov	r5, fp
 800229c:	4249      	negs	r1, r1
 800229e:	186d      	adds	r5, r5, r1
 80022a0:	429c      	cmp	r4, r3
 80022a2:	41a4      	sbcs	r4, r4
 80022a4:	45c1      	cmp	r9, r8
 80022a6:	419b      	sbcs	r3, r3
 80022a8:	4583      	cmp	fp, r0
 80022aa:	4180      	sbcs	r0, r0
 80022ac:	428d      	cmp	r5, r1
 80022ae:	4189      	sbcs	r1, r1
 80022b0:	425b      	negs	r3, r3
 80022b2:	4264      	negs	r4, r4
 80022b4:	431c      	orrs	r4, r3
 80022b6:	4240      	negs	r0, r0
 80022b8:	9b03      	ldr	r3, [sp, #12]
 80022ba:	4249      	negs	r1, r1
 80022bc:	4301      	orrs	r1, r0
 80022be:	0270      	lsls	r0, r6, #9
 80022c0:	0c3f      	lsrs	r7, r7, #16
 80022c2:	4318      	orrs	r0, r3
 80022c4:	19e4      	adds	r4, r4, r7
 80022c6:	1e47      	subs	r7, r0, #1
 80022c8:	41b8      	sbcs	r0, r7
 80022ca:	1864      	adds	r4, r4, r1
 80022cc:	4464      	add	r4, ip
 80022ce:	0df6      	lsrs	r6, r6, #23
 80022d0:	0261      	lsls	r1, r4, #9
 80022d2:	4330      	orrs	r0, r6
 80022d4:	0dec      	lsrs	r4, r5, #23
 80022d6:	026e      	lsls	r6, r5, #9
 80022d8:	430c      	orrs	r4, r1
 80022da:	4330      	orrs	r0, r6
 80022dc:	01c9      	lsls	r1, r1, #7
 80022de:	d400      	bmi.n	80022e2 <__aeabi_dmul+0x302>
 80022e0:	e0f1      	b.n	80024c6 <__aeabi_dmul+0x4e6>
 80022e2:	2101      	movs	r1, #1
 80022e4:	0843      	lsrs	r3, r0, #1
 80022e6:	4001      	ands	r1, r0
 80022e8:	430b      	orrs	r3, r1
 80022ea:	07e0      	lsls	r0, r4, #31
 80022ec:	4318      	orrs	r0, r3
 80022ee:	0864      	lsrs	r4, r4, #1
 80022f0:	4915      	ldr	r1, [pc, #84]	; (8002348 <__aeabi_dmul+0x368>)
 80022f2:	9b02      	ldr	r3, [sp, #8]
 80022f4:	468c      	mov	ip, r1
 80022f6:	4463      	add	r3, ip
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	dc00      	bgt.n	80022fe <__aeabi_dmul+0x31e>
 80022fc:	e097      	b.n	800242e <__aeabi_dmul+0x44e>
 80022fe:	0741      	lsls	r1, r0, #29
 8002300:	d009      	beq.n	8002316 <__aeabi_dmul+0x336>
 8002302:	210f      	movs	r1, #15
 8002304:	4001      	ands	r1, r0
 8002306:	2904      	cmp	r1, #4
 8002308:	d005      	beq.n	8002316 <__aeabi_dmul+0x336>
 800230a:	1d01      	adds	r1, r0, #4
 800230c:	4281      	cmp	r1, r0
 800230e:	4180      	sbcs	r0, r0
 8002310:	4240      	negs	r0, r0
 8002312:	1824      	adds	r4, r4, r0
 8002314:	0008      	movs	r0, r1
 8002316:	01e1      	lsls	r1, r4, #7
 8002318:	d506      	bpl.n	8002328 <__aeabi_dmul+0x348>
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	00c9      	lsls	r1, r1, #3
 800231e:	468c      	mov	ip, r1
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <__aeabi_dmul+0x36c>)
 8002322:	401c      	ands	r4, r3
 8002324:	9b02      	ldr	r3, [sp, #8]
 8002326:	4463      	add	r3, ip
 8002328:	4909      	ldr	r1, [pc, #36]	; (8002350 <__aeabi_dmul+0x370>)
 800232a:	428b      	cmp	r3, r1
 800232c:	dd00      	ble.n	8002330 <__aeabi_dmul+0x350>
 800232e:	e710      	b.n	8002152 <__aeabi_dmul+0x172>
 8002330:	0761      	lsls	r1, r4, #29
 8002332:	08c5      	lsrs	r5, r0, #3
 8002334:	0264      	lsls	r4, r4, #9
 8002336:	055b      	lsls	r3, r3, #21
 8002338:	430d      	orrs	r5, r1
 800233a:	0b24      	lsrs	r4, r4, #12
 800233c:	0d5b      	lsrs	r3, r3, #21
 800233e:	e6c1      	b.n	80020c4 <__aeabi_dmul+0xe4>
 8002340:	000007ff 	.word	0x000007ff
 8002344:	fffffc01 	.word	0xfffffc01
 8002348:	000003ff 	.word	0x000003ff
 800234c:	feffffff 	.word	0xfeffffff
 8002350:	000007fe 	.word	0x000007fe
 8002354:	464b      	mov	r3, r9
 8002356:	4323      	orrs	r3, r4
 8002358:	d059      	beq.n	800240e <__aeabi_dmul+0x42e>
 800235a:	2c00      	cmp	r4, #0
 800235c:	d100      	bne.n	8002360 <__aeabi_dmul+0x380>
 800235e:	e0a3      	b.n	80024a8 <__aeabi_dmul+0x4c8>
 8002360:	0020      	movs	r0, r4
 8002362:	f000 fd73 	bl	8002e4c <__clzsi2>
 8002366:	0001      	movs	r1, r0
 8002368:	0003      	movs	r3, r0
 800236a:	390b      	subs	r1, #11
 800236c:	221d      	movs	r2, #29
 800236e:	1a52      	subs	r2, r2, r1
 8002370:	4649      	mov	r1, r9
 8002372:	0018      	movs	r0, r3
 8002374:	40d1      	lsrs	r1, r2
 8002376:	464a      	mov	r2, r9
 8002378:	3808      	subs	r0, #8
 800237a:	4082      	lsls	r2, r0
 800237c:	4084      	lsls	r4, r0
 800237e:	0010      	movs	r0, r2
 8002380:	430c      	orrs	r4, r1
 8002382:	4a74      	ldr	r2, [pc, #464]	; (8002554 <__aeabi_dmul+0x574>)
 8002384:	1aeb      	subs	r3, r5, r3
 8002386:	4694      	mov	ip, r2
 8002388:	4642      	mov	r2, r8
 800238a:	4463      	add	r3, ip
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	9b01      	ldr	r3, [sp, #4]
 8002390:	407a      	eors	r2, r7
 8002392:	3301      	adds	r3, #1
 8002394:	2100      	movs	r1, #0
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	9302      	str	r3, [sp, #8]
 800239a:	2e0a      	cmp	r6, #10
 800239c:	dd00      	ble.n	80023a0 <__aeabi_dmul+0x3c0>
 800239e:	e667      	b.n	8002070 <__aeabi_dmul+0x90>
 80023a0:	e683      	b.n	80020aa <__aeabi_dmul+0xca>
 80023a2:	465b      	mov	r3, fp
 80023a4:	4303      	orrs	r3, r0
 80023a6:	469a      	mov	sl, r3
 80023a8:	d02a      	beq.n	8002400 <__aeabi_dmul+0x420>
 80023aa:	465b      	mov	r3, fp
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d06d      	beq.n	800248c <__aeabi_dmul+0x4ac>
 80023b0:	4658      	mov	r0, fp
 80023b2:	f000 fd4b 	bl	8002e4c <__clzsi2>
 80023b6:	0001      	movs	r1, r0
 80023b8:	0003      	movs	r3, r0
 80023ba:	390b      	subs	r1, #11
 80023bc:	221d      	movs	r2, #29
 80023be:	1a52      	subs	r2, r2, r1
 80023c0:	0021      	movs	r1, r4
 80023c2:	0018      	movs	r0, r3
 80023c4:	465d      	mov	r5, fp
 80023c6:	40d1      	lsrs	r1, r2
 80023c8:	3808      	subs	r0, #8
 80023ca:	4085      	lsls	r5, r0
 80023cc:	000a      	movs	r2, r1
 80023ce:	4084      	lsls	r4, r0
 80023d0:	432a      	orrs	r2, r5
 80023d2:	4693      	mov	fp, r2
 80023d4:	46a2      	mov	sl, r4
 80023d6:	4d5f      	ldr	r5, [pc, #380]	; (8002554 <__aeabi_dmul+0x574>)
 80023d8:	2600      	movs	r6, #0
 80023da:	1aed      	subs	r5, r5, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	e625      	b.n	800202e <__aeabi_dmul+0x4e>
 80023e2:	465b      	mov	r3, fp
 80023e4:	4303      	orrs	r3, r0
 80023e6:	469a      	mov	sl, r3
 80023e8:	d105      	bne.n	80023f6 <__aeabi_dmul+0x416>
 80023ea:	2300      	movs	r3, #0
 80023ec:	469b      	mov	fp, r3
 80023ee:	3302      	adds	r3, #2
 80023f0:	2608      	movs	r6, #8
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	e61b      	b.n	800202e <__aeabi_dmul+0x4e>
 80023f6:	2303      	movs	r3, #3
 80023f8:	4682      	mov	sl, r0
 80023fa:	260c      	movs	r6, #12
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	e616      	b.n	800202e <__aeabi_dmul+0x4e>
 8002400:	2300      	movs	r3, #0
 8002402:	469b      	mov	fp, r3
 8002404:	3301      	adds	r3, #1
 8002406:	2604      	movs	r6, #4
 8002408:	2500      	movs	r5, #0
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	e60f      	b.n	800202e <__aeabi_dmul+0x4e>
 800240e:	4642      	mov	r2, r8
 8002410:	3301      	adds	r3, #1
 8002412:	9501      	str	r5, [sp, #4]
 8002414:	431e      	orrs	r6, r3
 8002416:	9b01      	ldr	r3, [sp, #4]
 8002418:	407a      	eors	r2, r7
 800241a:	3301      	adds	r3, #1
 800241c:	2400      	movs	r4, #0
 800241e:	2000      	movs	r0, #0
 8002420:	2101      	movs	r1, #1
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	9302      	str	r3, [sp, #8]
 8002426:	2e0a      	cmp	r6, #10
 8002428:	dd00      	ble.n	800242c <__aeabi_dmul+0x44c>
 800242a:	e621      	b.n	8002070 <__aeabi_dmul+0x90>
 800242c:	e63d      	b.n	80020aa <__aeabi_dmul+0xca>
 800242e:	2101      	movs	r1, #1
 8002430:	1ac9      	subs	r1, r1, r3
 8002432:	2938      	cmp	r1, #56	; 0x38
 8002434:	dd00      	ble.n	8002438 <__aeabi_dmul+0x458>
 8002436:	e642      	b.n	80020be <__aeabi_dmul+0xde>
 8002438:	291f      	cmp	r1, #31
 800243a:	dd47      	ble.n	80024cc <__aeabi_dmul+0x4ec>
 800243c:	261f      	movs	r6, #31
 800243e:	0025      	movs	r5, r4
 8002440:	4276      	negs	r6, r6
 8002442:	1af3      	subs	r3, r6, r3
 8002444:	40dd      	lsrs	r5, r3
 8002446:	002b      	movs	r3, r5
 8002448:	2920      	cmp	r1, #32
 800244a:	d005      	beq.n	8002458 <__aeabi_dmul+0x478>
 800244c:	4942      	ldr	r1, [pc, #264]	; (8002558 <__aeabi_dmul+0x578>)
 800244e:	9d02      	ldr	r5, [sp, #8]
 8002450:	468c      	mov	ip, r1
 8002452:	4465      	add	r5, ip
 8002454:	40ac      	lsls	r4, r5
 8002456:	4320      	orrs	r0, r4
 8002458:	1e41      	subs	r1, r0, #1
 800245a:	4188      	sbcs	r0, r1
 800245c:	4318      	orrs	r0, r3
 800245e:	2307      	movs	r3, #7
 8002460:	001d      	movs	r5, r3
 8002462:	2400      	movs	r4, #0
 8002464:	4005      	ands	r5, r0
 8002466:	4203      	tst	r3, r0
 8002468:	d04a      	beq.n	8002500 <__aeabi_dmul+0x520>
 800246a:	230f      	movs	r3, #15
 800246c:	2400      	movs	r4, #0
 800246e:	4003      	ands	r3, r0
 8002470:	2b04      	cmp	r3, #4
 8002472:	d042      	beq.n	80024fa <__aeabi_dmul+0x51a>
 8002474:	1d03      	adds	r3, r0, #4
 8002476:	4283      	cmp	r3, r0
 8002478:	4180      	sbcs	r0, r0
 800247a:	4240      	negs	r0, r0
 800247c:	1824      	adds	r4, r4, r0
 800247e:	0018      	movs	r0, r3
 8002480:	0223      	lsls	r3, r4, #8
 8002482:	d53a      	bpl.n	80024fa <__aeabi_dmul+0x51a>
 8002484:	2301      	movs	r3, #1
 8002486:	2400      	movs	r4, #0
 8002488:	2500      	movs	r5, #0
 800248a:	e61b      	b.n	80020c4 <__aeabi_dmul+0xe4>
 800248c:	f000 fcde 	bl	8002e4c <__clzsi2>
 8002490:	0001      	movs	r1, r0
 8002492:	0003      	movs	r3, r0
 8002494:	3115      	adds	r1, #21
 8002496:	3320      	adds	r3, #32
 8002498:	291c      	cmp	r1, #28
 800249a:	dd8f      	ble.n	80023bc <__aeabi_dmul+0x3dc>
 800249c:	3808      	subs	r0, #8
 800249e:	2200      	movs	r2, #0
 80024a0:	4084      	lsls	r4, r0
 80024a2:	4692      	mov	sl, r2
 80024a4:	46a3      	mov	fp, r4
 80024a6:	e796      	b.n	80023d6 <__aeabi_dmul+0x3f6>
 80024a8:	f000 fcd0 	bl	8002e4c <__clzsi2>
 80024ac:	0001      	movs	r1, r0
 80024ae:	0003      	movs	r3, r0
 80024b0:	3115      	adds	r1, #21
 80024b2:	3320      	adds	r3, #32
 80024b4:	291c      	cmp	r1, #28
 80024b6:	dc00      	bgt.n	80024ba <__aeabi_dmul+0x4da>
 80024b8:	e758      	b.n	800236c <__aeabi_dmul+0x38c>
 80024ba:	0002      	movs	r2, r0
 80024bc:	464c      	mov	r4, r9
 80024be:	3a08      	subs	r2, #8
 80024c0:	2000      	movs	r0, #0
 80024c2:	4094      	lsls	r4, r2
 80024c4:	e75d      	b.n	8002382 <__aeabi_dmul+0x3a2>
 80024c6:	9b01      	ldr	r3, [sp, #4]
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	e711      	b.n	80022f0 <__aeabi_dmul+0x310>
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <__aeabi_dmul+0x57c>)
 80024ce:	0026      	movs	r6, r4
 80024d0:	469c      	mov	ip, r3
 80024d2:	0003      	movs	r3, r0
 80024d4:	9d02      	ldr	r5, [sp, #8]
 80024d6:	40cb      	lsrs	r3, r1
 80024d8:	4465      	add	r5, ip
 80024da:	40ae      	lsls	r6, r5
 80024dc:	431e      	orrs	r6, r3
 80024de:	0003      	movs	r3, r0
 80024e0:	40ab      	lsls	r3, r5
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	4183      	sbcs	r3, r0
 80024e6:	0030      	movs	r0, r6
 80024e8:	4318      	orrs	r0, r3
 80024ea:	40cc      	lsrs	r4, r1
 80024ec:	0743      	lsls	r3, r0, #29
 80024ee:	d0c7      	beq.n	8002480 <__aeabi_dmul+0x4a0>
 80024f0:	230f      	movs	r3, #15
 80024f2:	4003      	ands	r3, r0
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d1bd      	bne.n	8002474 <__aeabi_dmul+0x494>
 80024f8:	e7c2      	b.n	8002480 <__aeabi_dmul+0x4a0>
 80024fa:	0765      	lsls	r5, r4, #29
 80024fc:	0264      	lsls	r4, r4, #9
 80024fe:	0b24      	lsrs	r4, r4, #12
 8002500:	08c0      	lsrs	r0, r0, #3
 8002502:	2300      	movs	r3, #0
 8002504:	4305      	orrs	r5, r0
 8002506:	e5dd      	b.n	80020c4 <__aeabi_dmul+0xe4>
 8002508:	2500      	movs	r5, #0
 800250a:	2302      	movs	r3, #2
 800250c:	2e0f      	cmp	r6, #15
 800250e:	d10c      	bne.n	800252a <__aeabi_dmul+0x54a>
 8002510:	2480      	movs	r4, #128	; 0x80
 8002512:	465b      	mov	r3, fp
 8002514:	0324      	lsls	r4, r4, #12
 8002516:	4223      	tst	r3, r4
 8002518:	d00e      	beq.n	8002538 <__aeabi_dmul+0x558>
 800251a:	4221      	tst	r1, r4
 800251c:	d10c      	bne.n	8002538 <__aeabi_dmul+0x558>
 800251e:	430c      	orrs	r4, r1
 8002520:	0324      	lsls	r4, r4, #12
 8002522:	003a      	movs	r2, r7
 8002524:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <__aeabi_dmul+0x580>)
 8002526:	0b24      	lsrs	r4, r4, #12
 8002528:	e5cc      	b.n	80020c4 <__aeabi_dmul+0xe4>
 800252a:	2e0b      	cmp	r6, #11
 800252c:	d000      	beq.n	8002530 <__aeabi_dmul+0x550>
 800252e:	e5a2      	b.n	8002076 <__aeabi_dmul+0x96>
 8002530:	468b      	mov	fp, r1
 8002532:	46aa      	mov	sl, r5
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	e5f7      	b.n	8002128 <__aeabi_dmul+0x148>
 8002538:	2480      	movs	r4, #128	; 0x80
 800253a:	465b      	mov	r3, fp
 800253c:	0324      	lsls	r4, r4, #12
 800253e:	431c      	orrs	r4, r3
 8002540:	0324      	lsls	r4, r4, #12
 8002542:	4642      	mov	r2, r8
 8002544:	4655      	mov	r5, sl
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <__aeabi_dmul+0x580>)
 8002548:	0b24      	lsrs	r4, r4, #12
 800254a:	e5bb      	b.n	80020c4 <__aeabi_dmul+0xe4>
 800254c:	464d      	mov	r5, r9
 800254e:	0021      	movs	r1, r4
 8002550:	2303      	movs	r3, #3
 8002552:	e7db      	b.n	800250c <__aeabi_dmul+0x52c>
 8002554:	fffffc0d 	.word	0xfffffc0d
 8002558:	0000043e 	.word	0x0000043e
 800255c:	0000041e 	.word	0x0000041e
 8002560:	000007ff 	.word	0x000007ff

08002564 <__aeabi_dsub>:
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	4657      	mov	r7, sl
 8002568:	464e      	mov	r6, r9
 800256a:	4645      	mov	r5, r8
 800256c:	46de      	mov	lr, fp
 800256e:	b5e0      	push	{r5, r6, r7, lr}
 8002570:	000d      	movs	r5, r1
 8002572:	0004      	movs	r4, r0
 8002574:	0019      	movs	r1, r3
 8002576:	0010      	movs	r0, r2
 8002578:	032b      	lsls	r3, r5, #12
 800257a:	0a5b      	lsrs	r3, r3, #9
 800257c:	0f62      	lsrs	r2, r4, #29
 800257e:	431a      	orrs	r2, r3
 8002580:	00e3      	lsls	r3, r4, #3
 8002582:	030c      	lsls	r4, r1, #12
 8002584:	0a64      	lsrs	r4, r4, #9
 8002586:	0f47      	lsrs	r7, r0, #29
 8002588:	4327      	orrs	r7, r4
 800258a:	4cd0      	ldr	r4, [pc, #832]	; (80028cc <__aeabi_dsub+0x368>)
 800258c:	006e      	lsls	r6, r5, #1
 800258e:	4691      	mov	r9, r2
 8002590:	b083      	sub	sp, #12
 8002592:	004a      	lsls	r2, r1, #1
 8002594:	00c0      	lsls	r0, r0, #3
 8002596:	4698      	mov	r8, r3
 8002598:	46a2      	mov	sl, r4
 800259a:	0d76      	lsrs	r6, r6, #21
 800259c:	0fed      	lsrs	r5, r5, #31
 800259e:	0d52      	lsrs	r2, r2, #21
 80025a0:	0fc9      	lsrs	r1, r1, #31
 80025a2:	9001      	str	r0, [sp, #4]
 80025a4:	42a2      	cmp	r2, r4
 80025a6:	d100      	bne.n	80025aa <__aeabi_dsub+0x46>
 80025a8:	e0b9      	b.n	800271e <__aeabi_dsub+0x1ba>
 80025aa:	2401      	movs	r4, #1
 80025ac:	4061      	eors	r1, r4
 80025ae:	468b      	mov	fp, r1
 80025b0:	428d      	cmp	r5, r1
 80025b2:	d100      	bne.n	80025b6 <__aeabi_dsub+0x52>
 80025b4:	e08d      	b.n	80026d2 <__aeabi_dsub+0x16e>
 80025b6:	1ab4      	subs	r4, r6, r2
 80025b8:	46a4      	mov	ip, r4
 80025ba:	2c00      	cmp	r4, #0
 80025bc:	dc00      	bgt.n	80025c0 <__aeabi_dsub+0x5c>
 80025be:	e0b7      	b.n	8002730 <__aeabi_dsub+0x1cc>
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	d100      	bne.n	80025c6 <__aeabi_dsub+0x62>
 80025c4:	e0cb      	b.n	800275e <__aeabi_dsub+0x1fa>
 80025c6:	4ac1      	ldr	r2, [pc, #772]	; (80028cc <__aeabi_dsub+0x368>)
 80025c8:	4296      	cmp	r6, r2
 80025ca:	d100      	bne.n	80025ce <__aeabi_dsub+0x6a>
 80025cc:	e186      	b.n	80028dc <__aeabi_dsub+0x378>
 80025ce:	2280      	movs	r2, #128	; 0x80
 80025d0:	0412      	lsls	r2, r2, #16
 80025d2:	4317      	orrs	r7, r2
 80025d4:	4662      	mov	r2, ip
 80025d6:	2a38      	cmp	r2, #56	; 0x38
 80025d8:	dd00      	ble.n	80025dc <__aeabi_dsub+0x78>
 80025da:	e1a4      	b.n	8002926 <__aeabi_dsub+0x3c2>
 80025dc:	2a1f      	cmp	r2, #31
 80025de:	dd00      	ble.n	80025e2 <__aeabi_dsub+0x7e>
 80025e0:	e21d      	b.n	8002a1e <__aeabi_dsub+0x4ba>
 80025e2:	4661      	mov	r1, ip
 80025e4:	2220      	movs	r2, #32
 80025e6:	003c      	movs	r4, r7
 80025e8:	1a52      	subs	r2, r2, r1
 80025ea:	0001      	movs	r1, r0
 80025ec:	4090      	lsls	r0, r2
 80025ee:	4094      	lsls	r4, r2
 80025f0:	1e42      	subs	r2, r0, #1
 80025f2:	4190      	sbcs	r0, r2
 80025f4:	4662      	mov	r2, ip
 80025f6:	46a0      	mov	r8, r4
 80025f8:	4664      	mov	r4, ip
 80025fa:	40d7      	lsrs	r7, r2
 80025fc:	464a      	mov	r2, r9
 80025fe:	40e1      	lsrs	r1, r4
 8002600:	4644      	mov	r4, r8
 8002602:	1bd2      	subs	r2, r2, r7
 8002604:	4691      	mov	r9, r2
 8002606:	430c      	orrs	r4, r1
 8002608:	4304      	orrs	r4, r0
 800260a:	1b1c      	subs	r4, r3, r4
 800260c:	42a3      	cmp	r3, r4
 800260e:	4192      	sbcs	r2, r2
 8002610:	464b      	mov	r3, r9
 8002612:	4252      	negs	r2, r2
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	469a      	mov	sl, r3
 8002618:	4653      	mov	r3, sl
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	d400      	bmi.n	8002620 <__aeabi_dsub+0xbc>
 800261e:	e12b      	b.n	8002878 <__aeabi_dsub+0x314>
 8002620:	4653      	mov	r3, sl
 8002622:	025a      	lsls	r2, r3, #9
 8002624:	0a53      	lsrs	r3, r2, #9
 8002626:	469a      	mov	sl, r3
 8002628:	4653      	mov	r3, sl
 800262a:	2b00      	cmp	r3, #0
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0xcc>
 800262e:	e166      	b.n	80028fe <__aeabi_dsub+0x39a>
 8002630:	4650      	mov	r0, sl
 8002632:	f000 fc0b 	bl	8002e4c <__clzsi2>
 8002636:	0003      	movs	r3, r0
 8002638:	3b08      	subs	r3, #8
 800263a:	2220      	movs	r2, #32
 800263c:	0020      	movs	r0, r4
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	4651      	mov	r1, sl
 8002642:	40d0      	lsrs	r0, r2
 8002644:	4099      	lsls	r1, r3
 8002646:	0002      	movs	r2, r0
 8002648:	409c      	lsls	r4, r3
 800264a:	430a      	orrs	r2, r1
 800264c:	429e      	cmp	r6, r3
 800264e:	dd00      	ble.n	8002652 <__aeabi_dsub+0xee>
 8002650:	e164      	b.n	800291c <__aeabi_dsub+0x3b8>
 8002652:	1b9b      	subs	r3, r3, r6
 8002654:	1c59      	adds	r1, r3, #1
 8002656:	291f      	cmp	r1, #31
 8002658:	dd00      	ble.n	800265c <__aeabi_dsub+0xf8>
 800265a:	e0fe      	b.n	800285a <__aeabi_dsub+0x2f6>
 800265c:	2320      	movs	r3, #32
 800265e:	0010      	movs	r0, r2
 8002660:	0026      	movs	r6, r4
 8002662:	1a5b      	subs	r3, r3, r1
 8002664:	409c      	lsls	r4, r3
 8002666:	4098      	lsls	r0, r3
 8002668:	40ce      	lsrs	r6, r1
 800266a:	40ca      	lsrs	r2, r1
 800266c:	1e63      	subs	r3, r4, #1
 800266e:	419c      	sbcs	r4, r3
 8002670:	4330      	orrs	r0, r6
 8002672:	4692      	mov	sl, r2
 8002674:	2600      	movs	r6, #0
 8002676:	4304      	orrs	r4, r0
 8002678:	0763      	lsls	r3, r4, #29
 800267a:	d009      	beq.n	8002690 <__aeabi_dsub+0x12c>
 800267c:	230f      	movs	r3, #15
 800267e:	4023      	ands	r3, r4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d005      	beq.n	8002690 <__aeabi_dsub+0x12c>
 8002684:	1d23      	adds	r3, r4, #4
 8002686:	42a3      	cmp	r3, r4
 8002688:	41a4      	sbcs	r4, r4
 800268a:	4264      	negs	r4, r4
 800268c:	44a2      	add	sl, r4
 800268e:	001c      	movs	r4, r3
 8002690:	4653      	mov	r3, sl
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	d400      	bmi.n	8002698 <__aeabi_dsub+0x134>
 8002696:	e0f2      	b.n	800287e <__aeabi_dsub+0x31a>
 8002698:	4b8c      	ldr	r3, [pc, #560]	; (80028cc <__aeabi_dsub+0x368>)
 800269a:	3601      	adds	r6, #1
 800269c:	429e      	cmp	r6, r3
 800269e:	d100      	bne.n	80026a2 <__aeabi_dsub+0x13e>
 80026a0:	e10f      	b.n	80028c2 <__aeabi_dsub+0x35e>
 80026a2:	4653      	mov	r3, sl
 80026a4:	498a      	ldr	r1, [pc, #552]	; (80028d0 <__aeabi_dsub+0x36c>)
 80026a6:	08e4      	lsrs	r4, r4, #3
 80026a8:	400b      	ands	r3, r1
 80026aa:	0019      	movs	r1, r3
 80026ac:	075b      	lsls	r3, r3, #29
 80026ae:	4323      	orrs	r3, r4
 80026b0:	0572      	lsls	r2, r6, #21
 80026b2:	024c      	lsls	r4, r1, #9
 80026b4:	0b24      	lsrs	r4, r4, #12
 80026b6:	0d52      	lsrs	r2, r2, #21
 80026b8:	0512      	lsls	r2, r2, #20
 80026ba:	4322      	orrs	r2, r4
 80026bc:	07ed      	lsls	r5, r5, #31
 80026be:	432a      	orrs	r2, r5
 80026c0:	0018      	movs	r0, r3
 80026c2:	0011      	movs	r1, r2
 80026c4:	b003      	add	sp, #12
 80026c6:	bcf0      	pop	{r4, r5, r6, r7}
 80026c8:	46bb      	mov	fp, r7
 80026ca:	46b2      	mov	sl, r6
 80026cc:	46a9      	mov	r9, r5
 80026ce:	46a0      	mov	r8, r4
 80026d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d2:	1ab4      	subs	r4, r6, r2
 80026d4:	46a4      	mov	ip, r4
 80026d6:	2c00      	cmp	r4, #0
 80026d8:	dd59      	ble.n	800278e <__aeabi_dsub+0x22a>
 80026da:	2a00      	cmp	r2, #0
 80026dc:	d100      	bne.n	80026e0 <__aeabi_dsub+0x17c>
 80026de:	e0b0      	b.n	8002842 <__aeabi_dsub+0x2de>
 80026e0:	4556      	cmp	r6, sl
 80026e2:	d100      	bne.n	80026e6 <__aeabi_dsub+0x182>
 80026e4:	e0fa      	b.n	80028dc <__aeabi_dsub+0x378>
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0412      	lsls	r2, r2, #16
 80026ea:	4317      	orrs	r7, r2
 80026ec:	4662      	mov	r2, ip
 80026ee:	2a38      	cmp	r2, #56	; 0x38
 80026f0:	dd00      	ble.n	80026f4 <__aeabi_dsub+0x190>
 80026f2:	e0d4      	b.n	800289e <__aeabi_dsub+0x33a>
 80026f4:	2a1f      	cmp	r2, #31
 80026f6:	dc00      	bgt.n	80026fa <__aeabi_dsub+0x196>
 80026f8:	e1c0      	b.n	8002a7c <__aeabi_dsub+0x518>
 80026fa:	0039      	movs	r1, r7
 80026fc:	3a20      	subs	r2, #32
 80026fe:	40d1      	lsrs	r1, r2
 8002700:	4662      	mov	r2, ip
 8002702:	2a20      	cmp	r2, #32
 8002704:	d006      	beq.n	8002714 <__aeabi_dsub+0x1b0>
 8002706:	4664      	mov	r4, ip
 8002708:	2240      	movs	r2, #64	; 0x40
 800270a:	1b12      	subs	r2, r2, r4
 800270c:	003c      	movs	r4, r7
 800270e:	4094      	lsls	r4, r2
 8002710:	4304      	orrs	r4, r0
 8002712:	9401      	str	r4, [sp, #4]
 8002714:	9c01      	ldr	r4, [sp, #4]
 8002716:	1e62      	subs	r2, r4, #1
 8002718:	4194      	sbcs	r4, r2
 800271a:	430c      	orrs	r4, r1
 800271c:	e0c3      	b.n	80028a6 <__aeabi_dsub+0x342>
 800271e:	003c      	movs	r4, r7
 8002720:	4304      	orrs	r4, r0
 8002722:	d02b      	beq.n	800277c <__aeabi_dsub+0x218>
 8002724:	468b      	mov	fp, r1
 8002726:	428d      	cmp	r5, r1
 8002728:	d02e      	beq.n	8002788 <__aeabi_dsub+0x224>
 800272a:	4c6a      	ldr	r4, [pc, #424]	; (80028d4 <__aeabi_dsub+0x370>)
 800272c:	46a4      	mov	ip, r4
 800272e:	44b4      	add	ip, r6
 8002730:	4664      	mov	r4, ip
 8002732:	2c00      	cmp	r4, #0
 8002734:	d05f      	beq.n	80027f6 <__aeabi_dsub+0x292>
 8002736:	1b94      	subs	r4, r2, r6
 8002738:	46a4      	mov	ip, r4
 800273a:	2e00      	cmp	r6, #0
 800273c:	d000      	beq.n	8002740 <__aeabi_dsub+0x1dc>
 800273e:	e120      	b.n	8002982 <__aeabi_dsub+0x41e>
 8002740:	464c      	mov	r4, r9
 8002742:	431c      	orrs	r4, r3
 8002744:	d100      	bne.n	8002748 <__aeabi_dsub+0x1e4>
 8002746:	e1c7      	b.n	8002ad8 <__aeabi_dsub+0x574>
 8002748:	4661      	mov	r1, ip
 800274a:	1e4c      	subs	r4, r1, #1
 800274c:	2901      	cmp	r1, #1
 800274e:	d100      	bne.n	8002752 <__aeabi_dsub+0x1ee>
 8002750:	e223      	b.n	8002b9a <__aeabi_dsub+0x636>
 8002752:	4d5e      	ldr	r5, [pc, #376]	; (80028cc <__aeabi_dsub+0x368>)
 8002754:	45ac      	cmp	ip, r5
 8002756:	d100      	bne.n	800275a <__aeabi_dsub+0x1f6>
 8002758:	e1d8      	b.n	8002b0c <__aeabi_dsub+0x5a8>
 800275a:	46a4      	mov	ip, r4
 800275c:	e11a      	b.n	8002994 <__aeabi_dsub+0x430>
 800275e:	003a      	movs	r2, r7
 8002760:	4302      	orrs	r2, r0
 8002762:	d100      	bne.n	8002766 <__aeabi_dsub+0x202>
 8002764:	e0e4      	b.n	8002930 <__aeabi_dsub+0x3cc>
 8002766:	0022      	movs	r2, r4
 8002768:	3a01      	subs	r2, #1
 800276a:	2c01      	cmp	r4, #1
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x20c>
 800276e:	e1c3      	b.n	8002af8 <__aeabi_dsub+0x594>
 8002770:	4956      	ldr	r1, [pc, #344]	; (80028cc <__aeabi_dsub+0x368>)
 8002772:	428c      	cmp	r4, r1
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x214>
 8002776:	e0b1      	b.n	80028dc <__aeabi_dsub+0x378>
 8002778:	4694      	mov	ip, r2
 800277a:	e72b      	b.n	80025d4 <__aeabi_dsub+0x70>
 800277c:	2401      	movs	r4, #1
 800277e:	4061      	eors	r1, r4
 8002780:	468b      	mov	fp, r1
 8002782:	428d      	cmp	r5, r1
 8002784:	d000      	beq.n	8002788 <__aeabi_dsub+0x224>
 8002786:	e716      	b.n	80025b6 <__aeabi_dsub+0x52>
 8002788:	4952      	ldr	r1, [pc, #328]	; (80028d4 <__aeabi_dsub+0x370>)
 800278a:	468c      	mov	ip, r1
 800278c:	44b4      	add	ip, r6
 800278e:	4664      	mov	r4, ip
 8002790:	2c00      	cmp	r4, #0
 8002792:	d100      	bne.n	8002796 <__aeabi_dsub+0x232>
 8002794:	e0d3      	b.n	800293e <__aeabi_dsub+0x3da>
 8002796:	1b91      	subs	r1, r2, r6
 8002798:	468c      	mov	ip, r1
 800279a:	2e00      	cmp	r6, #0
 800279c:	d100      	bne.n	80027a0 <__aeabi_dsub+0x23c>
 800279e:	e15e      	b.n	8002a5e <__aeabi_dsub+0x4fa>
 80027a0:	494a      	ldr	r1, [pc, #296]	; (80028cc <__aeabi_dsub+0x368>)
 80027a2:	428a      	cmp	r2, r1
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x244>
 80027a6:	e1be      	b.n	8002b26 <__aeabi_dsub+0x5c2>
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	464c      	mov	r4, r9
 80027ac:	0409      	lsls	r1, r1, #16
 80027ae:	430c      	orrs	r4, r1
 80027b0:	46a1      	mov	r9, r4
 80027b2:	4661      	mov	r1, ip
 80027b4:	2938      	cmp	r1, #56	; 0x38
 80027b6:	dd00      	ble.n	80027ba <__aeabi_dsub+0x256>
 80027b8:	e1ba      	b.n	8002b30 <__aeabi_dsub+0x5cc>
 80027ba:	291f      	cmp	r1, #31
 80027bc:	dd00      	ble.n	80027c0 <__aeabi_dsub+0x25c>
 80027be:	e227      	b.n	8002c10 <__aeabi_dsub+0x6ac>
 80027c0:	2420      	movs	r4, #32
 80027c2:	1a64      	subs	r4, r4, r1
 80027c4:	4649      	mov	r1, r9
 80027c6:	40a1      	lsls	r1, r4
 80027c8:	001e      	movs	r6, r3
 80027ca:	4688      	mov	r8, r1
 80027cc:	4661      	mov	r1, ip
 80027ce:	40a3      	lsls	r3, r4
 80027d0:	40ce      	lsrs	r6, r1
 80027d2:	4641      	mov	r1, r8
 80027d4:	1e5c      	subs	r4, r3, #1
 80027d6:	41a3      	sbcs	r3, r4
 80027d8:	4331      	orrs	r1, r6
 80027da:	4319      	orrs	r1, r3
 80027dc:	000c      	movs	r4, r1
 80027de:	4663      	mov	r3, ip
 80027e0:	4649      	mov	r1, r9
 80027e2:	40d9      	lsrs	r1, r3
 80027e4:	187f      	adds	r7, r7, r1
 80027e6:	1824      	adds	r4, r4, r0
 80027e8:	4284      	cmp	r4, r0
 80027ea:	419b      	sbcs	r3, r3
 80027ec:	425b      	negs	r3, r3
 80027ee:	469a      	mov	sl, r3
 80027f0:	0016      	movs	r6, r2
 80027f2:	44ba      	add	sl, r7
 80027f4:	e05d      	b.n	80028b2 <__aeabi_dsub+0x34e>
 80027f6:	4c38      	ldr	r4, [pc, #224]	; (80028d8 <__aeabi_dsub+0x374>)
 80027f8:	1c72      	adds	r2, r6, #1
 80027fa:	4222      	tst	r2, r4
 80027fc:	d000      	beq.n	8002800 <__aeabi_dsub+0x29c>
 80027fe:	e0df      	b.n	80029c0 <__aeabi_dsub+0x45c>
 8002800:	464a      	mov	r2, r9
 8002802:	431a      	orrs	r2, r3
 8002804:	2e00      	cmp	r6, #0
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x2a6>
 8002808:	e15c      	b.n	8002ac4 <__aeabi_dsub+0x560>
 800280a:	2a00      	cmp	r2, #0
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x2ac>
 800280e:	e1cf      	b.n	8002bb0 <__aeabi_dsub+0x64c>
 8002810:	003a      	movs	r2, r7
 8002812:	4302      	orrs	r2, r0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x2b4>
 8002816:	e17f      	b.n	8002b18 <__aeabi_dsub+0x5b4>
 8002818:	1a1c      	subs	r4, r3, r0
 800281a:	464a      	mov	r2, r9
 800281c:	42a3      	cmp	r3, r4
 800281e:	4189      	sbcs	r1, r1
 8002820:	1bd2      	subs	r2, r2, r7
 8002822:	4249      	negs	r1, r1
 8002824:	1a52      	subs	r2, r2, r1
 8002826:	4692      	mov	sl, r2
 8002828:	0212      	lsls	r2, r2, #8
 800282a:	d400      	bmi.n	800282e <__aeabi_dsub+0x2ca>
 800282c:	e20a      	b.n	8002c44 <__aeabi_dsub+0x6e0>
 800282e:	1ac4      	subs	r4, r0, r3
 8002830:	42a0      	cmp	r0, r4
 8002832:	4180      	sbcs	r0, r0
 8002834:	464b      	mov	r3, r9
 8002836:	4240      	negs	r0, r0
 8002838:	1aff      	subs	r7, r7, r3
 800283a:	1a3b      	subs	r3, r7, r0
 800283c:	469a      	mov	sl, r3
 800283e:	465d      	mov	r5, fp
 8002840:	e71a      	b.n	8002678 <__aeabi_dsub+0x114>
 8002842:	003a      	movs	r2, r7
 8002844:	4302      	orrs	r2, r0
 8002846:	d073      	beq.n	8002930 <__aeabi_dsub+0x3cc>
 8002848:	0022      	movs	r2, r4
 800284a:	3a01      	subs	r2, #1
 800284c:	2c01      	cmp	r4, #1
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x2ee>
 8002850:	e0cb      	b.n	80029ea <__aeabi_dsub+0x486>
 8002852:	4554      	cmp	r4, sl
 8002854:	d042      	beq.n	80028dc <__aeabi_dsub+0x378>
 8002856:	4694      	mov	ip, r2
 8002858:	e748      	b.n	80026ec <__aeabi_dsub+0x188>
 800285a:	0010      	movs	r0, r2
 800285c:	3b1f      	subs	r3, #31
 800285e:	40d8      	lsrs	r0, r3
 8002860:	2920      	cmp	r1, #32
 8002862:	d003      	beq.n	800286c <__aeabi_dsub+0x308>
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	1a5b      	subs	r3, r3, r1
 8002868:	409a      	lsls	r2, r3
 800286a:	4314      	orrs	r4, r2
 800286c:	1e63      	subs	r3, r4, #1
 800286e:	419c      	sbcs	r4, r3
 8002870:	2300      	movs	r3, #0
 8002872:	2600      	movs	r6, #0
 8002874:	469a      	mov	sl, r3
 8002876:	4304      	orrs	r4, r0
 8002878:	0763      	lsls	r3, r4, #29
 800287a:	d000      	beq.n	800287e <__aeabi_dsub+0x31a>
 800287c:	e6fe      	b.n	800267c <__aeabi_dsub+0x118>
 800287e:	4652      	mov	r2, sl
 8002880:	08e3      	lsrs	r3, r4, #3
 8002882:	0752      	lsls	r2, r2, #29
 8002884:	4313      	orrs	r3, r2
 8002886:	4652      	mov	r2, sl
 8002888:	46b4      	mov	ip, r6
 800288a:	08d2      	lsrs	r2, r2, #3
 800288c:	490f      	ldr	r1, [pc, #60]	; (80028cc <__aeabi_dsub+0x368>)
 800288e:	458c      	cmp	ip, r1
 8002890:	d02a      	beq.n	80028e8 <__aeabi_dsub+0x384>
 8002892:	0312      	lsls	r2, r2, #12
 8002894:	0b14      	lsrs	r4, r2, #12
 8002896:	4662      	mov	r2, ip
 8002898:	0552      	lsls	r2, r2, #21
 800289a:	0d52      	lsrs	r2, r2, #21
 800289c:	e70c      	b.n	80026b8 <__aeabi_dsub+0x154>
 800289e:	003c      	movs	r4, r7
 80028a0:	4304      	orrs	r4, r0
 80028a2:	1e62      	subs	r2, r4, #1
 80028a4:	4194      	sbcs	r4, r2
 80028a6:	18e4      	adds	r4, r4, r3
 80028a8:	429c      	cmp	r4, r3
 80028aa:	4192      	sbcs	r2, r2
 80028ac:	4252      	negs	r2, r2
 80028ae:	444a      	add	r2, r9
 80028b0:	4692      	mov	sl, r2
 80028b2:	4653      	mov	r3, sl
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	d5df      	bpl.n	8002878 <__aeabi_dsub+0x314>
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <__aeabi_dsub+0x368>)
 80028ba:	3601      	adds	r6, #1
 80028bc:	429e      	cmp	r6, r3
 80028be:	d000      	beq.n	80028c2 <__aeabi_dsub+0x35e>
 80028c0:	e0a0      	b.n	8002a04 <__aeabi_dsub+0x4a0>
 80028c2:	0032      	movs	r2, r6
 80028c4:	2400      	movs	r4, #0
 80028c6:	2300      	movs	r3, #0
 80028c8:	e6f6      	b.n	80026b8 <__aeabi_dsub+0x154>
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	000007ff 	.word	0x000007ff
 80028d0:	ff7fffff 	.word	0xff7fffff
 80028d4:	fffff801 	.word	0xfffff801
 80028d8:	000007fe 	.word	0x000007fe
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	464a      	mov	r2, r9
 80028e0:	0752      	lsls	r2, r2, #29
 80028e2:	4313      	orrs	r3, r2
 80028e4:	464a      	mov	r2, r9
 80028e6:	08d2      	lsrs	r2, r2, #3
 80028e8:	0019      	movs	r1, r3
 80028ea:	4311      	orrs	r1, r2
 80028ec:	d100      	bne.n	80028f0 <__aeabi_dsub+0x38c>
 80028ee:	e1b5      	b.n	8002c5c <__aeabi_dsub+0x6f8>
 80028f0:	2480      	movs	r4, #128	; 0x80
 80028f2:	0324      	lsls	r4, r4, #12
 80028f4:	4314      	orrs	r4, r2
 80028f6:	0324      	lsls	r4, r4, #12
 80028f8:	4ad5      	ldr	r2, [pc, #852]	; (8002c50 <__aeabi_dsub+0x6ec>)
 80028fa:	0b24      	lsrs	r4, r4, #12
 80028fc:	e6dc      	b.n	80026b8 <__aeabi_dsub+0x154>
 80028fe:	0020      	movs	r0, r4
 8002900:	f000 faa4 	bl	8002e4c <__clzsi2>
 8002904:	0003      	movs	r3, r0
 8002906:	3318      	adds	r3, #24
 8002908:	2b1f      	cmp	r3, #31
 800290a:	dc00      	bgt.n	800290e <__aeabi_dsub+0x3aa>
 800290c:	e695      	b.n	800263a <__aeabi_dsub+0xd6>
 800290e:	0022      	movs	r2, r4
 8002910:	3808      	subs	r0, #8
 8002912:	4082      	lsls	r2, r0
 8002914:	2400      	movs	r4, #0
 8002916:	429e      	cmp	r6, r3
 8002918:	dc00      	bgt.n	800291c <__aeabi_dsub+0x3b8>
 800291a:	e69a      	b.n	8002652 <__aeabi_dsub+0xee>
 800291c:	1af6      	subs	r6, r6, r3
 800291e:	4bcd      	ldr	r3, [pc, #820]	; (8002c54 <__aeabi_dsub+0x6f0>)
 8002920:	401a      	ands	r2, r3
 8002922:	4692      	mov	sl, r2
 8002924:	e6a8      	b.n	8002678 <__aeabi_dsub+0x114>
 8002926:	003c      	movs	r4, r7
 8002928:	4304      	orrs	r4, r0
 800292a:	1e62      	subs	r2, r4, #1
 800292c:	4194      	sbcs	r4, r2
 800292e:	e66c      	b.n	800260a <__aeabi_dsub+0xa6>
 8002930:	464a      	mov	r2, r9
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	0752      	lsls	r2, r2, #29
 8002936:	4313      	orrs	r3, r2
 8002938:	464a      	mov	r2, r9
 800293a:	08d2      	lsrs	r2, r2, #3
 800293c:	e7a6      	b.n	800288c <__aeabi_dsub+0x328>
 800293e:	4cc6      	ldr	r4, [pc, #792]	; (8002c58 <__aeabi_dsub+0x6f4>)
 8002940:	1c72      	adds	r2, r6, #1
 8002942:	4222      	tst	r2, r4
 8002944:	d000      	beq.n	8002948 <__aeabi_dsub+0x3e4>
 8002946:	e0ac      	b.n	8002aa2 <__aeabi_dsub+0x53e>
 8002948:	464a      	mov	r2, r9
 800294a:	431a      	orrs	r2, r3
 800294c:	2e00      	cmp	r6, #0
 800294e:	d000      	beq.n	8002952 <__aeabi_dsub+0x3ee>
 8002950:	e105      	b.n	8002b5e <__aeabi_dsub+0x5fa>
 8002952:	2a00      	cmp	r2, #0
 8002954:	d100      	bne.n	8002958 <__aeabi_dsub+0x3f4>
 8002956:	e156      	b.n	8002c06 <__aeabi_dsub+0x6a2>
 8002958:	003a      	movs	r2, r7
 800295a:	4302      	orrs	r2, r0
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x3fc>
 800295e:	e0db      	b.n	8002b18 <__aeabi_dsub+0x5b4>
 8002960:	181c      	adds	r4, r3, r0
 8002962:	429c      	cmp	r4, r3
 8002964:	419b      	sbcs	r3, r3
 8002966:	444f      	add	r7, r9
 8002968:	46ba      	mov	sl, r7
 800296a:	425b      	negs	r3, r3
 800296c:	449a      	add	sl, r3
 800296e:	4653      	mov	r3, sl
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	d400      	bmi.n	8002976 <__aeabi_dsub+0x412>
 8002974:	e780      	b.n	8002878 <__aeabi_dsub+0x314>
 8002976:	4652      	mov	r2, sl
 8002978:	4bb6      	ldr	r3, [pc, #728]	; (8002c54 <__aeabi_dsub+0x6f0>)
 800297a:	2601      	movs	r6, #1
 800297c:	401a      	ands	r2, r3
 800297e:	4692      	mov	sl, r2
 8002980:	e77a      	b.n	8002878 <__aeabi_dsub+0x314>
 8002982:	4cb3      	ldr	r4, [pc, #716]	; (8002c50 <__aeabi_dsub+0x6ec>)
 8002984:	42a2      	cmp	r2, r4
 8002986:	d100      	bne.n	800298a <__aeabi_dsub+0x426>
 8002988:	e0c0      	b.n	8002b0c <__aeabi_dsub+0x5a8>
 800298a:	2480      	movs	r4, #128	; 0x80
 800298c:	464d      	mov	r5, r9
 800298e:	0424      	lsls	r4, r4, #16
 8002990:	4325      	orrs	r5, r4
 8002992:	46a9      	mov	r9, r5
 8002994:	4664      	mov	r4, ip
 8002996:	2c38      	cmp	r4, #56	; 0x38
 8002998:	dc53      	bgt.n	8002a42 <__aeabi_dsub+0x4de>
 800299a:	4661      	mov	r1, ip
 800299c:	2c1f      	cmp	r4, #31
 800299e:	dd00      	ble.n	80029a2 <__aeabi_dsub+0x43e>
 80029a0:	e0cd      	b.n	8002b3e <__aeabi_dsub+0x5da>
 80029a2:	2520      	movs	r5, #32
 80029a4:	001e      	movs	r6, r3
 80029a6:	1b2d      	subs	r5, r5, r4
 80029a8:	464c      	mov	r4, r9
 80029aa:	40ab      	lsls	r3, r5
 80029ac:	40ac      	lsls	r4, r5
 80029ae:	40ce      	lsrs	r6, r1
 80029b0:	1e5d      	subs	r5, r3, #1
 80029b2:	41ab      	sbcs	r3, r5
 80029b4:	4334      	orrs	r4, r6
 80029b6:	4323      	orrs	r3, r4
 80029b8:	464c      	mov	r4, r9
 80029ba:	40cc      	lsrs	r4, r1
 80029bc:	1b3f      	subs	r7, r7, r4
 80029be:	e045      	b.n	8002a4c <__aeabi_dsub+0x4e8>
 80029c0:	464a      	mov	r2, r9
 80029c2:	1a1c      	subs	r4, r3, r0
 80029c4:	1bd1      	subs	r1, r2, r7
 80029c6:	42a3      	cmp	r3, r4
 80029c8:	4192      	sbcs	r2, r2
 80029ca:	4252      	negs	r2, r2
 80029cc:	4692      	mov	sl, r2
 80029ce:	000a      	movs	r2, r1
 80029d0:	4651      	mov	r1, sl
 80029d2:	1a52      	subs	r2, r2, r1
 80029d4:	4692      	mov	sl, r2
 80029d6:	0212      	lsls	r2, r2, #8
 80029d8:	d500      	bpl.n	80029dc <__aeabi_dsub+0x478>
 80029da:	e083      	b.n	8002ae4 <__aeabi_dsub+0x580>
 80029dc:	4653      	mov	r3, sl
 80029de:	4323      	orrs	r3, r4
 80029e0:	d000      	beq.n	80029e4 <__aeabi_dsub+0x480>
 80029e2:	e621      	b.n	8002628 <__aeabi_dsub+0xc4>
 80029e4:	2200      	movs	r2, #0
 80029e6:	2500      	movs	r5, #0
 80029e8:	e753      	b.n	8002892 <__aeabi_dsub+0x32e>
 80029ea:	181c      	adds	r4, r3, r0
 80029ec:	429c      	cmp	r4, r3
 80029ee:	419b      	sbcs	r3, r3
 80029f0:	444f      	add	r7, r9
 80029f2:	46ba      	mov	sl, r7
 80029f4:	425b      	negs	r3, r3
 80029f6:	449a      	add	sl, r3
 80029f8:	4653      	mov	r3, sl
 80029fa:	2601      	movs	r6, #1
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	d400      	bmi.n	8002a02 <__aeabi_dsub+0x49e>
 8002a00:	e73a      	b.n	8002878 <__aeabi_dsub+0x314>
 8002a02:	2602      	movs	r6, #2
 8002a04:	4652      	mov	r2, sl
 8002a06:	4b93      	ldr	r3, [pc, #588]	; (8002c54 <__aeabi_dsub+0x6f0>)
 8002a08:	2101      	movs	r1, #1
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	0013      	movs	r3, r2
 8002a0e:	4021      	ands	r1, r4
 8002a10:	0862      	lsrs	r2, r4, #1
 8002a12:	430a      	orrs	r2, r1
 8002a14:	07dc      	lsls	r4, r3, #31
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	469a      	mov	sl, r3
 8002a1a:	4314      	orrs	r4, r2
 8002a1c:	e62c      	b.n	8002678 <__aeabi_dsub+0x114>
 8002a1e:	0039      	movs	r1, r7
 8002a20:	3a20      	subs	r2, #32
 8002a22:	40d1      	lsrs	r1, r2
 8002a24:	4662      	mov	r2, ip
 8002a26:	2a20      	cmp	r2, #32
 8002a28:	d006      	beq.n	8002a38 <__aeabi_dsub+0x4d4>
 8002a2a:	4664      	mov	r4, ip
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	1b12      	subs	r2, r2, r4
 8002a30:	003c      	movs	r4, r7
 8002a32:	4094      	lsls	r4, r2
 8002a34:	4304      	orrs	r4, r0
 8002a36:	9401      	str	r4, [sp, #4]
 8002a38:	9c01      	ldr	r4, [sp, #4]
 8002a3a:	1e62      	subs	r2, r4, #1
 8002a3c:	4194      	sbcs	r4, r2
 8002a3e:	430c      	orrs	r4, r1
 8002a40:	e5e3      	b.n	800260a <__aeabi_dsub+0xa6>
 8002a42:	4649      	mov	r1, r9
 8002a44:	4319      	orrs	r1, r3
 8002a46:	000b      	movs	r3, r1
 8002a48:	1e5c      	subs	r4, r3, #1
 8002a4a:	41a3      	sbcs	r3, r4
 8002a4c:	1ac4      	subs	r4, r0, r3
 8002a4e:	42a0      	cmp	r0, r4
 8002a50:	419b      	sbcs	r3, r3
 8002a52:	425b      	negs	r3, r3
 8002a54:	1afb      	subs	r3, r7, r3
 8002a56:	469a      	mov	sl, r3
 8002a58:	465d      	mov	r5, fp
 8002a5a:	0016      	movs	r6, r2
 8002a5c:	e5dc      	b.n	8002618 <__aeabi_dsub+0xb4>
 8002a5e:	4649      	mov	r1, r9
 8002a60:	4319      	orrs	r1, r3
 8002a62:	d100      	bne.n	8002a66 <__aeabi_dsub+0x502>
 8002a64:	e0ae      	b.n	8002bc4 <__aeabi_dsub+0x660>
 8002a66:	4661      	mov	r1, ip
 8002a68:	4664      	mov	r4, ip
 8002a6a:	3901      	subs	r1, #1
 8002a6c:	2c01      	cmp	r4, #1
 8002a6e:	d100      	bne.n	8002a72 <__aeabi_dsub+0x50e>
 8002a70:	e0e0      	b.n	8002c34 <__aeabi_dsub+0x6d0>
 8002a72:	4c77      	ldr	r4, [pc, #476]	; (8002c50 <__aeabi_dsub+0x6ec>)
 8002a74:	45a4      	cmp	ip, r4
 8002a76:	d056      	beq.n	8002b26 <__aeabi_dsub+0x5c2>
 8002a78:	468c      	mov	ip, r1
 8002a7a:	e69a      	b.n	80027b2 <__aeabi_dsub+0x24e>
 8002a7c:	4661      	mov	r1, ip
 8002a7e:	2220      	movs	r2, #32
 8002a80:	003c      	movs	r4, r7
 8002a82:	1a52      	subs	r2, r2, r1
 8002a84:	4094      	lsls	r4, r2
 8002a86:	0001      	movs	r1, r0
 8002a88:	4090      	lsls	r0, r2
 8002a8a:	46a0      	mov	r8, r4
 8002a8c:	4664      	mov	r4, ip
 8002a8e:	1e42      	subs	r2, r0, #1
 8002a90:	4190      	sbcs	r0, r2
 8002a92:	4662      	mov	r2, ip
 8002a94:	40e1      	lsrs	r1, r4
 8002a96:	4644      	mov	r4, r8
 8002a98:	40d7      	lsrs	r7, r2
 8002a9a:	430c      	orrs	r4, r1
 8002a9c:	4304      	orrs	r4, r0
 8002a9e:	44b9      	add	r9, r7
 8002aa0:	e701      	b.n	80028a6 <__aeabi_dsub+0x342>
 8002aa2:	496b      	ldr	r1, [pc, #428]	; (8002c50 <__aeabi_dsub+0x6ec>)
 8002aa4:	428a      	cmp	r2, r1
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x546>
 8002aa8:	e70c      	b.n	80028c4 <__aeabi_dsub+0x360>
 8002aaa:	1818      	adds	r0, r3, r0
 8002aac:	4298      	cmp	r0, r3
 8002aae:	419b      	sbcs	r3, r3
 8002ab0:	444f      	add	r7, r9
 8002ab2:	425b      	negs	r3, r3
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	07dc      	lsls	r4, r3, #31
 8002ab8:	0840      	lsrs	r0, r0, #1
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	469a      	mov	sl, r3
 8002abe:	0016      	movs	r6, r2
 8002ac0:	4304      	orrs	r4, r0
 8002ac2:	e6d9      	b.n	8002878 <__aeabi_dsub+0x314>
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d000      	beq.n	8002aca <__aeabi_dsub+0x566>
 8002ac8:	e081      	b.n	8002bce <__aeabi_dsub+0x66a>
 8002aca:	003b      	movs	r3, r7
 8002acc:	4303      	orrs	r3, r0
 8002ace:	d11d      	bne.n	8002b0c <__aeabi_dsub+0x5a8>
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	0312      	lsls	r2, r2, #12
 8002ad6:	e70b      	b.n	80028f0 <__aeabi_dsub+0x38c>
 8002ad8:	08c0      	lsrs	r0, r0, #3
 8002ada:	077b      	lsls	r3, r7, #29
 8002adc:	465d      	mov	r5, fp
 8002ade:	4303      	orrs	r3, r0
 8002ae0:	08fa      	lsrs	r2, r7, #3
 8002ae2:	e6d3      	b.n	800288c <__aeabi_dsub+0x328>
 8002ae4:	1ac4      	subs	r4, r0, r3
 8002ae6:	42a0      	cmp	r0, r4
 8002ae8:	4180      	sbcs	r0, r0
 8002aea:	464b      	mov	r3, r9
 8002aec:	4240      	negs	r0, r0
 8002aee:	1aff      	subs	r7, r7, r3
 8002af0:	1a3b      	subs	r3, r7, r0
 8002af2:	469a      	mov	sl, r3
 8002af4:	465d      	mov	r5, fp
 8002af6:	e597      	b.n	8002628 <__aeabi_dsub+0xc4>
 8002af8:	1a1c      	subs	r4, r3, r0
 8002afa:	464a      	mov	r2, r9
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	419b      	sbcs	r3, r3
 8002b00:	1bd7      	subs	r7, r2, r7
 8002b02:	425b      	negs	r3, r3
 8002b04:	1afb      	subs	r3, r7, r3
 8002b06:	469a      	mov	sl, r3
 8002b08:	2601      	movs	r6, #1
 8002b0a:	e585      	b.n	8002618 <__aeabi_dsub+0xb4>
 8002b0c:	08c0      	lsrs	r0, r0, #3
 8002b0e:	077b      	lsls	r3, r7, #29
 8002b10:	465d      	mov	r5, fp
 8002b12:	4303      	orrs	r3, r0
 8002b14:	08fa      	lsrs	r2, r7, #3
 8002b16:	e6e7      	b.n	80028e8 <__aeabi_dsub+0x384>
 8002b18:	464a      	mov	r2, r9
 8002b1a:	08db      	lsrs	r3, r3, #3
 8002b1c:	0752      	lsls	r2, r2, #29
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	464a      	mov	r2, r9
 8002b22:	08d2      	lsrs	r2, r2, #3
 8002b24:	e6b5      	b.n	8002892 <__aeabi_dsub+0x32e>
 8002b26:	08c0      	lsrs	r0, r0, #3
 8002b28:	077b      	lsls	r3, r7, #29
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	08fa      	lsrs	r2, r7, #3
 8002b2e:	e6db      	b.n	80028e8 <__aeabi_dsub+0x384>
 8002b30:	4649      	mov	r1, r9
 8002b32:	4319      	orrs	r1, r3
 8002b34:	000b      	movs	r3, r1
 8002b36:	1e59      	subs	r1, r3, #1
 8002b38:	418b      	sbcs	r3, r1
 8002b3a:	001c      	movs	r4, r3
 8002b3c:	e653      	b.n	80027e6 <__aeabi_dsub+0x282>
 8002b3e:	464d      	mov	r5, r9
 8002b40:	3c20      	subs	r4, #32
 8002b42:	40e5      	lsrs	r5, r4
 8002b44:	2920      	cmp	r1, #32
 8002b46:	d005      	beq.n	8002b54 <__aeabi_dsub+0x5f0>
 8002b48:	2440      	movs	r4, #64	; 0x40
 8002b4a:	1a64      	subs	r4, r4, r1
 8002b4c:	4649      	mov	r1, r9
 8002b4e:	40a1      	lsls	r1, r4
 8002b50:	430b      	orrs	r3, r1
 8002b52:	4698      	mov	r8, r3
 8002b54:	4643      	mov	r3, r8
 8002b56:	1e5c      	subs	r4, r3, #1
 8002b58:	41a3      	sbcs	r3, r4
 8002b5a:	432b      	orrs	r3, r5
 8002b5c:	e776      	b.n	8002a4c <__aeabi_dsub+0x4e8>
 8002b5e:	2a00      	cmp	r2, #0
 8002b60:	d0e1      	beq.n	8002b26 <__aeabi_dsub+0x5c2>
 8002b62:	003a      	movs	r2, r7
 8002b64:	08db      	lsrs	r3, r3, #3
 8002b66:	4302      	orrs	r2, r0
 8002b68:	d100      	bne.n	8002b6c <__aeabi_dsub+0x608>
 8002b6a:	e6b8      	b.n	80028de <__aeabi_dsub+0x37a>
 8002b6c:	464a      	mov	r2, r9
 8002b6e:	0752      	lsls	r2, r2, #29
 8002b70:	2480      	movs	r4, #128	; 0x80
 8002b72:	4313      	orrs	r3, r2
 8002b74:	464a      	mov	r2, r9
 8002b76:	0324      	lsls	r4, r4, #12
 8002b78:	08d2      	lsrs	r2, r2, #3
 8002b7a:	4222      	tst	r2, r4
 8002b7c:	d007      	beq.n	8002b8e <__aeabi_dsub+0x62a>
 8002b7e:	08fe      	lsrs	r6, r7, #3
 8002b80:	4226      	tst	r6, r4
 8002b82:	d104      	bne.n	8002b8e <__aeabi_dsub+0x62a>
 8002b84:	465d      	mov	r5, fp
 8002b86:	0032      	movs	r2, r6
 8002b88:	08c3      	lsrs	r3, r0, #3
 8002b8a:	077f      	lsls	r7, r7, #29
 8002b8c:	433b      	orrs	r3, r7
 8002b8e:	0f59      	lsrs	r1, r3, #29
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	0749      	lsls	r1, r1, #29
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	430b      	orrs	r3, r1
 8002b98:	e6a6      	b.n	80028e8 <__aeabi_dsub+0x384>
 8002b9a:	1ac4      	subs	r4, r0, r3
 8002b9c:	42a0      	cmp	r0, r4
 8002b9e:	4180      	sbcs	r0, r0
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	4240      	negs	r0, r0
 8002ba4:	1aff      	subs	r7, r7, r3
 8002ba6:	1a3b      	subs	r3, r7, r0
 8002ba8:	469a      	mov	sl, r3
 8002baa:	465d      	mov	r5, fp
 8002bac:	2601      	movs	r6, #1
 8002bae:	e533      	b.n	8002618 <__aeabi_dsub+0xb4>
 8002bb0:	003b      	movs	r3, r7
 8002bb2:	4303      	orrs	r3, r0
 8002bb4:	d100      	bne.n	8002bb8 <__aeabi_dsub+0x654>
 8002bb6:	e715      	b.n	80029e4 <__aeabi_dsub+0x480>
 8002bb8:	08c0      	lsrs	r0, r0, #3
 8002bba:	077b      	lsls	r3, r7, #29
 8002bbc:	465d      	mov	r5, fp
 8002bbe:	4303      	orrs	r3, r0
 8002bc0:	08fa      	lsrs	r2, r7, #3
 8002bc2:	e666      	b.n	8002892 <__aeabi_dsub+0x32e>
 8002bc4:	08c0      	lsrs	r0, r0, #3
 8002bc6:	077b      	lsls	r3, r7, #29
 8002bc8:	4303      	orrs	r3, r0
 8002bca:	08fa      	lsrs	r2, r7, #3
 8002bcc:	e65e      	b.n	800288c <__aeabi_dsub+0x328>
 8002bce:	003a      	movs	r2, r7
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	d100      	bne.n	8002bd8 <__aeabi_dsub+0x674>
 8002bd6:	e682      	b.n	80028de <__aeabi_dsub+0x37a>
 8002bd8:	464a      	mov	r2, r9
 8002bda:	0752      	lsls	r2, r2, #29
 8002bdc:	2480      	movs	r4, #128	; 0x80
 8002bde:	4313      	orrs	r3, r2
 8002be0:	464a      	mov	r2, r9
 8002be2:	0324      	lsls	r4, r4, #12
 8002be4:	08d2      	lsrs	r2, r2, #3
 8002be6:	4222      	tst	r2, r4
 8002be8:	d007      	beq.n	8002bfa <__aeabi_dsub+0x696>
 8002bea:	08fe      	lsrs	r6, r7, #3
 8002bec:	4226      	tst	r6, r4
 8002bee:	d104      	bne.n	8002bfa <__aeabi_dsub+0x696>
 8002bf0:	465d      	mov	r5, fp
 8002bf2:	0032      	movs	r2, r6
 8002bf4:	08c3      	lsrs	r3, r0, #3
 8002bf6:	077f      	lsls	r7, r7, #29
 8002bf8:	433b      	orrs	r3, r7
 8002bfa:	0f59      	lsrs	r1, r3, #29
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	08db      	lsrs	r3, r3, #3
 8002c00:	0749      	lsls	r1, r1, #29
 8002c02:	430b      	orrs	r3, r1
 8002c04:	e670      	b.n	80028e8 <__aeabi_dsub+0x384>
 8002c06:	08c0      	lsrs	r0, r0, #3
 8002c08:	077b      	lsls	r3, r7, #29
 8002c0a:	4303      	orrs	r3, r0
 8002c0c:	08fa      	lsrs	r2, r7, #3
 8002c0e:	e640      	b.n	8002892 <__aeabi_dsub+0x32e>
 8002c10:	464c      	mov	r4, r9
 8002c12:	3920      	subs	r1, #32
 8002c14:	40cc      	lsrs	r4, r1
 8002c16:	4661      	mov	r1, ip
 8002c18:	2920      	cmp	r1, #32
 8002c1a:	d006      	beq.n	8002c2a <__aeabi_dsub+0x6c6>
 8002c1c:	4666      	mov	r6, ip
 8002c1e:	2140      	movs	r1, #64	; 0x40
 8002c20:	1b89      	subs	r1, r1, r6
 8002c22:	464e      	mov	r6, r9
 8002c24:	408e      	lsls	r6, r1
 8002c26:	4333      	orrs	r3, r6
 8002c28:	4698      	mov	r8, r3
 8002c2a:	4643      	mov	r3, r8
 8002c2c:	1e59      	subs	r1, r3, #1
 8002c2e:	418b      	sbcs	r3, r1
 8002c30:	431c      	orrs	r4, r3
 8002c32:	e5d8      	b.n	80027e6 <__aeabi_dsub+0x282>
 8002c34:	181c      	adds	r4, r3, r0
 8002c36:	4284      	cmp	r4, r0
 8002c38:	4180      	sbcs	r0, r0
 8002c3a:	444f      	add	r7, r9
 8002c3c:	46ba      	mov	sl, r7
 8002c3e:	4240      	negs	r0, r0
 8002c40:	4482      	add	sl, r0
 8002c42:	e6d9      	b.n	80029f8 <__aeabi_dsub+0x494>
 8002c44:	4653      	mov	r3, sl
 8002c46:	4323      	orrs	r3, r4
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x6e8>
 8002c4a:	e6cb      	b.n	80029e4 <__aeabi_dsub+0x480>
 8002c4c:	e614      	b.n	8002878 <__aeabi_dsub+0x314>
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	000007ff 	.word	0x000007ff
 8002c54:	ff7fffff 	.word	0xff7fffff
 8002c58:	000007fe 	.word	0x000007fe
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4a01      	ldr	r2, [pc, #4]	; (8002c64 <__aeabi_dsub+0x700>)
 8002c60:	001c      	movs	r4, r3
 8002c62:	e529      	b.n	80026b8 <__aeabi_dsub+0x154>
 8002c64:	000007ff 	.word	0x000007ff

08002c68 <__aeabi_dcmpun>:
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	0005      	movs	r5, r0
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <__aeabi_dcmpun+0x38>)
 8002c6e:	031c      	lsls	r4, r3, #12
 8002c70:	0016      	movs	r6, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	030a      	lsls	r2, r1, #12
 8002c76:	0049      	lsls	r1, r1, #1
 8002c78:	0b12      	lsrs	r2, r2, #12
 8002c7a:	0d49      	lsrs	r1, r1, #21
 8002c7c:	0b24      	lsrs	r4, r4, #12
 8002c7e:	0d5b      	lsrs	r3, r3, #21
 8002c80:	4281      	cmp	r1, r0
 8002c82:	d008      	beq.n	8002c96 <__aeabi_dcmpun+0x2e>
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <__aeabi_dcmpun+0x38>)
 8002c86:	2000      	movs	r0, #0
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <__aeabi_dcmpun+0x2c>
 8002c8c:	0020      	movs	r0, r4
 8002c8e:	4330      	orrs	r0, r6
 8002c90:	1e43      	subs	r3, r0, #1
 8002c92:	4198      	sbcs	r0, r3
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	2001      	movs	r0, #1
 8002c98:	432a      	orrs	r2, r5
 8002c9a:	d1fb      	bne.n	8002c94 <__aeabi_dcmpun+0x2c>
 8002c9c:	e7f2      	b.n	8002c84 <__aeabi_dcmpun+0x1c>
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	000007ff 	.word	0x000007ff

08002ca4 <__aeabi_d2iz>:
 8002ca4:	000a      	movs	r2, r1
 8002ca6:	b530      	push	{r4, r5, lr}
 8002ca8:	4c13      	ldr	r4, [pc, #76]	; (8002cf8 <__aeabi_d2iz+0x54>)
 8002caa:	0053      	lsls	r3, r2, #1
 8002cac:	0309      	lsls	r1, r1, #12
 8002cae:	0005      	movs	r5, r0
 8002cb0:	0b09      	lsrs	r1, r1, #12
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	0d5b      	lsrs	r3, r3, #21
 8002cb6:	0fd2      	lsrs	r2, r2, #31
 8002cb8:	42a3      	cmp	r3, r4
 8002cba:	dd04      	ble.n	8002cc6 <__aeabi_d2iz+0x22>
 8002cbc:	480f      	ldr	r0, [pc, #60]	; (8002cfc <__aeabi_d2iz+0x58>)
 8002cbe:	4283      	cmp	r3, r0
 8002cc0:	dd02      	ble.n	8002cc8 <__aeabi_d2iz+0x24>
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <__aeabi_d2iz+0x5c>)
 8002cc4:	18d0      	adds	r0, r2, r3
 8002cc6:	bd30      	pop	{r4, r5, pc}
 8002cc8:	2080      	movs	r0, #128	; 0x80
 8002cca:	0340      	lsls	r0, r0, #13
 8002ccc:	4301      	orrs	r1, r0
 8002cce:	480d      	ldr	r0, [pc, #52]	; (8002d04 <__aeabi_d2iz+0x60>)
 8002cd0:	1ac0      	subs	r0, r0, r3
 8002cd2:	281f      	cmp	r0, #31
 8002cd4:	dd08      	ble.n	8002ce8 <__aeabi_d2iz+0x44>
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <__aeabi_d2iz+0x64>)
 8002cd8:	1ac3      	subs	r3, r0, r3
 8002cda:	40d9      	lsrs	r1, r3
 8002cdc:	000b      	movs	r3, r1
 8002cde:	4258      	negs	r0, r3
 8002ce0:	2a00      	cmp	r2, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <__aeabi_d2iz+0x22>
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	e7ee      	b.n	8002cc6 <__aeabi_d2iz+0x22>
 8002ce8:	4c08      	ldr	r4, [pc, #32]	; (8002d0c <__aeabi_d2iz+0x68>)
 8002cea:	40c5      	lsrs	r5, r0
 8002cec:	46a4      	mov	ip, r4
 8002cee:	4463      	add	r3, ip
 8002cf0:	4099      	lsls	r1, r3
 8002cf2:	000b      	movs	r3, r1
 8002cf4:	432b      	orrs	r3, r5
 8002cf6:	e7f2      	b.n	8002cde <__aeabi_d2iz+0x3a>
 8002cf8:	000003fe 	.word	0x000003fe
 8002cfc:	0000041d 	.word	0x0000041d
 8002d00:	7fffffff 	.word	0x7fffffff
 8002d04:	00000433 	.word	0x00000433
 8002d08:	00000413 	.word	0x00000413
 8002d0c:	fffffbed 	.word	0xfffffbed

08002d10 <__aeabi_i2d>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	2800      	cmp	r0, #0
 8002d14:	d016      	beq.n	8002d44 <__aeabi_i2d+0x34>
 8002d16:	17c3      	asrs	r3, r0, #31
 8002d18:	18c5      	adds	r5, r0, r3
 8002d1a:	405d      	eors	r5, r3
 8002d1c:	0fc4      	lsrs	r4, r0, #31
 8002d1e:	0028      	movs	r0, r5
 8002d20:	f000 f894 	bl	8002e4c <__clzsi2>
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <__aeabi_i2d+0x5c>)
 8002d26:	1a1b      	subs	r3, r3, r0
 8002d28:	280a      	cmp	r0, #10
 8002d2a:	dc16      	bgt.n	8002d5a <__aeabi_i2d+0x4a>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	002e      	movs	r6, r5
 8002d30:	3215      	adds	r2, #21
 8002d32:	4096      	lsls	r6, r2
 8002d34:	220b      	movs	r2, #11
 8002d36:	1a12      	subs	r2, r2, r0
 8002d38:	40d5      	lsrs	r5, r2
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	032d      	lsls	r5, r5, #12
 8002d3e:	0b2d      	lsrs	r5, r5, #12
 8002d40:	0d5b      	lsrs	r3, r3, #21
 8002d42:	e003      	b.n	8002d4c <__aeabi_i2d+0x3c>
 8002d44:	2400      	movs	r4, #0
 8002d46:	2300      	movs	r3, #0
 8002d48:	2500      	movs	r5, #0
 8002d4a:	2600      	movs	r6, #0
 8002d4c:	051b      	lsls	r3, r3, #20
 8002d4e:	432b      	orrs	r3, r5
 8002d50:	07e4      	lsls	r4, r4, #31
 8002d52:	4323      	orrs	r3, r4
 8002d54:	0030      	movs	r0, r6
 8002d56:	0019      	movs	r1, r3
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
 8002d5a:	380b      	subs	r0, #11
 8002d5c:	4085      	lsls	r5, r0
 8002d5e:	055b      	lsls	r3, r3, #21
 8002d60:	032d      	lsls	r5, r5, #12
 8002d62:	2600      	movs	r6, #0
 8002d64:	0b2d      	lsrs	r5, r5, #12
 8002d66:	0d5b      	lsrs	r3, r3, #21
 8002d68:	e7f0      	b.n	8002d4c <__aeabi_i2d+0x3c>
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	0000041e 	.word	0x0000041e

08002d70 <__aeabi_ui2d>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	1e04      	subs	r4, r0, #0
 8002d74:	d010      	beq.n	8002d98 <__aeabi_ui2d+0x28>
 8002d76:	f000 f869 	bl	8002e4c <__clzsi2>
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <__aeabi_ui2d+0x48>)
 8002d7c:	1a1b      	subs	r3, r3, r0
 8002d7e:	280a      	cmp	r0, #10
 8002d80:	dc11      	bgt.n	8002da6 <__aeabi_ui2d+0x36>
 8002d82:	220b      	movs	r2, #11
 8002d84:	0021      	movs	r1, r4
 8002d86:	1a12      	subs	r2, r2, r0
 8002d88:	40d1      	lsrs	r1, r2
 8002d8a:	3015      	adds	r0, #21
 8002d8c:	030a      	lsls	r2, r1, #12
 8002d8e:	055b      	lsls	r3, r3, #21
 8002d90:	4084      	lsls	r4, r0
 8002d92:	0b12      	lsrs	r2, r2, #12
 8002d94:	0d5b      	lsrs	r3, r3, #21
 8002d96:	e001      	b.n	8002d9c <__aeabi_ui2d+0x2c>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	051b      	lsls	r3, r3, #20
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	0020      	movs	r0, r4
 8002da2:	0019      	movs	r1, r3
 8002da4:	bd10      	pop	{r4, pc}
 8002da6:	0022      	movs	r2, r4
 8002da8:	380b      	subs	r0, #11
 8002daa:	4082      	lsls	r2, r0
 8002dac:	055b      	lsls	r3, r3, #21
 8002dae:	0312      	lsls	r2, r2, #12
 8002db0:	2400      	movs	r4, #0
 8002db2:	0b12      	lsrs	r2, r2, #12
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	e7f1      	b.n	8002d9c <__aeabi_ui2d+0x2c>
 8002db8:	0000041e 	.word	0x0000041e

08002dbc <__aeabi_f2d>:
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	0242      	lsls	r2, r0, #9
 8002dc0:	0043      	lsls	r3, r0, #1
 8002dc2:	0fc4      	lsrs	r4, r0, #31
 8002dc4:	20fe      	movs	r0, #254	; 0xfe
 8002dc6:	0e1b      	lsrs	r3, r3, #24
 8002dc8:	1c59      	adds	r1, r3, #1
 8002dca:	0a55      	lsrs	r5, r2, #9
 8002dcc:	4208      	tst	r0, r1
 8002dce:	d00c      	beq.n	8002dea <__aeabi_f2d+0x2e>
 8002dd0:	21e0      	movs	r1, #224	; 0xe0
 8002dd2:	0089      	lsls	r1, r1, #2
 8002dd4:	468c      	mov	ip, r1
 8002dd6:	076d      	lsls	r5, r5, #29
 8002dd8:	0b12      	lsrs	r2, r2, #12
 8002dda:	4463      	add	r3, ip
 8002ddc:	051b      	lsls	r3, r3, #20
 8002dde:	4313      	orrs	r3, r2
 8002de0:	07e4      	lsls	r4, r4, #31
 8002de2:	4323      	orrs	r3, r4
 8002de4:	0028      	movs	r0, r5
 8002de6:	0019      	movs	r1, r3
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d114      	bne.n	8002e18 <__aeabi_f2d+0x5c>
 8002dee:	2d00      	cmp	r5, #0
 8002df0:	d01b      	beq.n	8002e2a <__aeabi_f2d+0x6e>
 8002df2:	0028      	movs	r0, r5
 8002df4:	f000 f82a 	bl	8002e4c <__clzsi2>
 8002df8:	280a      	cmp	r0, #10
 8002dfa:	dc1c      	bgt.n	8002e36 <__aeabi_f2d+0x7a>
 8002dfc:	230b      	movs	r3, #11
 8002dfe:	002a      	movs	r2, r5
 8002e00:	1a1b      	subs	r3, r3, r0
 8002e02:	40da      	lsrs	r2, r3
 8002e04:	0003      	movs	r3, r0
 8002e06:	3315      	adds	r3, #21
 8002e08:	409d      	lsls	r5, r3
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <__aeabi_f2d+0x88>)
 8002e0c:	0312      	lsls	r2, r2, #12
 8002e0e:	1a1b      	subs	r3, r3, r0
 8002e10:	055b      	lsls	r3, r3, #21
 8002e12:	0b12      	lsrs	r2, r2, #12
 8002e14:	0d5b      	lsrs	r3, r3, #21
 8002e16:	e7e1      	b.n	8002ddc <__aeabi_f2d+0x20>
 8002e18:	2d00      	cmp	r5, #0
 8002e1a:	d009      	beq.n	8002e30 <__aeabi_f2d+0x74>
 8002e1c:	0b13      	lsrs	r3, r2, #12
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	0312      	lsls	r2, r2, #12
 8002e22:	431a      	orrs	r2, r3
 8002e24:	076d      	lsls	r5, r5, #29
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <__aeabi_f2d+0x8c>)
 8002e28:	e7d8      	b.n	8002ddc <__aeabi_f2d+0x20>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	e7d5      	b.n	8002ddc <__aeabi_f2d+0x20>
 8002e30:	2200      	movs	r2, #0
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <__aeabi_f2d+0x8c>)
 8002e34:	e7d2      	b.n	8002ddc <__aeabi_f2d+0x20>
 8002e36:	0003      	movs	r3, r0
 8002e38:	002a      	movs	r2, r5
 8002e3a:	3b0b      	subs	r3, #11
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	2500      	movs	r5, #0
 8002e40:	e7e3      	b.n	8002e0a <__aeabi_f2d+0x4e>
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	00000389 	.word	0x00000389
 8002e48:	000007ff 	.word	0x000007ff

08002e4c <__clzsi2>:
 8002e4c:	211c      	movs	r1, #28
 8002e4e:	2301      	movs	r3, #1
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	4298      	cmp	r0, r3
 8002e54:	d301      	bcc.n	8002e5a <__clzsi2+0xe>
 8002e56:	0c00      	lsrs	r0, r0, #16
 8002e58:	3910      	subs	r1, #16
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	4298      	cmp	r0, r3
 8002e5e:	d301      	bcc.n	8002e64 <__clzsi2+0x18>
 8002e60:	0a00      	lsrs	r0, r0, #8
 8002e62:	3908      	subs	r1, #8
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	4298      	cmp	r0, r3
 8002e68:	d301      	bcc.n	8002e6e <__clzsi2+0x22>
 8002e6a:	0900      	lsrs	r0, r0, #4
 8002e6c:	3904      	subs	r1, #4
 8002e6e:	a202      	add	r2, pc, #8	; (adr r2, 8002e78 <__clzsi2+0x2c>)
 8002e70:	5c10      	ldrb	r0, [r2, r0]
 8002e72:	1840      	adds	r0, r0, r1
 8002e74:	4770      	bx	lr
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	02020304 	.word	0x02020304
 8002e7c:	01010101 	.word	0x01010101
	...

08002e88 <max31855_init>:

/*
 * init Function of handle for MAX31855
 */
HAL_StatusTypeDef max31855_init(MAX31855_HandleTypeDef_t* hmax31855, SPI_HandleTypeDef* hspi)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    hmax31855->hspi = hspi;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	601a      	str	r2, [r3, #0]
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	015b      	lsls	r3, r3, #5
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <max31855_init+0x28>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	f002 fb1e 	bl	80054e2 <HAL_GPIO_WritePin>
    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b002      	add	sp, #8
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	48000400 	.word	0x48000400

08002eb4 <max31855_update_payload>:

/*
 * updates payload struct fields with values just read
 */
static HAL_StatusTypeDef max31855_update_payload(MAX31855_HandleTypeDef_t *hmax31855) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
    if (NULL == hmax31855) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <max31855_update_payload+0x12>
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0b1      	b.n	800302a <max31855_update_payload+0x176>
    }

    // Extract the raw 32-bit data from the 4-byte array
    uint32_t raw_data = ((uint32_t)hmax31855->raw_payload[0] << 24) |
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	061a      	lsls	r2, r3, #24
                        ((uint32_t)hmax31855->raw_payload[1] << 16) |
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	795b      	ldrb	r3, [r3, #5]
 8002ed0:	041b      	lsls	r3, r3, #16
    uint32_t raw_data = ((uint32_t)hmax31855->raw_payload[0] << 24) |
 8002ed2:	431a      	orrs	r2, r3
                        ((uint32_t)hmax31855->raw_payload[2] << 8) |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	021b      	lsls	r3, r3, #8
                        ((uint32_t)hmax31855->raw_payload[1] << 16) |
 8002eda:	4313      	orrs	r3, r2
                        (uint32_t)hmax31855->raw_payload[3];
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	79d2      	ldrb	r2, [r2, #7]
    uint32_t raw_data = ((uint32_t)hmax31855->raw_payload[0] << 24) |
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    // Extract individual fields using bitwise AND and right shifts
    hmax31855->payload.therm_temp_sign = (raw_data >> 31) & 0x01;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	0fdb      	lsrs	r3, r3, #31
 8002ee8:	1c1a      	adds	r2, r3, #0
 8002eea:	2301      	movs	r3, #1
 8002eec:	4013      	ands	r3, r2
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	0010      	movs	r0, r2
 8002ef8:	7a1a      	ldrb	r2, [r3, #8]
 8002efa:	2101      	movs	r1, #1
 8002efc:	438a      	bics	r2, r1
 8002efe:	1c11      	adds	r1, r2, #0
 8002f00:	1c02      	adds	r2, r0, #0
 8002f02:	430a      	orrs	r2, r1
 8002f04:	721a      	strb	r2, [r3, #8]
    hmax31855->payload.therm_temp_value = (raw_data >> 20) & 0x7FF;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0d1b      	lsrs	r3, r3, #20
 8002f0a:	055b      	lsls	r3, r3, #21
 8002f0c:	0d5b      	lsrs	r3, r3, #21
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0552      	lsls	r2, r2, #21
 8002f14:	0d52      	lsrs	r2, r2, #21
 8002f16:	1890      	adds	r0, r2, r2
 8002f18:	891a      	ldrh	r2, [r3, #8]
 8002f1a:	4946      	ldr	r1, [pc, #280]	; (8003034 <max31855_update_payload+0x180>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	1c11      	adds	r1, r2, #0
 8002f20:	1c02      	adds	r2, r0, #0
 8002f22:	430a      	orrs	r2, r1
 8002f24:	811a      	strh	r2, [r3, #8]
    hmax31855->payload.therm_temp_fractual_value = (raw_data >> 18) & 0x03;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	1c1a      	adds	r2, r3, #0
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	4013      	ands	r3, r2
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2103      	movs	r1, #3
 8002f36:	400a      	ands	r2, r1
 8002f38:	0110      	lsls	r0, r2, #4
 8002f3a:	7a5a      	ldrb	r2, [r3, #9]
 8002f3c:	2130      	movs	r1, #48	; 0x30
 8002f3e:	438a      	bics	r2, r1
 8002f40:	1c11      	adds	r1, r2, #0
 8002f42:	1c02      	adds	r2, r0, #0
 8002f44:	430a      	orrs	r2, r1
 8002f46:	725a      	strb	r2, [r3, #9]
    hmax31855->payload.fault = (raw_data >> 16) & 0x01;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	1c1a      	adds	r2, r3, #0
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	01d0      	lsls	r0, r2, #7
 8002f58:	7a5a      	ldrb	r2, [r3, #9]
 8002f5a:	217f      	movs	r1, #127	; 0x7f
 8002f5c:	400a      	ands	r2, r1
 8002f5e:	1c11      	adds	r1, r2, #0
 8002f60:	1c02      	adds	r2, r0, #0
 8002f62:	430a      	orrs	r2, r1
 8002f64:	725a      	strb	r2, [r3, #9]
    hmax31855->payload.int_temp_sign = (raw_data >> 15) & 0x01;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	0bdb      	lsrs	r3, r3, #15
 8002f6a:	1c1a      	adds	r2, r3, #0
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2101      	movs	r1, #1
 8002f76:	400a      	ands	r2, r1
 8002f78:	0010      	movs	r0, r2
 8002f7a:	7a9a      	ldrb	r2, [r3, #10]
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	438a      	bics	r2, r1
 8002f80:	1c11      	adds	r1, r2, #0
 8002f82:	1c02      	adds	r2, r0, #0
 8002f84:	430a      	orrs	r2, r1
 8002f86:	729a      	strb	r2, [r3, #10]
    hmax31855->payload.int_temp_value = (raw_data >> 8) & 0x7F;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	1c1a      	adds	r2, r3, #0
 8002f8e:	237f      	movs	r3, #127	; 0x7f
 8002f90:	4013      	ands	r3, r2
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1890      	adds	r0, r2, r2
 8002f98:	7a9a      	ldrb	r2, [r3, #10]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	1c11      	adds	r1, r2, #0
 8002fa0:	1c02      	adds	r2, r0, #0
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	729a      	strb	r2, [r3, #10]
    hmax31855->payload.int_temp_fractual_value = (raw_data >> 4) & 0x0F;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	1c1a      	adds	r2, r3, #0
 8002fac:	230f      	movs	r3, #15
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	0010      	movs	r0, r2
 8002fba:	7ada      	ldrb	r2, [r3, #11]
 8002fbc:	210f      	movs	r1, #15
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	1c11      	adds	r1, r2, #0
 8002fc2:	1c02      	adds	r2, r0, #0
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	72da      	strb	r2, [r3, #11]
    hmax31855->payload.scv_fault = (raw_data >> 2) & 0x01;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	1c1a      	adds	r2, r3, #0
 8002fce:	2301      	movs	r3, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	400a      	ands	r2, r1
 8002fda:	0150      	lsls	r0, r2, #5
 8002fdc:	7ada      	ldrb	r2, [r3, #11]
 8002fde:	2120      	movs	r1, #32
 8002fe0:	438a      	bics	r2, r1
 8002fe2:	1c11      	adds	r1, r2, #0
 8002fe4:	1c02      	adds	r2, r0, #0
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	72da      	strb	r2, [r3, #11]
    hmax31855->payload.scg_fault = (raw_data >> 1) & 0x01;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	085b      	lsrs	r3, r3, #1
 8002fee:	1c1a      	adds	r2, r3, #0
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	0190      	lsls	r0, r2, #6
 8002ffe:	7ada      	ldrb	r2, [r3, #11]
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	438a      	bics	r2, r1
 8003004:	1c11      	adds	r1, r2, #0
 8003006:	1c02      	adds	r2, r0, #0
 8003008:	430a      	orrs	r2, r1
 800300a:	72da      	strb	r2, [r3, #11]
    hmax31855->payload.oc_fault = raw_data & 0x01;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	1c1a      	adds	r2, r3, #0
 8003010:	2301      	movs	r3, #1
 8003012:	4013      	ands	r3, r2
 8003014:	b2da      	uxtb	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	01d0      	lsls	r0, r2, #7
 800301a:	7ada      	ldrb	r2, [r3, #11]
 800301c:	217f      	movs	r1, #127	; 0x7f
 800301e:	400a      	ands	r2, r1
 8003020:	1c11      	adds	r1, r2, #0
 8003022:	1c02      	adds	r2, r0, #0
 8003024:	430a      	orrs	r2, r1
 8003026:	72da      	strb	r2, [r3, #11]
    return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b004      	add	sp, #16
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	fffff001 	.word	0xfffff001

08003038 <max31855_read_data>:

/*
 * reads and updates data through SPi from MAX31855
 */
HAL_StatusTypeDef max31855_read_data(MAX31855_HandleTypeDef_t *hmax31855)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    if (NULL == hmax31855)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <max31855_read_data+0x12>
        {
            return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e02a      	b.n	80030a0 <max31855_read_data+0x68>
        }

    if (NULL == &hmax31855->hspi)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <max31855_read_data+0x1c>
        {
            return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e025      	b.n	80030a0 <max31855_read_data+0x68>
        }
    //TODO: non blocking implementation (DMA?)
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	4813      	ldr	r0, [pc, #76]	; (80030a8 <max31855_read_data+0x70>)
 800305a:	2200      	movs	r2, #0
 800305c:	0019      	movs	r1, r3
 800305e:	f002 fa40 	bl	80054e2 <HAL_GPIO_WritePin>
    if (HAL_SPI_Receive(hmax31855->hspi, hmax31855->raw_payload,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	1d19      	adds	r1, r3, #4
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <max31855_read_data+0x74>)
 800306c:	2204      	movs	r2, #4
 800306e:	f004 f955 	bl	800731c <HAL_SPI_Receive>
 8003072:	1e03      	subs	r3, r0, #0
 8003074:	d008      	beq.n	8003088 <max31855_read_data+0x50>
            MAX31855_PAYLOAD_LENGTH/8, MAX31855_TIMEOUT) != HAL_OK)
        {
            HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	015b      	lsls	r3, r3, #5
 800307a:	480b      	ldr	r0, [pc, #44]	; (80030a8 <max31855_read_data+0x70>)
 800307c:	2201      	movs	r2, #1
 800307e:	0019      	movs	r1, r3
 8003080:	f002 fa2f 	bl	80054e2 <HAL_GPIO_WritePin>
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e00b      	b.n	80030a0 <max31855_read_data+0x68>
        }
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	015b      	lsls	r3, r3, #5
 800308c:	4806      	ldr	r0, [pc, #24]	; (80030a8 <max31855_read_data+0x70>)
 800308e:	2201      	movs	r2, #1
 8003090:	0019      	movs	r1, r3
 8003092:	f002 fa26 	bl	80054e2 <HAL_GPIO_WritePin>

    return max31855_update_payload(hmax31855);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff ff0b 	bl	8002eb4 <max31855_update_payload>
 800309e:	0003      	movs	r3, r0

}
 80030a0:	0018      	movs	r0, r3
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b002      	add	sp, #8
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	48000400 	.word	0x48000400
 80030ac:	000f4240 	.word	0x000f4240

080030b0 <max31855_get_temp_sign>:
 * Returns sign of last read value from MAX31855.
 * 1 = negative, 0 = positive
 * Call  max31855_read_data() first to get an up to date value.
 */
uint16_t max31855_get_temp_sign(MAX31855_HandleTypeDef_t *hmax31855)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
    return hmax31855->payload.therm_temp_sign;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7a1b      	ldrb	r3, [r3, #8]
 80030bc:	07db      	lsls	r3, r3, #31
 80030be:	0fdb      	lsrs	r3, r3, #31
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	b29b      	uxth	r3, r3
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <max31855_get_temp_val>:
 * Returns unsigned value of last read value from MAX31855.
 * Check sign with max31855_get_temp_sign().
 * Call  max31855_read_data() first to get an up to date value.
 */
uint16_t max31855_get_temp_val(MAX31855_HandleTypeDef_t *hmax31855)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    if(0 == hmax31855->payload.therm_temp_sign)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7a1b      	ldrb	r3, [r3, #8]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d105      	bne.n	80030ee <max31855_get_temp_val+0x22>
    {
        return hmax31855->payload.therm_temp_value;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	891b      	ldrh	r3, [r3, #8]
 80030e6:	051b      	lsls	r3, r3, #20
 80030e8:	0d5b      	lsrs	r3, r3, #21
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	e006      	b.n	80030fc <max31855_get_temp_val+0x30>
    }

    return (~(hmax31855->payload.therm_temp_value) + 1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	891b      	ldrh	r3, [r3, #8]
 80030f2:	051b      	lsls	r3, r3, #20
 80030f4:	0d5b      	lsrs	r3, r3, #21
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	425b      	negs	r3, r3
 80030fa:	b29b      	uxth	r3, r3
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}

08003104 <max31855_get_temp_f32>:
/*
 * Returns float32_t of last read value from MAX31855.
 * Call  max31855_read_data() first to get an up to date value.
 */
float32_t max31855_get_temp_f32(MAX31855_HandleTypeDef_t *hmax31855)
{
 8003104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
        uint16_t temp_sign = max31855_get_temp_sign(hmax31855);
 800310c:	250e      	movs	r5, #14
 800310e:	197c      	adds	r4, r7, r5
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	0018      	movs	r0, r3
 8003114:	f7ff ffcc 	bl	80030b0 <max31855_get_temp_sign>
 8003118:	0003      	movs	r3, r0
 800311a:	8023      	strh	r3, [r4, #0]

        uint16_t temp_val = max31855_get_temp_val(hmax31855);
 800311c:	260c      	movs	r6, #12
 800311e:	19bc      	adds	r4, r7, r6
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	0018      	movs	r0, r3
 8003124:	f7ff ffd2 	bl	80030cc <max31855_get_temp_val>
 8003128:	0003      	movs	r3, r0
 800312a:	8023      	strh	r3, [r4, #0]

        float32_t temp_frac = hmax31855->payload.therm_temp_fractual_value * 0.25f;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7a5b      	ldrb	r3, [r3, #9]
 8003130:	069b      	lsls	r3, r3, #26
 8003132:	0f9b      	lsrs	r3, r3, #30
 8003134:	b2db      	uxtb	r3, r3
 8003136:	0018      	movs	r0, r3
 8003138:	f7fd ff5e 	bl	8000ff8 <__aeabi_i2f>
 800313c:	1c03      	adds	r3, r0, #0
 800313e:	21fa      	movs	r1, #250	; 0xfa
 8003140:	0589      	lsls	r1, r1, #22
 8003142:	1c18      	adds	r0, r3, #0
 8003144:	f7fd fc6a 	bl	8000a1c <__aeabi_fmul>
 8003148:	1c03      	adds	r3, r0, #0
 800314a:	60bb      	str	r3, [r7, #8]

        if (1 == temp_sign) {
 800314c:	197b      	adds	r3, r7, r5
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d10f      	bne.n	8003174 <max31855_get_temp_f32+0x70>
            return -((float32_t)temp_val + temp_frac);
 8003154:	19bb      	adds	r3, r7, r6
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	0018      	movs	r0, r3
 800315a:	f7fd ff9f 	bl	800109c <__aeabi_ui2f>
 800315e:	1c03      	adds	r3, r0, #0
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	1c18      	adds	r0, r3, #0
 8003164:	f7fd f9a0 	bl	80004a8 <__aeabi_fadd>
 8003168:	1c03      	adds	r3, r0, #0
 800316a:	1c1a      	adds	r2, r3, #0
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	061b      	lsls	r3, r3, #24
 8003170:	4053      	eors	r3, r2
 8003172:	e00b      	b.n	800318c <max31855_get_temp_f32+0x88>
        } else {
            return (float32_t)temp_val + temp_frac;
 8003174:	230c      	movs	r3, #12
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	0018      	movs	r0, r3
 800317c:	f7fd ff8e 	bl	800109c <__aeabi_ui2f>
 8003180:	1c03      	adds	r3, r0, #0
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	1c18      	adds	r0, r3, #0
 8003186:	f7fd f98f 	bl	80004a8 <__aeabi_fadd>
 800318a:	1c03      	adds	r3, r0, #0
        }
}
 800318c:	1c18      	adds	r0, r3, #0
 800318e:	46bd      	mov	sp, r7
 8003190:	b005      	add	sp, #20
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003194 <init_Encoder>:
// Function prototypes
static void update_position(Encoder_HandleTypeDef_t *hencoder, uint8_t direction);

HAL_StatusTypeDef init_Encoder(Encoder_HandleTypeDef_t* hencoder, Event_Queue_HandleTypeDef_t *queue, GPIO_TypeDef* port_a, uint16_t pin_a,
                               GPIO_TypeDef* port_b, uint16_t pin_b, GPIO_TypeDef* port_button, uint16_t pin_button)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	001a      	movs	r2, r3
 80031a2:	1cbb      	adds	r3, r7, #2
 80031a4:	801a      	strh	r2, [r3, #0]
    // Initialize encoder struct
    hencoder->port_a = port_a;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	601a      	str	r2, [r3, #0]
    hencoder->pin_a = pin_a;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1cba      	adds	r2, r7, #2
 80031b0:	8812      	ldrh	r2, [r2, #0]
 80031b2:	809a      	strh	r2, [r3, #4]
    hencoder->port_b = port_b;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]
    hencoder->pin_b = pin_b;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	221c      	movs	r2, #28
 80031be:	18ba      	adds	r2, r7, r2
 80031c0:	8812      	ldrh	r2, [r2, #0]
 80031c2:	819a      	strh	r2, [r3, #12]
    hencoder->port_button = port_button;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a3a      	ldr	r2, [r7, #32]
 80031c8:	611a      	str	r2, [r3, #16]
    hencoder->pin_button = pin_button;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2224      	movs	r2, #36	; 0x24
 80031ce:	18ba      	adds	r2, r7, r2
 80031d0:	8812      	ldrh	r2, [r2, #0]
 80031d2:	829a      	strh	r2, [r3, #20]

    hencoder->direction = 0;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	771a      	strb	r2, [r3, #28]
    hencoder->position = 0;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
    hencoder->queue = queue;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	619a      	str	r2, [r3, #24]


    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b004      	add	sp, #16
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <encoder_callback>:
/*
 * gets called in callback for a,b and button, updates the position and direction of the encoder struct
 */
void encoder_callback(Encoder_HandleTypeDef_t* hencoder, uint16_t pin)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	000a      	movs	r2, r1
 80031fa:	1cbb      	adds	r3, r7, #2
 80031fc:	801a      	strh	r2, [r3, #0]
    // Determine which pin triggered the interrupt
    if (pin == 0xff)
 80031fe:	1cbb      	adds	r3, r7, #2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	2bff      	cmp	r3, #255	; 0xff
 8003204:	d12a      	bne.n	800325c <encoder_callback+0x6c>
    {
        // Read the state of both pins
        uint8_t state_a = HAL_GPIO_ReadPin(hencoder->port_a, hencoder->pin_a);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	889b      	ldrh	r3, [r3, #4]
 800320e:	250f      	movs	r5, #15
 8003210:	197c      	adds	r4, r7, r5
 8003212:	0019      	movs	r1, r3
 8003214:	0010      	movs	r0, r2
 8003216:	f002 f947 	bl	80054a8 <HAL_GPIO_ReadPin>
 800321a:	0003      	movs	r3, r0
 800321c:	7023      	strb	r3, [r4, #0]
        uint8_t state_b = HAL_GPIO_ReadPin(hencoder->port_b, hencoder->pin_b);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	899b      	ldrh	r3, [r3, #12]
 8003226:	260e      	movs	r6, #14
 8003228:	19bc      	adds	r4, r7, r6
 800322a:	0019      	movs	r1, r3
 800322c:	0010      	movs	r0, r2
 800322e:	f002 f93b 	bl	80054a8 <HAL_GPIO_ReadPin>
 8003232:	0003      	movs	r3, r0
 8003234:	7023      	strb	r3, [r4, #0]


        // Determine the direction of rotation based on the states of pins A and B
        uint8_t direction = (state_a == state_b) ? 0 : 1;
 8003236:	197a      	adds	r2, r7, r5
 8003238:	19bb      	adds	r3, r7, r6
 800323a:	7812      	ldrb	r2, [r2, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	1e5a      	subs	r2, r3, #1
 8003242:	4193      	sbcs	r3, r2
 8003244:	b2da      	uxtb	r2, r3
 8003246:	210d      	movs	r1, #13
 8003248:	187b      	adds	r3, r7, r1
 800324a:	701a      	strb	r2, [r3, #0]

        // Update the position based on the direction of rotation
        update_position(hencoder, direction);
 800324c:	187b      	adds	r3, r7, r1
 800324e:	781a      	ldrb	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f000 f817 	bl	8003288 <update_position>
        hencoder->position = 0;
        hencoder->direction = 0;
        //printf("BUT\n\r");

    }
}
 800325a:	e011      	b.n	8003280 <encoder_callback+0x90>
    else if (pin == hencoder->pin_button)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	8a9b      	ldrh	r3, [r3, #20]
 8003260:	1cba      	adds	r2, r7, #2
 8003262:	8812      	ldrh	r2, [r2, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d10b      	bne.n	8003280 <encoder_callback+0x90>
        event_enqueue(hencoder->queue, ENC_BUT);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2105      	movs	r1, #5
 800326e:	0018      	movs	r0, r3
 8003270:	f000 f88c 	bl	800338c <event_enqueue>
        hencoder->position = 0;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
        hencoder->direction = 0;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b005      	add	sp, #20
 8003286:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003288 <update_position>:

/*
 *  Increment or decrement position based on the direction of rotation
 */
static void update_position(Encoder_HandleTypeDef_t *hencoder, uint8_t direction)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	000a      	movs	r2, r1
 8003292:	1cfb      	adds	r3, r7, #3
 8003294:	701a      	strb	r2, [r3, #0]

    if (direction)
 8003296:	1cfb      	adds	r3, r7, #3
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <update_position+0x34>
    {
        hencoder->position++;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	621a      	str	r2, [r3, #32]
        hencoder->direction = 1; // Clockwise
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	771a      	strb	r2, [r3, #28]
        event_enqueue(hencoder->queue, ENC_UP);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2106      	movs	r1, #6
 80032b4:	0018      	movs	r0, r3
 80032b6:	f000 f869 	bl	800338c <event_enqueue>
        hencoder->position--;
        hencoder->direction = 0; // Counter-clockwise
        event_enqueue(hencoder->queue, ENC_DOWN);
        //printf("CCW\n\r");
    }
}
 80032ba:	e00d      	b.n	80032d8 <update_position+0x50>
        hencoder->position--;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	1e5a      	subs	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]
        hencoder->direction = 0; // Counter-clockwise
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
        event_enqueue(hencoder->queue, ENC_DOWN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	2107      	movs	r1, #7
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 f85a 	bl	800338c <event_enqueue>
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}

080032e0 <event_diplay_type>:
#include <stdio.h>
#include <stdlib.h>
/*
 * logs type to terminal if event calleback gets called
 */
static void event_diplay_type(event_type_t event){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	0002      	movs	r2, r0
 80032e8:	1dfb      	adds	r3, r7, #7
 80032ea:	701a      	strb	r2, [r3, #0]
        default:
            logMsg(LOG_WARNING, "EVENT: unknown button event detected: %u", event);
            break;
    }
#endif
}
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <initEvent>:
// Function to initialize the queue
HAL_StatusTypeDef initEvent(Event_Queue_HandleTypeDef_t* queue) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <initEvent+0x12>
#ifdef EVENT_ENABLE_LOG
        logMsg(LOG_ERROR, "EVENT: Init failed, queue is empty!\r\n");
#endif
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e007      	b.n	8003316 <initEvent+0x22>
    }
    queue->front = queue->rear = NULL;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	601a      	str	r2, [r3, #0]
    return HAL_OK; // Assuming HAL_OK is defined appropriately
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}

0800331e <event_isEmpty>:

// Function to check if the queue is empty
uint8_t event_isEmpty(Event_Queue_HandleTypeDef_t* queue) {
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
    return (queue->front == NULL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	425a      	negs	r2, r3
 800332c:	4153      	adcs	r3, r2
 800332e:	b2db      	uxtb	r3, r3
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}

08003338 <event_createNode>:

// Function to create a new node
event_node_t* event_createNode(event_type_t data) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	0002      	movs	r2, r0
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	701a      	strb	r2, [r3, #0]
    event_node_t* newNode = (event_node_t*)malloc(sizeof(event_node_t));
 8003344:	2008      	movs	r0, #8
 8003346:	f006 fad1 	bl	80098ec <malloc>
 800334a:	0003      	movs	r3, r0
 800334c:	60fb      	str	r3, [r7, #12]
    if (newNode == NULL) {
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <event_createNode+0x32>
        fprintf(stderr, "Memory allocation failed\n");
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <event_createNode+0x4c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	480b      	ldr	r0, [pc, #44]	; (8003388 <event_createNode+0x50>)
 800335c:	2219      	movs	r2, #25
 800335e:	2101      	movs	r1, #1
 8003360:	f007 f914 	bl	800a58c <fwrite>
        exit(EXIT_FAILURE);
 8003364:	2001      	movs	r0, #1
 8003366:	f006 faad 	bl	80098c4 <exit>
    }
    newNode->data = data;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1dfa      	adds	r2, r7, #7
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	701a      	strb	r2, [r3, #0]
    newNode->next = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
    return newNode;
 8003378:	68fb      	ldr	r3, [r7, #12]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	200001f4 	.word	0x200001f4
 8003388:	0800c580 	.word	0x0800c580

0800338c <event_enqueue>:

// Function to enqueue an event
void event_enqueue(Event_Queue_HandleTypeDef_t* queue, event_type_t event) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	000a      	movs	r2, r1
 8003396:	1cfb      	adds	r3, r7, #3
 8003398:	701a      	strb	r2, [r3, #0]
    event_diplay_type(event);
 800339a:	1cfb      	adds	r3, r7, #3
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	0018      	movs	r0, r3
 80033a0:	f7ff ff9e 	bl	80032e0 <event_diplay_type>
    event_node_t* newNode = event_createNode(event);
 80033a4:	1cfb      	adds	r3, r7, #3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7ff ffc5 	bl	8003338 <event_createNode>
 80033ae:	0003      	movs	r3, r0
 80033b0:	60fb      	str	r3, [r7, #12]
    if (event_isEmpty(queue)) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff ffb2 	bl	800331e <event_isEmpty>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d007      	beq.n	80033ce <event_enqueue+0x42>
        queue->front = queue->rear = newNode;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}
 80033cc:	e006      	b.n	80033dc <event_enqueue+0x50>
        queue->rear->next = newNode;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
        queue->rear = newNode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	605a      	str	r2, [r3, #4]
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b004      	add	sp, #16
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <heater_set_default_params>:
 * prev heater level 0xff (none)
 * coils off
 * pwm last = 0
 */
static void heater_set_default_params(Heater_HandleTypeDef_t* hheater)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
    hheater->heater_level = 0;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	705a      	strb	r2, [r3, #1]
    hheater->heater_level_prev = 0xff;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	22ff      	movs	r2, #255	; 0xff
 80033f6:	709a      	strb	r2, [r3, #2]

    //TODO set 1!!!
    hheater->flag_door_open = 0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]

    hheater->coils.coil1.state =  COIL_OFF;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	729a      	strb	r2, [r3, #10]
    hheater->coils.coil1.time_pwm_last = 0;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]

    hheater->coils.coil2.state =  COIL_OFF;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	759a      	strb	r2, [r3, #22]
    hheater->coils.coil2.time_pwm_last = 0;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	619a      	str	r2, [r3, #24]

    hheater->coils.coil3.state =  COIL_OFF;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2222      	movs	r2, #34	; 0x22
 800341a:	2100      	movs	r1, #0
 800341c:	5499      	strb	r1, [r3, r2]
    hheater->coils.coil3.time_pwm_last = 0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <initHeater>:
/*
 * init function of heater instance. sets all ports and pins plus default values
 */
HAL_StatusTypeDef initHeater(Heater_HandleTypeDef_t* hheater,MAX31855_HandleTypeDef_t* htemp, GPIO_TypeDef* coil1_port, uint16_t coil1_pin,
        GPIO_TypeDef* coil2_port, uint16_t coil2_pin, GPIO_TypeDef* coil3_port, uint16_t coil3_pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	001a      	movs	r2, r3
 800343a:	1cbb      	adds	r3, r7, #2
 800343c:	801a      	strh	r2, [r3, #0]
    if(NULL == hheater)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <initHeater+0x1c>
    {
        return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e022      	b.n	800348e <initHeater+0x62>
    }

    hheater->coils.coil1.port = coil1_port;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	605a      	str	r2, [r3, #4]
    hheater->coils.coil1.pin = coil1_pin;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1cba      	adds	r2, r7, #2
 8003452:	8812      	ldrh	r2, [r2, #0]
 8003454:	811a      	strh	r2, [r3, #8]

    hheater->coils.coil2.port = coil2_port;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	611a      	str	r2, [r3, #16]
    hheater->coils.coil2.pin = coil2_pin;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	221c      	movs	r2, #28
 8003460:	18ba      	adds	r2, r7, r2
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	829a      	strh	r2, [r3, #20]

    hheater->coils.coil3.port = coil3_port;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6a3a      	ldr	r2, [r7, #32]
 800346a:	61da      	str	r2, [r3, #28]
    hheater->coils.coil3.pin = coil3_pin;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	18ba      	adds	r2, r7, r2
 8003472:	8812      	ldrh	r2, [r2, #0]
 8003474:	841a      	strh	r2, [r3, #32]

    heater_set_default_params(hheater);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0018      	movs	r0, r3
 800347a:	f7ff ffb3 	bl	80033e4 <heater_set_default_params>

    hheater->htemp = htemp;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	651a      	str	r2, [r3, #80]	; 0x50
    hheater->time_counter = 0;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2254      	movs	r2, #84	; 0x54
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800348c:	2300      	movs	r3, #0

}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b004      	add	sp, #16
 8003494:	bd80      	pop	{r7, pc}

08003496 <heater_set_coil_on>:

/*
 * LL set coil On
 */
static void heater_set_coil_on(heater_coil_t* coil)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(coil->port, coil->pin, GPIO_PIN_SET);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	889b      	ldrh	r3, [r3, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	0019      	movs	r1, r3
 80034aa:	f002 f81a 	bl	80054e2 <HAL_GPIO_WritePin>

}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <heater_set_coil_off>:

/*
 * LL set coil Off
 */
static void heater_set_coil_off(heater_coil_t* coil)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(coil->port, coil->pin, GPIO_PIN_RESET);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	889b      	ldrh	r3, [r3, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	0019      	movs	r1, r3
 80034ca:	f002 f80a 	bl	80054e2 <HAL_GPIO_WritePin>
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b002      	add	sp, #8
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <heater_toggle_coil>:

/*
 * LL toggle coil
 */
static void heater_toggle_coil(heater_coil_t* coil)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(coil->port, coil->pin);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	889b      	ldrh	r3, [r3, #4]
 80034e6:	0019      	movs	r1, r3
 80034e8:	0010      	movs	r0, r2
 80034ea:	f002 f817 	bl	800551c <HAL_GPIO_TogglePin>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <heater_update_pwm_coil>:
/*
 * pwm control of a coil
 */
static void heater_update_pwm_coil(heater_coil_t* coil)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
    //coil wasnt in pwm mode allready, set last tick
    if(0 == coil->time_pwm_last){
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d105      	bne.n	8003512 <heater_update_pwm_coil+0x1c>
        coil->time_pwm_last = HAL_GetTick();
 8003506:	f001 fcd5 	bl	8004eb4 <HAL_GetTick>
 800350a:	0002      	movs	r2, r0
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
        {
            coil->time_pwm_last = time;
            heater_toggle_coil(coil);
        }
    }
}
 8003510:	e010      	b.n	8003534 <heater_update_pwm_coil+0x3e>
        uint32_t time = HAL_GetTick();
 8003512:	f001 fccf 	bl	8004eb4 <HAL_GetTick>
 8003516:	0003      	movs	r3, r0
 8003518:	60fb      	str	r3, [r7, #12]
        if(time >= (PWM_ON_SECONDS + coil->time_pwm_last))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	3302      	adds	r3, #2
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	429a      	cmp	r2, r3
 8003524:	d306      	bcc.n	8003534 <heater_update_pwm_coil+0x3e>
            coil->time_pwm_last = time;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
            heater_toggle_coil(coil);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff ffd1 	bl	80034d6 <heater_toggle_coil>
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b004      	add	sp, #16
 800353a:	bd80      	pop	{r7, pc}

0800353c <heater_set_coil_state>:
/*
 * sets state of individual heater coil according to params stored in instance
 */
//TODO Implement using RTC because uint32_t will overflow at some point
static HAL_StatusTypeDef heater_set_coil_state(heater_coil_t* coil)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
    if(NULL == coil)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <heater_set_coil_state+0x12>
    {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e021      	b.n	8003592 <heater_set_coil_state+0x56>
    }
    switch (coil->state) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	799b      	ldrb	r3, [r3, #6]
 8003552:	2b02      	cmp	r3, #2
 8003554:	d015      	beq.n	8003582 <heater_set_coil_state+0x46>
 8003556:	dc19      	bgt.n	800358c <heater_set_coil_state+0x50>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <heater_set_coil_state+0x26>
 800355c:	2b01      	cmp	r3, #1
 800355e:	d008      	beq.n	8003572 <heater_set_coil_state+0x36>
 8003560:	e014      	b.n	800358c <heater_set_coil_state+0x50>
        case COIL_OFF:
            coil->time_pwm_last = 0;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
            heater_set_coil_off(coil);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f7ff ffa3 	bl	80034b6 <heater_set_coil_off>
            break;
 8003570:	e00e      	b.n	8003590 <heater_set_coil_state+0x54>
        case COIL_ON:
            coil->time_pwm_last = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
            heater_set_coil_on(coil);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff ff8b 	bl	8003496 <heater_set_coil_on>
            break;
 8003580:	e006      	b.n	8003590 <heater_set_coil_state+0x54>
        case COIL_PWM:
            heater_update_pwm_coil(coil);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ffb6 	bl	80034f6 <heater_update_pwm_coil>
            break;
 800358a:	e001      	b.n	8003590 <heater_set_coil_state+0x54>
        default:
            return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <heater_set_coil_state+0x56>
            break;
    }
    return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	0018      	movs	r0, r3
 8003594:	46bd      	mov	sp, r7
 8003596:	b002      	add	sp, #8
 8003598:	bd80      	pop	{r7, pc}

0800359a <heater_check_door_state>:

/*
 * checks if door flag was set and turns heater of
 */
static HAL_StatusTypeDef heater_check_door_state(Heater_HandleTypeDef_t* hheater)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
    if(NULL == hheater){
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <heater_check_door_state+0x12>
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e02f      	b.n	800360c <heater_check_door_state+0x72>
    }

    //pause heating , door is open
    if(hheater->flag_door_open)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d014      	beq.n	80035de <heater_check_door_state+0x44>
    {
        //check if previous level was allredy set
        if(0xff == hheater->heater_level_prev)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	789b      	ldrb	r3, [r3, #2]
 80035b8:	2bff      	cmp	r3, #255	; 0xff
 80035ba:	d103      	bne.n	80035c4 <heater_check_door_state+0x2a>
        {
            hheater->heater_level_prev = hheater->heater_level;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	785a      	ldrb	r2, [r3, #1]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	709a      	strb	r2, [r3, #2]
        }

        //check if allready in level 0 (off)
        if(0 != hheater->heater_level)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	785b      	ldrb	r3, [r3, #1]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d008      	beq.n	80035de <heater_check_door_state+0x44>
        {
            //set level to 0 (off)
            if(HAL_OK != heater_set_level(hheater, 0))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2100      	movs	r1, #0
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 f81f 	bl	8003614 <heater_set_level>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <heater_check_door_state+0x44>
                    {
                       return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e016      	b.n	800360c <heater_check_door_state+0x72>


    }

    // door closed
    if(!hheater->flag_door_open)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d111      	bne.n	800360a <heater_check_door_state+0x70>
    {

        //check if we need to resume old heater level
        if(0xff != hheater->heater_level_prev)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	789b      	ldrb	r3, [r3, #2]
 80035ea:	2bff      	cmp	r3, #255	; 0xff
 80035ec:	d00d      	beq.n	800360a <heater_check_door_state+0x70>
        {
            if(HAL_OK != heater_set_level(hheater,hheater->heater_level_prev))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	789a      	ldrb	r2, [r3, #2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f80c 	bl	8003614 <heater_set_level>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d001      	beq.n	8003604 <heater_check_door_state+0x6a>
            {
                return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e003      	b.n	800360c <heater_check_door_state+0x72>
            }
            hheater->heater_level_prev = 0xff;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	709a      	strb	r2, [r3, #2]
        }

    }
    return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <heater_set_level>:

/*
 * HL set the heater level from 1-6
 */
HAL_StatusTypeDef heater_set_level(Heater_HandleTypeDef_t* hheater, uint8_t level)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	000a      	movs	r2, r1
 800361e:	1cfb      	adds	r3, r7, #3
 8003620:	701a      	strb	r2, [r3, #0]

    hheater->heater_level = level;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	1cfa      	adds	r2, r7, #3
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	705a      	strb	r2, [r3, #1]


    switch (level) {
 800362a:	1cfb      	adds	r3, r7, #3
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d851      	bhi.n	80036d6 <heater_set_level+0xc2>
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <heater_set_level+0xd0>)
 8003636:	18d3      	adds	r3, r2, r3
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	469f      	mov	pc, r3
        case 0:
            hheater->coils.coil1.state = COIL_OFF;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_OFF;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_OFF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2222      	movs	r2, #34	; 0x22
 800364c:	2100      	movs	r1, #0
 800364e:	5499      	strb	r1, [r3, r2]
            break;
 8003650:	e043      	b.n	80036da <heater_set_level+0xc6>
        case 1:
            hheater->coils.coil1.state = COIL_PWM;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_OFF;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_OFF;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2222      	movs	r2, #34	; 0x22
 8003662:	2100      	movs	r1, #0
 8003664:	5499      	strb	r1, [r3, r2]
            break;
 8003666:	e038      	b.n	80036da <heater_set_level+0xc6>
        case 2:
            hheater->coils.coil1.state = COIL_ON;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_OFF;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_OFF;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2222      	movs	r2, #34	; 0x22
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]
            break;
 800367c:	e02d      	b.n	80036da <heater_set_level+0xc6>
        case 3:
            hheater->coils.coil1.state = COIL_ON;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_PWM;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_OFF;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2222      	movs	r2, #34	; 0x22
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]
            break;
 8003692:	e022      	b.n	80036da <heater_set_level+0xc6>
        case 4:
            hheater->coils.coil1.state = COIL_ON;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_ON;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_OFF;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2222      	movs	r2, #34	; 0x22
 80036a4:	2100      	movs	r1, #0
 80036a6:	5499      	strb	r1, [r3, r2]
            break;
 80036a8:	e017      	b.n	80036da <heater_set_level+0xc6>
        case 5:
            hheater->coils.coil1.state = COIL_ON;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_ON;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_PWM;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2222      	movs	r2, #34	; 0x22
 80036ba:	2102      	movs	r1, #2
 80036bc:	5499      	strb	r1, [r3, r2]
            break;
 80036be:	e00c      	b.n	80036da <heater_set_level+0xc6>
        case 6:
            hheater->coils.coil1.state = COIL_ON;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	729a      	strb	r2, [r3, #10]
            hheater->coils.coil2.state = COIL_ON;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	759a      	strb	r2, [r3, #22]
            hheater->coils.coil3.state = COIL_ON;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2222      	movs	r2, #34	; 0x22
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]
            break;
 80036d4:	e001      	b.n	80036da <heater_set_level+0xc6>
        default:
            return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <heater_set_level+0xc8>
            break;
    }
    return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	0800c6c8 	.word	0x0800c6c8

080036e8 <heater_set_state>:

/*
 * sets state of heater according to params stored in instance
 */
HAL_StatusTypeDef heater_set_state(Heater_HandleTypeDef_t* hheater)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
    if(HAL_OK != heater_check_door_state(hheater))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7ff ff51 	bl	800359a <heater_check_door_state>
 80036f8:	1e03      	subs	r3, r0, #0
 80036fa:	d001      	beq.n	8003700 <heater_set_state+0x18>
    {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e00f      	b.n	8003720 <heater_set_state+0x38>
    }

    heater_set_coil_state(&hheater->coils.coil1);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3304      	adds	r3, #4
 8003704:	0018      	movs	r0, r3
 8003706:	f7ff ff19 	bl	800353c <heater_set_coil_state>
    heater_set_coil_state(&hheater->coils.coil2);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3310      	adds	r3, #16
 800370e:	0018      	movs	r0, r3
 8003710:	f7ff ff14 	bl	800353c <heater_set_coil_state>
    heater_set_coil_state(&hheater->coils.coil3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	331c      	adds	r3, #28
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ff0f 	bl	800353c <heater_set_coil_state>

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}

08003728 <heater_calculate_slope>:
/*
 * calculates slope from temperature array of Heater_HandleTypeDef struct
 */
float32_t heater_calculate_slope(Heater_HandleTypeDef_t* hheater) {
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b08b      	sub	sp, #44	; 0x2c
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

    float32_t* temp = hheater->temperature;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3328      	adds	r3, #40	; 0x28
 8003734:	61bb      	str	r3, [r7, #24]
    float32_t mean_temp = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
    //float32_t covariance = 0;
    //float32_t variance_time = 0;
    //float32_t variance_temp = 0;
    uint32_t total_intervals = PID_CALC_INTERVAL_SECONDS / TEMPERATURE_SAMPLING_INTERVAL_SECONDS;
 800373a:	230a      	movs	r3, #10
 800373c:	617b      	str	r3, [r7, #20]
    float32_t mean_time = ((total_intervals + 1.0f) * TEMPERATURE_SAMPLING_INTERVAL_SECONDS) / 2.0f;
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7fd fcac 	bl	800109c <__aeabi_ui2f>
 8003744:	1c03      	adds	r3, r0, #0
 8003746:	21fe      	movs	r1, #254	; 0xfe
 8003748:	0589      	lsls	r1, r1, #22
 800374a:	1c18      	adds	r0, r3, #0
 800374c:	f7fc feac 	bl	80004a8 <__aeabi_fadd>
 8003750:	1c03      	adds	r3, r0, #0
 8003752:	2180      	movs	r1, #128	; 0x80
 8003754:	05c9      	lsls	r1, r1, #23
 8003756:	1c18      	adds	r0, r3, #0
 8003758:	f7fd f846 	bl	80007e8 <__aeabi_fdiv>
 800375c:	1c03      	adds	r3, r0, #0
 800375e:	613b      	str	r3, [r7, #16]

    arm_mean_f32(temp, total_intervals, &mean_temp);
 8003760:	2308      	movs	r3, #8
 8003762:	18fa      	adds	r2, r7, r3
 8003764:	6979      	ldr	r1, [r7, #20]
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	0018      	movs	r0, r3
 800376a:	f006 f88b 	bl	8009884 <arm_mean_f32>
    // Calculate the numerator and denominator of the gradient formula
    float32_t numerator = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
    float32_t denominator = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < total_intervals; i++) {
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	e040      	b.n	80037fe <heater_calculate_slope+0xd6>
        numerator += (i * TEMPERATURE_SAMPLING_INTERVAL_SECONDS - mean_time) * (temp[i] - mean_temp);
 800377c:	69f8      	ldr	r0, [r7, #28]
 800377e:	f7fd fc8d 	bl	800109c <__aeabi_ui2f>
 8003782:	1c03      	adds	r3, r0, #0
 8003784:	6939      	ldr	r1, [r7, #16]
 8003786:	1c18      	adds	r0, r3, #0
 8003788:	f7fd fa96 	bl	8000cb8 <__aeabi_fsub>
 800378c:	1c03      	adds	r3, r0, #0
 800378e:	1c1c      	adds	r4, r3, #0
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	1c11      	adds	r1, r2, #0
 800379e:	1c18      	adds	r0, r3, #0
 80037a0:	f7fd fa8a 	bl	8000cb8 <__aeabi_fsub>
 80037a4:	1c03      	adds	r3, r0, #0
 80037a6:	1c19      	adds	r1, r3, #0
 80037a8:	1c20      	adds	r0, r4, #0
 80037aa:	f7fd f937 	bl	8000a1c <__aeabi_fmul>
 80037ae:	1c03      	adds	r3, r0, #0
 80037b0:	1c19      	adds	r1, r3, #0
 80037b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037b4:	f7fc fe78 	bl	80004a8 <__aeabi_fadd>
 80037b8:	1c03      	adds	r3, r0, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
        denominator += (i * TEMPERATURE_SAMPLING_INTERVAL_SECONDS - mean_time)
 80037bc:	69f8      	ldr	r0, [r7, #28]
 80037be:	f7fd fc6d 	bl	800109c <__aeabi_ui2f>
 80037c2:	1c03      	adds	r3, r0, #0
 80037c4:	6939      	ldr	r1, [r7, #16]
 80037c6:	1c18      	adds	r0, r3, #0
 80037c8:	f7fd fa76 	bl	8000cb8 <__aeabi_fsub>
 80037cc:	1c03      	adds	r3, r0, #0
 80037ce:	1c1c      	adds	r4, r3, #0
                * (i * TEMPERATURE_SAMPLING_INTERVAL_SECONDS - mean_time);
 80037d0:	69f8      	ldr	r0, [r7, #28]
 80037d2:	f7fd fc63 	bl	800109c <__aeabi_ui2f>
 80037d6:	1c03      	adds	r3, r0, #0
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	1c18      	adds	r0, r3, #0
 80037dc:	f7fd fa6c 	bl	8000cb8 <__aeabi_fsub>
 80037e0:	1c03      	adds	r3, r0, #0
 80037e2:	1c19      	adds	r1, r3, #0
 80037e4:	1c20      	adds	r0, r4, #0
 80037e6:	f7fd f919 	bl	8000a1c <__aeabi_fmul>
 80037ea:	1c03      	adds	r3, r0, #0
        denominator += (i * TEMPERATURE_SAMPLING_INTERVAL_SECONDS - mean_time)
 80037ec:	1c19      	adds	r1, r3, #0
 80037ee:	6a38      	ldr	r0, [r7, #32]
 80037f0:	f7fc fe5a 	bl	80004a8 <__aeabi_fadd>
 80037f4:	1c03      	adds	r3, r0, #0
 80037f6:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < total_intervals; i++) {
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3301      	adds	r3, #1
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	429a      	cmp	r2, r3
 8003804:	d3ba      	bcc.n	800377c <heater_calculate_slope+0x54>
    }
    float32_t slope = numerator / denominator;
 8003806:	6a39      	ldr	r1, [r7, #32]
 8003808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800380a:	f7fc ffed 	bl	80007e8 <__aeabi_fdiv>
 800380e:	1c03      	adds	r3, r0, #0
 8003810:	60fb      	str	r3, [r7, #12]
//    covariance = variance_time + variance_temp - (2 * mean_time * mean_temp);
//
//    // Calculate the slope (m)
//    float slope = covariance / variance_time;

    return slope;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	1c18      	adds	r0, r3, #0
 8003816:	46bd      	mov	sp, r7
 8003818:	b00b      	add	sp, #44	; 0x2c
 800381a:	bd90      	pop	{r4, r7, pc}

0800381c <heater_calculate_mean>:
/*
 * calculates slope from temperature array of Heater_HandleTypeDef struct
 */
float32_t heater_calculate_mean(Heater_HandleTypeDef_t* hheater) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]

    float32_t* temp = hheater->temperature;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3328      	adds	r3, #40	; 0x28
 8003828:	617b      	str	r3, [r7, #20]
    float32_t mean_temp = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]

    uint32_t total_intervals = PID_CALC_INTERVAL_SECONDS / TEMPERATURE_SAMPLING_INTERVAL_SECONDS;
 800382e:	230a      	movs	r3, #10
 8003830:	613b      	str	r3, [r7, #16]

    arm_mean_f32(temp, total_intervals, &mean_temp);
 8003832:	230c      	movs	r3, #12
 8003834:	18fa      	adds	r2, r7, r3
 8003836:	6939      	ldr	r1, [r7, #16]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	0018      	movs	r0, r3
 800383c:	f006 f822 	bl	8009884 <arm_mean_f32>

    return mean_temp;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	1c18      	adds	r0, r3, #0
 8003844:	46bd      	mov	sp, r7
 8003846:	b006      	add	sp, #24
 8003848:	bd80      	pop	{r7, pc}

0800384a <heater_set_temperature_zero>:
/*
 * sets all elements of temperature array in heater_HandleTypeDef struct to zero
 */
void heater_set_temperature_zero(Heater_HandleTypeDef_t* hheater)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]

    uint8_t length = PID_CALC_INTERVAL_SECONDS / INTERUPT_INTERVAL_SECONDS;
 8003852:	230e      	movs	r3, #14
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	220a      	movs	r2, #10
 8003858:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < length; i++)
 800385a:	230f      	movs	r3, #15
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e00c      	b.n	800387e <heater_set_temperature_zero+0x34>
    {
        hheater->temperature[i] = 0;
 8003864:	200f      	movs	r0, #15
 8003866:	183b      	adds	r3, r7, r0
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	320a      	adds	r2, #10
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	2100      	movs	r1, #0
 8003872:	50d1      	str	r1, [r2, r3]
    for(uint8_t i = 0; i < length; i++)
 8003874:	183b      	adds	r3, r7, r0
 8003876:	781a      	ldrb	r2, [r3, #0]
 8003878:	183b      	adds	r3, r7, r0
 800387a:	3201      	adds	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	230f      	movs	r3, #15
 8003880:	18fa      	adds	r2, r7, r3
 8003882:	230e      	movs	r3, #14
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	7812      	ldrb	r2, [r2, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3ea      	bcc.n	8003864 <heater_set_temperature_zero+0x1a>
    }
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b004      	add	sp, #16
 8003896:	bd80      	pop	{r7, pc}

08003898 <heater_print_test>:

void heater_print_test(RTC_HandleTypeDef *hrtc, float32_t temperature)
{
 8003898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389a:	b08b      	sub	sp, #44	; 0x2c
 800389c:	af02      	add	r7, sp, #8
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
    RTC_TimeTypeDef sTime = {0};
 80038a2:	240c      	movs	r4, #12
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	0018      	movs	r0, r3
 80038a8:	2314      	movs	r3, #20
 80038aa:	001a      	movs	r2, r3
 80038ac:	2100      	movs	r1, #0
 80038ae:	f006 ffdb 	bl	800a868 <memset>
    RTC_DateTypeDef sDate = {0};
 80038b2:	2508      	movs	r5, #8
 80038b4:	197b      	adds	r3, r7, r5
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

    HAL_RTC_GetTime(hrtc, &sTime, RTC_FORMAT_BIN);
 80038ba:	1939      	adds	r1, r7, r4
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	0018      	movs	r0, r3
 80038c2:	f003 f937 	bl	8006b34 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(hrtc, &sDate, RTC_FORMAT_BIN);
 80038c6:	1979      	adds	r1, r7, r5
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	0018      	movs	r0, r3
 80038ce:	f003 fa1f 	bl	8006d10 <HAL_RTC_GetDate>

    printf("%02d:%02d:%02d,%.2f\r\n", sTime.Hours, sTime.Minutes, sTime.Seconds,temperature);
 80038d2:	0022      	movs	r2, r4
 80038d4:	18bb      	adds	r3, r7, r2
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	001c      	movs	r4, r3
 80038da:	18bb      	adds	r3, r7, r2
 80038dc:	785b      	ldrb	r3, [r3, #1]
 80038de:	001d      	movs	r5, r3
 80038e0:	18bb      	adds	r3, r7, r2
 80038e2:	789b      	ldrb	r3, [r3, #2]
 80038e4:	001e      	movs	r6, r3
 80038e6:	6838      	ldr	r0, [r7, #0]
 80038e8:	f7ff fa68 	bl	8002dbc <__aeabi_f2d>
 80038ec:	0002      	movs	r2, r0
 80038ee:	000b      	movs	r3, r1
 80038f0:	4805      	ldr	r0, [pc, #20]	; (8003908 <heater_print_test+0x70>)
 80038f2:	9200      	str	r2, [sp, #0]
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	0033      	movs	r3, r6
 80038f8:	002a      	movs	r2, r5
 80038fa:	0021      	movs	r1, r4
 80038fc:	f006 fe52 	bl	800a5a4 <iprintf>

}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b009      	add	sp, #36	; 0x24
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003908:	0800c5bc 	.word	0x0800c5bc

0800390c <heater_on_interupt>:
void heater_on_interupt(Heater_HandleTypeDef_t* hheater,RTC_HandleTypeDef *hrtc)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
    hheater->time_counter++;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2254      	movs	r2, #84	; 0x54
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	3301      	adds	r3, #1
 800391e:	b2d9      	uxtb	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2254      	movs	r2, #84	; 0x54
 8003924:	5499      	strb	r1, [r3, r2]
    //printf("counter: %u \r\n", hheater->time_counter);
    //check if interval for sampling temperature has passed
    if(TEMPERATURE_SAMPLING_INTERVAL_SECONDS / INTERUPT_INTERVAL_SECONDS  <= hheater->time_counter)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2254      	movs	r2, #84	; 0x54
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d020      	beq.n	8003972 <heater_on_interupt+0x66>
        {
            max31855_read_data(hheater->htemp);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	0018      	movs	r0, r3
 8003936:	f7ff fb7f 	bl	8003038 <max31855_read_data>
            hheater->temperature[hheater->time_counter - 1] = max31855_get_temp_f32(hheater->htemp);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2154      	movs	r1, #84	; 0x54
 8003942:	5c5b      	ldrb	r3, [r3, r1]
 8003944:	1e5c      	subs	r4, r3, #1
 8003946:	0010      	movs	r0, r2
 8003948:	f7ff fbdc 	bl	8003104 <max31855_get_temp_f32>
 800394c:	1c01      	adds	r1, r0, #0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0022      	movs	r2, r4
 8003952:	320a      	adds	r2, #10
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	50d1      	str	r1, [r2, r3]
            heater_print_test(hrtc,hheater->temperature[hheater->time_counter - 1]);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2254      	movs	r2, #84	; 0x54
 800395c:	5c9b      	ldrb	r3, [r3, r2]
 800395e:	1e5a      	subs	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	320a      	adds	r2, #10
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	58d2      	ldr	r2, [r2, r3]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	1c11      	adds	r1, r2, #0
 800396c:	0018      	movs	r0, r3
 800396e:	f7ff ff93 	bl	8003898 <heater_print_test>
        }
    //check if intervall for pid is met
    if(PID_CALC_INTERVAL_SECONDS / INTERUPT_INTERVAL_SECONDS  <= hheater->time_counter)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2254      	movs	r2, #84	; 0x54
 8003976:	5c9b      	ldrb	r3, [r3, r2]
 8003978:	2b09      	cmp	r3, #9
 800397a:	d92b      	bls.n	80039d4 <heater_on_interupt+0xc8>
    {
        //TODO
        float32_t slope = heater_calculate_slope(hheater);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff fed2 	bl	8003728 <heater_calculate_slope>
 8003984:	1c03      	adds	r3, r0, #0
 8003986:	60fb      	str	r3, [r7, #12]
        float32_t mean = heater_calculate_mean(hheater);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	0018      	movs	r0, r3
 800398c:	f7ff ff46 	bl	800381c <heater_calculate_mean>
 8003990:	1c03      	adds	r3, r0, #0
 8003992:	60bb      	str	r3, [r7, #8]
        //TODO pid calculation

        printf("slope: %f, mean: %f\r\n",slope * 3600,mean);
 8003994:	4911      	ldr	r1, [pc, #68]	; (80039dc <heater_on_interupt+0xd0>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7fd f840 	bl	8000a1c <__aeabi_fmul>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	1c18      	adds	r0, r3, #0
 80039a0:	f7ff fa0c 	bl	8002dbc <__aeabi_f2d>
 80039a4:	0004      	movs	r4, r0
 80039a6:	000d      	movs	r5, r1
 80039a8:	68b8      	ldr	r0, [r7, #8]
 80039aa:	f7ff fa07 	bl	8002dbc <__aeabi_f2d>
 80039ae:	0002      	movs	r2, r0
 80039b0:	000b      	movs	r3, r1
 80039b2:	490b      	ldr	r1, [pc, #44]	; (80039e0 <heater_on_interupt+0xd4>)
 80039b4:	9200      	str	r2, [sp, #0]
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	0022      	movs	r2, r4
 80039ba:	002b      	movs	r3, r5
 80039bc:	0008      	movs	r0, r1
 80039be:	f006 fdf1 	bl	800a5a4 <iprintf>
        heater_set_temperature_zero(hheater);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7ff ff40 	bl	800384a <heater_set_temperature_zero>
        hheater->time_counter = 0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2254      	movs	r2, #84	; 0x54
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]
        return;
 80039d2:	46c0      	nop			; (mov r8, r8)
    }


}
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bdb0      	pop	{r4, r5, r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	45610000 	.word	0x45610000
 80039e0:	0800c5d4 	.word	0x0800c5d4

080039e4 <lcd1602_init>:



HAL_StatusTypeDef lcd1602_init(LCD1602_RGB_HandleTypeDef_t *hlcd, I2C_HandleTypeDef* hi2c,
        uint8_t cols, uint8_t rows)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	0019      	movs	r1, r3
 80039f0:	1dfb      	adds	r3, r7, #7
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	1dbb      	adds	r3, r7, #6
 80039f6:	1c0a      	adds	r2, r1, #0
 80039f8:	701a      	strb	r2, [r3, #0]
    hlcd->hi2c = hi2c;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	601a      	str	r2, [r3, #0]
    hlcd->cols = cols;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1dfa      	adds	r2, r7, #7
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	739a      	strb	r2, [r3, #14]
    hlcd->rows = rows;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1dba      	adds	r2, r7, #6
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	73da      	strb	r2, [r3, #15]
    hlcd->showfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	719a      	strb	r2, [r3, #6]
    return lcd1602_begin(hlcd, cols, rows);
 8003a16:	1dbb      	adds	r3, r7, #6
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	1dfb      	adds	r3, r7, #7
 8003a1c:	7819      	ldrb	r1, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 f805 	bl	8003a30 <lcd1602_begin>
 8003a26:	0003      	movs	r3, r0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <lcd1602_begin>:


HAL_StatusTypeDef lcd1602_begin(LCD1602_RGB_HandleTypeDef_t *hlcd, uint8_t cols, uint8_t lines)
{
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	0008      	movs	r0, r1
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	1cfb      	adds	r3, r7, #3
 8003a3e:	1c02      	adds	r2, r0, #0
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	1cbb      	adds	r3, r7, #2
 8003a44:	1c0a      	adds	r2, r1, #0
 8003a46:	701a      	strb	r2, [r3, #0]
    uint8_t err_c = HAL_OK;
 8003a48:	230f      	movs	r3, #15
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
    if (lines > 1) {
 8003a50:	1cbb      	adds	r3, r7, #2
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d906      	bls.n	8003a66 <lcd1602_begin+0x36>
        hlcd->showfunction |= LCD_2LINE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	799b      	ldrb	r3, [r3, #6]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	719a      	strb	r2, [r3, #6]
    }
    hlcd->numlines = lines;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	1cba      	adds	r2, r7, #2
 8003a6a:	7812      	ldrb	r2, [r2, #0]
 8003a6c:	729a      	strb	r2, [r3, #10]
    hlcd->currline = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	72da      	strb	r2, [r3, #11]

#ifdef LCD_USE_RTOS_INIT
    osDelay(50);
#else
    HAL_Delay(50);
 8003a74:	2032      	movs	r0, #50	; 0x32
 8003a76:	f001 fa27 	bl	8004ec8 <HAL_Delay>
#endif

    err_c += lcd1602_command(hlcd, LCD_FUNCTIONSET | hlcd->showfunction);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	799b      	ldrb	r3, [r3, #6]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	4313      	orrs	r3, r2
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 f8b4 	bl	8003bf6 <lcd1602_command>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	0019      	movs	r1, r3
 8003a92:	240f      	movs	r4, #15
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	193a      	adds	r2, r7, r4
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	188a      	adds	r2, r1, r2
 8003a9c:	701a      	strb	r2, [r3, #0]

#ifdef LCD_USE_RTOS_INIT
    osDelay(5);
#else
    HAL_Delay(5);
 8003a9e:	2005      	movs	r0, #5
 8003aa0:	f001 fa12 	bl	8004ec8 <HAL_Delay>
#endif

    err_c += lcd1602_command(hlcd, LCD_FUNCTIONSET | hlcd->showfunction);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	799b      	ldrb	r3, [r3, #6]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0011      	movs	r1, r2
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f89f 	bl	8003bf6 <lcd1602_command>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	0019      	movs	r1, r3
 8003abc:	193b      	adds	r3, r7, r4
 8003abe:	193a      	adds	r2, r7, r4
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	188a      	adds	r2, r1, r2
 8003ac4:	701a      	strb	r2, [r3, #0]
#ifdef LCD_USE_RTOS_INIT
    osDelay(5);
#else
    HAL_Delay(5);
 8003ac6:	2005      	movs	r0, #5
 8003ac8:	f001 f9fe 	bl	8004ec8 <HAL_Delay>
#endif

    err_c += lcd1602_command(hlcd, LCD_FUNCTIONSET | hlcd->showfunction);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	799b      	ldrb	r3, [r3, #6]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0011      	movs	r1, r2
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f88b 	bl	8003bf6 <lcd1602_command>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	193b      	adds	r3, r7, r4
 8003ae6:	193a      	adds	r2, r7, r4
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	188a      	adds	r2, r1, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    hlcd->showcontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2204      	movs	r2, #4
 8003af2:	71da      	strb	r2, [r3, #7]
    err_c += lcd1602_display(hlcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	0018      	movs	r0, r3
 8003af8:	f000 f89f 	bl	8003c3a <lcd1602_display>
 8003afc:	0003      	movs	r3, r0
 8003afe:	0019      	movs	r1, r3
 8003b00:	193b      	adds	r3, r7, r4
 8003b02:	193a      	adds	r2, r7, r4
 8003b04:	7812      	ldrb	r2, [r2, #0]
 8003b06:	188a      	adds	r2, r1, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    err_c += lcd1602_clear(hlcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 f8ae 	bl	8003c6e <lcd1602_clear>
 8003b12:	0003      	movs	r3, r0
 8003b14:	0019      	movs	r1, r3
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	193a      	adds	r2, r7, r4
 8003b1a:	7812      	ldrb	r2, [r2, #0]
 8003b1c:	188a      	adds	r2, r1, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

    hlcd->showmode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	721a      	strb	r2, [r3, #8]
    err_c += lcd1602_command(hlcd, LCD_ENTRYMODESET | hlcd->showmode);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7a1b      	ldrb	r3, [r3, #8]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0011      	movs	r1, r2
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f85e 	bl	8003bf6 <lcd1602_command>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	193b      	adds	r3, r7, r4
 8003b40:	193a      	adds	r2, r7, r4
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	188a      	adds	r2, r1, r2
 8003b46:	701a      	strb	r2, [r3, #0]

    err_c += lcd1602_setReg(hlcd, REG_MODE1, 0);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f8a3 	bl	8003c9a <lcd1602_setReg>
 8003b54:	0003      	movs	r3, r0
 8003b56:	0019      	movs	r1, r3
 8003b58:	193b      	adds	r3, r7, r4
 8003b5a:	193a      	adds	r2, r7, r4
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	188a      	adds	r2, r1, r2
 8003b60:	701a      	strb	r2, [r3, #0]
    err_c += lcd1602_setReg(hlcd, REG_OUTPUT, 0xFF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	2108      	movs	r1, #8
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f896 	bl	8003c9a <lcd1602_setReg>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	0019      	movs	r1, r3
 8003b72:	193b      	adds	r3, r7, r4
 8003b74:	193a      	adds	r2, r7, r4
 8003b76:	7812      	ldrb	r2, [r2, #0]
 8003b78:	188a      	adds	r2, r1, r2
 8003b7a:	701a      	strb	r2, [r3, #0]
    err_c += lcd1602_setReg(hlcd, REG_MODE2, 0x20);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	2101      	movs	r1, #1
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f889 	bl	8003c9a <lcd1602_setReg>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	193a      	adds	r2, r7, r4
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	188a      	adds	r2, r1, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    err_c += lcd1602_setColorWhite(hlcd);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f944 	bl	8003e26 <lcd1602_setColorWhite>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	193a      	adds	r2, r7, r4
 8003ba6:	7812      	ldrb	r2, [r2, #0]
 8003ba8:	188a      	adds	r2, r1, r2
 8003baa:	701a      	strb	r2, [r3, #0]
    if(err_c)
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <lcd1602_begin+0x18a>
    {
        return err_c;
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	e000      	b.n	8003bbc <lcd1602_begin+0x18c>
    }
    return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b005      	add	sp, #20
 8003bc2:	bd90      	pop	{r4, r7, pc}

08003bc4 <lcd1602_send>:
//OK??
HAL_StatusTypeDef lcd1602_send(LCD1602_RGB_HandleTypeDef_t *hlcd,
        uint8_t *data, uint8_t len)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	701a      	strb	r2, [r3, #0]
    return HAL_I2C_Master_Transmit(hlcd->hi2c, LCD_ADDRESS, data, len, HAL_MAX_DELAY);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	1dfb      	adds	r3, r7, #7
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b299      	uxth	r1, r3
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	2301      	movs	r3, #1
 8003be0:	425b      	negs	r3, r3
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	000b      	movs	r3, r1
 8003be6:	217c      	movs	r1, #124	; 0x7c
 8003be8:	f001 fd66 	bl	80056b8 <HAL_I2C_Master_Transmit>
 8003bec:	0003      	movs	r3, r0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <lcd1602_command>:

//OK??
HAL_StatusTypeDef lcd1602_command(LCD1602_RGB_HandleTypeDef_t *hlcd, uint8_t value)
{
 8003bf6:	b590      	push	{r4, r7, lr}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	000a      	movs	r2, r1
 8003c00:	1cfb      	adds	r3, r7, #3
 8003c02:	701a      	strb	r2, [r3, #0]
    uint8_t data[3] = {0x80, value};
 8003c04:	240c      	movs	r4, #12
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	0018      	movs	r0, r3
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	001a      	movs	r2, r3
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f006 fe2a 	bl	800a868 <memset>
 8003c14:	0021      	movs	r1, r4
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	187b      	adds	r3, r7, r1
 8003c1e:	1cfa      	adds	r2, r7, #3
 8003c20:	7812      	ldrb	r2, [r2, #0]
 8003c22:	705a      	strb	r2, [r3, #1]
    return lcd1602_send(hlcd, data, 2);
 8003c24:	1879      	adds	r1, r7, r1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2202      	movs	r2, #2
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff ffca 	bl	8003bc4 <lcd1602_send>
 8003c30:	0003      	movs	r3, r0
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b005      	add	sp, #20
 8003c38:	bd90      	pop	{r4, r7, pc}

08003c3a <lcd1602_display>:


HAL_StatusTypeDef lcd1602_display(LCD1602_RGB_HandleTypeDef_t *hlcd)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
    hlcd->showcontrol |= LCD_DISPLAYON;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	79db      	ldrb	r3, [r3, #7]
 8003c46:	2204      	movs	r2, #4
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	71da      	strb	r2, [r3, #7]
    return lcd1602_command(hlcd, LCD_DISPLAYCONTROL | hlcd->showcontrol);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	79db      	ldrb	r3, [r3, #7]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4313      	orrs	r3, r2
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0011      	movs	r1, r2
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7ff ffc9 	bl	8003bf6 <lcd1602_command>
 8003c64:	0003      	movs	r3, r0
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <lcd1602_clear>:

HAL_StatusTypeDef lcd1602_clear(LCD1602_RGB_HandleTypeDef_t *hlcd)
{
 8003c6e:	b5b0      	push	{r4, r5, r7, lr}
 8003c70:	b084      	sub	sp, #16
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
    uint8_t err;
    err = lcd1602_command(hlcd, LCD_CLEARDISPLAY);
 8003c76:	250f      	movs	r5, #15
 8003c78:	197c      	adds	r4, r7, r5
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7ff ffb9 	bl	8003bf6 <lcd1602_command>
 8003c84:	0003      	movs	r3, r0
 8003c86:	7023      	strb	r3, [r4, #0]
#ifdef LCD_USE_RTOS
    osDelay(200);
#else
    HAL_Delay(200);
 8003c88:	20c8      	movs	r0, #200	; 0xc8
 8003c8a:	f001 f91d 	bl	8004ec8 <HAL_Delay>
#endif
    return err;
 8003c8e:	197b      	adds	r3, r7, r5
 8003c90:	781b      	ldrb	r3, [r3, #0]
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bdb0      	pop	{r4, r5, r7, pc}

08003c9a <lcd1602_setReg>:

HAL_StatusTypeDef lcd1602_setReg(LCD1602_RGB_HandleTypeDef_t *hlcd,
        uint8_t addr, uint8_t data)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af02      	add	r7, sp, #8
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	0008      	movs	r0, r1
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	1cfb      	adds	r3, r7, #3
 8003ca8:	1c02      	adds	r2, r0, #0
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	1cbb      	adds	r3, r7, #2
 8003cae:	1c0a      	adds	r2, r1, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
    uint8_t tx_data[2] = {addr, data};
 8003cb2:	210c      	movs	r1, #12
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	1cfa      	adds	r2, r7, #3
 8003cb8:	7812      	ldrb	r2, [r2, #0]
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	1cba      	adds	r2, r7, #2
 8003cc0:	7812      	ldrb	r2, [r2, #0]
 8003cc2:	705a      	strb	r2, [r3, #1]
    return HAL_I2C_Master_Transmit(hlcd->hi2c, RGB_ADDRESS, tx_data,
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	187a      	adds	r2, r7, r1
 8003cca:	2301      	movs	r3, #1
 8003ccc:	425b      	negs	r3, r3
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	21c0      	movs	r1, #192	; 0xc0
 8003cd4:	f001 fcf0 	bl	80056b8 <HAL_I2C_Master_Transmit>
 8003cd8:	0003      	movs	r3, r0
            2, HAL_MAX_DELAY);

}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <lcd1602_setRGB>:

HAL_StatusTypeDef lcd1602_setRGB(LCD1602_RGB_HandleTypeDef_t *hlcd,
        uint8_t r, uint8_t g, uint8_t b)
{
 8003ce2:	b590      	push	{r4, r7, lr}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	000c      	movs	r4, r1
 8003cec:	0010      	movs	r0, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	1cfb      	adds	r3, r7, #3
 8003cf2:	1c22      	adds	r2, r4, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	1cbb      	adds	r3, r7, #2
 8003cf8:	1c02      	adds	r2, r0, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	1c7b      	adds	r3, r7, #1
 8003cfe:	1c0a      	adds	r2, r1, #0
 8003d00:	701a      	strb	r2, [r3, #0]
    uint8_t err_c = 0;
 8003d02:	240f      	movs	r4, #15
 8003d04:	193b      	adds	r3, r7, r4
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
    err_c += lcd1602_setReg(hlcd, REG_RED, r);
 8003d0a:	1cfb      	adds	r3, r7, #3
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2104      	movs	r1, #4
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7ff ffc1 	bl	8003c9a <lcd1602_setReg>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	193b      	adds	r3, r7, r4
 8003d1e:	193a      	adds	r2, r7, r4
 8003d20:	7812      	ldrb	r2, [r2, #0]
 8003d22:	188a      	adds	r2, r1, r2
 8003d24:	701a      	strb	r2, [r3, #0]
    err_c += lcd1602_setReg(hlcd, REG_GREEN, g);
 8003d26:	1cbb      	adds	r3, r7, #2
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2103      	movs	r1, #3
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff ffb3 	bl	8003c9a <lcd1602_setReg>
 8003d34:	0003      	movs	r3, r0
 8003d36:	0019      	movs	r1, r3
 8003d38:	193b      	adds	r3, r7, r4
 8003d3a:	193a      	adds	r2, r7, r4
 8003d3c:	7812      	ldrb	r2, [r2, #0]
 8003d3e:	188a      	adds	r2, r1, r2
 8003d40:	701a      	strb	r2, [r3, #0]
    err_c += lcd1602_setReg(hlcd, REG_BLUE, b);
 8003d42:	1c7b      	adds	r3, r7, #1
 8003d44:	781a      	ldrb	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2102      	movs	r1, #2
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff ffa5 	bl	8003c9a <lcd1602_setReg>
 8003d50:	0003      	movs	r3, r0
 8003d52:	0019      	movs	r1, r3
 8003d54:	193b      	adds	r3, r7, r4
 8003d56:	193a      	adds	r2, r7, r4
 8003d58:	7812      	ldrb	r2, [r2, #0]
 8003d5a:	188a      	adds	r2, r1, r2
 8003d5c:	701a      	strb	r2, [r3, #0]
    if(err_c){
 8003d5e:	193b      	adds	r3, r7, r4
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <lcd1602_setRGB+0x8a>
        return err_c;
 8003d66:	193b      	adds	r3, r7, r4
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	e000      	b.n	8003d6e <lcd1602_setRGB+0x8c>
    }
    return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b005      	add	sp, #20
 8003d74:	bd90      	pop	{r4, r7, pc}

08003d76 <lcd1602_customSymbol>:
}


HAL_StatusTypeDef lcd1602_customSymbol(LCD1602_RGB_HandleTypeDef_t *hlcd,
        uint8_t location, uint8_t charmap[])
{
 8003d76:	b590      	push	{r4, r7, lr}
 8003d78:	b089      	sub	sp, #36	; 0x24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	200b      	movs	r0, #11
 8003d82:	183b      	adds	r3, r7, r0
 8003d84:	1c0a      	adds	r2, r1, #0
 8003d86:	701a      	strb	r2, [r3, #0]
    uint8_t err_c = HAL_OK;
 8003d88:	241b      	movs	r4, #27
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
    location &= 0x7;
 8003d90:	183b      	adds	r3, r7, r0
 8003d92:	183a      	adds	r2, r7, r0
 8003d94:	7812      	ldrb	r2, [r2, #0]
 8003d96:	2107      	movs	r1, #7
 8003d98:	400a      	ands	r2, r1
 8003d9a:	701a      	strb	r2, [r3, #0]
    err_c += lcd1602_command(hlcd, LCD_SETCGRAMADDR | (location << 3));
 8003d9c:	183b      	adds	r3, r7, r0
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	b25b      	sxtb	r3, r3
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	4313      	orrs	r3, r2
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	0011      	movs	r1, r2
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff ff20 	bl	8003bf6 <lcd1602_command>
 8003db6:	0003      	movs	r3, r0
 8003db8:	0019      	movs	r1, r3
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	193a      	adds	r2, r7, r4
 8003dbe:	7812      	ldrb	r2, [r2, #0]
 8003dc0:	188a      	adds	r2, r1, r2
 8003dc2:	701a      	strb	r2, [r3, #0]

    uint8_t data[9];
    data[0] = 0x40;
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<8; i++)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	e00b      	b.n	8003dea <lcd1602_customSymbol+0x74>
        data[i+1] = charmap[i];
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	18d2      	adds	r2, r2, r3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	7811      	ldrb	r1, [r2, #0]
 8003dde:	2210      	movs	r2, #16
 8003de0:	18ba      	adds	r2, r7, r2
 8003de2:	54d1      	strb	r1, [r2, r3]
    for(int i=0; i<8; i++)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	3301      	adds	r3, #1
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b07      	cmp	r3, #7
 8003dee:	ddf0      	ble.n	8003dd2 <lcd1602_customSymbol+0x5c>

    err_c += lcd1602_send(hlcd, data, 9);
 8003df0:	2310      	movs	r3, #16
 8003df2:	18f9      	adds	r1, r7, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2209      	movs	r2, #9
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7ff fee3 	bl	8003bc4 <lcd1602_send>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	0019      	movs	r1, r3
 8003e02:	201b      	movs	r0, #27
 8003e04:	183b      	adds	r3, r7, r0
 8003e06:	183a      	adds	r2, r7, r0
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	188a      	adds	r2, r1, r2
 8003e0c:	701a      	strb	r2, [r3, #0]
    if (err_c)
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <lcd1602_customSymbol+0xa6>
    {
        return err_c;
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	e000      	b.n	8003e1e <lcd1602_customSymbol+0xa8>
    }
    return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b009      	add	sp, #36	; 0x24
 8003e24:	bd90      	pop	{r4, r7, pc}

08003e26 <lcd1602_setColorWhite>:

HAL_StatusTypeDef lcd1602_setColorWhite(LCD1602_RGB_HandleTypeDef_t *hlcd) {
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
    return lcd1602_setRGB(hlcd, 255, 255, 255);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	23ff      	movs	r3, #255	; 0xff
 8003e32:	22ff      	movs	r2, #255	; 0xff
 8003e34:	21ff      	movs	r1, #255	; 0xff
 8003e36:	f7ff ff54 	bl	8003ce2 <lcd1602_setRGB>
 8003e3a:	0003      	movs	r3, r0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <initLog>:
/**
 * @brief initializes all needed log params
 * @param uart handle to output printf
 * @return none
 */
void initLog(UART_HandleTypeDef* huart) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
    hlog_huart = huart; // Store the UART handle for later use
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <initLog+0x18>)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b002      	add	sp, #8
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	20000380 	.word	0x20000380

08003e60 <__io_putchar>:
}


//REROUTING PRINTF STUFF
#ifdef REROUTE_PRINTF
PUTCHAR_PROTOTYPE {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

    HAL_UART_Transmit(hlog_huart, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <__io_putchar+0x24>)
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	425b      	negs	r3, r3
 8003e70:	1d39      	adds	r1, r7, #4
 8003e72:	2201      	movs	r2, #1
 8003e74:	f004 fd02 	bl	800887c <HAL_UART_Transmit>

    return ch;
 8003e78:	687b      	ldr	r3, [r7, #4]
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	20000380 	.word	0x20000380

08003e88 <__io_getchar>:
GETCHAR_PROTOTYPE {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0

    int ch = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]
    HAL_UART_Receive(hlog_huart, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <__io_getchar+0x24>)
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	2301      	movs	r3, #1
 8003e98:	425b      	negs	r3, r3
 8003e9a:	1d39      	adds	r1, r7, #4
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f004 fd8d 	bl	80089bc <HAL_UART_Receive>
    return ch;
 8003ea2:	687b      	ldr	r3, [r7, #4]
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000380 	.word	0x20000380

08003eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af04      	add	r7, sp, #16

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

    HAL_Init();
 8003eb6:	f000 ffa3 	bl	8004e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eba:	f000 f891 	bl	8003fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ebe:	f000 faa3 	bl	8004408 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003ec2:	f000 f8f1 	bl	80040a8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003ec6:	f000 f9cb 	bl	8004260 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003eca:	f000 fa6d 	bl	80043a8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003ece:	f000 f92b 	bl	8004128 <MX_RTC_Init>
  MX_TIM3_Init();
 8003ed2:	f000 fa03 	bl	80042dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Init log Feature
  initLog(&huart1);
 8003ed6:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <main+0xf4>)
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f7ff ffb3 	bl	8003e44 <initLog>
  //init temperature
  max31855_init(&htemp,&hspi2);
 8003ede:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <main+0xf8>)
 8003ee0:	4b32      	ldr	r3, [pc, #200]	; (8003fac <main+0xfc>)
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fe ffcf 	bl	8002e88 <max31855_init>
  //init LCD
  //init Heater
  initHeater(&hheater,&htemp , SW1_GPIO_Port, SW1_Pin, SW2_GPIO_Port, SW2_Pin, SW3_GPIO_Port, SW3_Pin);
 8003eea:	2390      	movs	r3, #144	; 0x90
 8003eec:	05da      	lsls	r2, r3, #23
 8003eee:	492f      	ldr	r1, [pc, #188]	; (8003fac <main+0xfc>)
 8003ef0:	482f      	ldr	r0, [pc, #188]	; (8003fb0 <main+0x100>)
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	9303      	str	r3, [sp, #12]
 8003ef6:	2390      	movs	r3, #144	; 0x90
 8003ef8:	05db      	lsls	r3, r3, #23
 8003efa:	9302      	str	r3, [sp, #8]
 8003efc:	2310      	movs	r3, #16
 8003efe:	9301      	str	r3, [sp, #4]
 8003f00:	2390      	movs	r3, #144	; 0x90
 8003f02:	05db      	lsls	r3, r3, #23
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2308      	movs	r3, #8
 8003f08:	f7ff fa90 	bl	800342c <initHeater>
  heater_set_level(&hheater, 0);
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <main+0x100>)
 8003f0e:	2100      	movs	r1, #0
 8003f10:	0018      	movs	r0, r3
 8003f12:	f7ff fb7f 	bl	8003614 <heater_set_level>
  lcd1602_init(&hlcd, &hi2c1, 16, 2);
 8003f16:	4927      	ldr	r1, [pc, #156]	; (8003fb4 <main+0x104>)
 8003f18:	4827      	ldr	r0, [pc, #156]	; (8003fb8 <main+0x108>)
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	f7ff fd61 	bl	80039e4 <lcd1602_init>
  //init ui
  initUI(&hui,&hevent_queue, &hlcd);
 8003f22:	4a25      	ldr	r2, [pc, #148]	; (8003fb8 <main+0x108>)
 8003f24:	4925      	ldr	r1, [pc, #148]	; (8003fbc <main+0x10c>)
 8003f26:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <main+0x110>)
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 fe7f 	bl	8004c2c <initUI>
  //init encoder
  init_Encoder(&hencoder,&hevent_queue, ENC_A_GPIO_Port, ENC_A_Pin, ENC_B_GPIO_Port, ENC_B_Pin, BUT5_GPIO_Port,BUT5_Pin);
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <main+0x114>)
 8003f30:	4922      	ldr	r1, [pc, #136]	; (8003fbc <main+0x10c>)
 8003f32:	4825      	ldr	r0, [pc, #148]	; (8003fc8 <main+0x118>)
 8003f34:	2380      	movs	r3, #128	; 0x80
 8003f36:	021b      	lsls	r3, r3, #8
 8003f38:	9303      	str	r3, [sp, #12]
 8003f3a:	2390      	movs	r3, #144	; 0x90
 8003f3c:	05db      	lsls	r3, r3, #23
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	2308      	movs	r3, #8
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <main+0x114>)
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2310      	movs	r3, #16
 8003f4a:	f7ff f923 	bl	8003194 <init_Encoder>
  //init event queue$
  initEvent(&hevent_queue);
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <main+0x10c>)
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff f9cf 	bl	80032f4 <initEvent>

  printf("Init complete\r\n");
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <main+0x11c>)
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f006 fb89 	bl	800a670 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Initialize the queue
  HAL_Delay(40000);
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <main+0x120>)
 8003f60:	0018      	movs	r0, r3
 8003f62:	f000 ffb1 	bl	8004ec8 <HAL_Delay>
  printf("ON\r\n");
 8003f66:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <main+0x124>)
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f006 fb81 	bl	800a670 <puts>
  heater_set_level(&hheater, 6);
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <main+0x100>)
 8003f70:	2106      	movs	r1, #6
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7ff fb4e 	bl	8003614 <heater_set_level>
  heater_set_state(&hheater);
 8003f78:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <main+0x100>)
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7ff fbb4 	bl	80036e8 <heater_set_state>
  HAL_Delay(100000);
 8003f80:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <main+0x128>)
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 ffa0 	bl	8004ec8 <HAL_Delay>
  printf("OFF\r\n");
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <main+0x12c>)
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f006 fb70 	bl	800a670 <puts>
  heater_set_level(&hheater, 0);
 8003f90:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <main+0x100>)
 8003f92:	2100      	movs	r1, #0
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fb3d 	bl	8003614 <heater_set_level>
  heater_set_state(&hheater);
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <main+0x100>)
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff fba3 	bl	80036e8 <heater_set_state>

  while (1)
 8003fa2:	e7fe      	b.n	8003fa2 <main+0xf2>
 8003fa4:	200004a4 	.word	0x200004a4
 8003fa8:	200003f8 	.word	0x200003f8
 8003fac:	2000052c 	.word	0x2000052c
 8003fb0:	2000054c 	.word	0x2000054c
 8003fb4:	20000384 	.word	0x20000384
 8003fb8:	20000538 	.word	0x20000538
 8003fbc:	2000090c 	.word	0x2000090c
 8003fc0:	200005c8 	.word	0x200005c8
 8003fc4:	48000400 	.word	0x48000400
 8003fc8:	200005a4 	.word	0x200005a4
 8003fcc:	0800c5ec 	.word	0x0800c5ec
 8003fd0:	00009c40 	.word	0x00009c40
 8003fd4:	0800c5fc 	.word	0x0800c5fc
 8003fd8:	000186a0 	.word	0x000186a0
 8003fdc:	0800c600 	.word	0x0800c600

08003fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fe0:	b590      	push	{r4, r7, lr}
 8003fe2:	b095      	sub	sp, #84	; 0x54
 8003fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fe6:	2420      	movs	r4, #32
 8003fe8:	193b      	adds	r3, r7, r4
 8003fea:	0018      	movs	r0, r3
 8003fec:	2330      	movs	r3, #48	; 0x30
 8003fee:	001a      	movs	r2, r3
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f006 fc39 	bl	800a868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ff6:	2310      	movs	r3, #16
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	001a      	movs	r2, r3
 8004000:	2100      	movs	r1, #0
 8004002:	f006 fc31 	bl	800a868 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004006:	003b      	movs	r3, r7
 8004008:	0018      	movs	r0, r3
 800400a:	2310      	movs	r3, #16
 800400c:	001a      	movs	r2, r3
 800400e:	2100      	movs	r1, #0
 8004010:	f006 fc2a 	bl	800a868 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004014:	0021      	movs	r1, r4
 8004016:	187b      	adds	r3, r7, r1
 8004018:	220a      	movs	r2, #10
 800401a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800401c:	187b      	adds	r3, r7, r1
 800401e:	2201      	movs	r2, #1
 8004020:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004022:	187b      	adds	r3, r7, r1
 8004024:	2210      	movs	r2, #16
 8004026:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004028:	187b      	adds	r3, r7, r1
 800402a:	2201      	movs	r2, #1
 800402c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800402e:	187b      	adds	r3, r7, r1
 8004030:	2200      	movs	r2, #0
 8004032:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004034:	187b      	adds	r3, r7, r1
 8004036:	0018      	movs	r0, r3
 8004038:	f001 ff12 	bl	8005e60 <HAL_RCC_OscConfig>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d001      	beq.n	8004044 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8004040:	f000 fb3e 	bl	80046c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004044:	2110      	movs	r1, #16
 8004046:	187b      	adds	r3, r7, r1
 8004048:	2207      	movs	r2, #7
 800404a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800404c:	187b      	adds	r3, r7, r1
 800404e:	2200      	movs	r2, #0
 8004050:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2100      	movs	r1, #0
 8004062:	0018      	movs	r0, r3
 8004064:	f002 fa16 	bl	8006494 <HAL_RCC_ClockConfig>
 8004068:	1e03      	subs	r3, r0, #0
 800406a:	d001      	beq.n	8004070 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800406c:	f000 fb28 	bl	80046c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8004070:	003b      	movs	r3, r7
 8004072:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <SystemClock_Config+0xc4>)
 8004074:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004076:	003b      	movs	r3, r7
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800407c:	003b      	movs	r3, r7
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004082:	003b      	movs	r3, r7
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	0092      	lsls	r2, r2, #2
 8004088:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800408a:	003b      	movs	r3, r7
 800408c:	0018      	movs	r0, r3
 800408e:	f002 fb45 	bl	800671c <HAL_RCCEx_PeriphCLKConfig>
 8004092:	1e03      	subs	r3, r0, #0
 8004094:	d001      	beq.n	800409a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004096:	f000 fb13 	bl	80046c0 <Error_Handler>
  }
}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	46bd      	mov	sp, r7
 800409e:	b015      	add	sp, #84	; 0x54
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	00010021 	.word	0x00010021

080040a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <MX_I2C1_Init+0x74>)
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <MX_I2C1_Init+0x78>)
 80040b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00801D76;
 80040b2:	4b1a      	ldr	r3, [pc, #104]	; (800411c <MX_I2C1_Init+0x74>)
 80040b4:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <MX_I2C1_Init+0x7c>)
 80040b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <MX_I2C1_Init+0x74>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <MX_I2C1_Init+0x74>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040c4:	4b15      	ldr	r3, [pc, #84]	; (800411c <MX_I2C1_Init+0x74>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040ca:	4b14      	ldr	r3, [pc, #80]	; (800411c <MX_I2C1_Init+0x74>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <MX_I2C1_Init+0x74>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040d6:	4b11      	ldr	r3, [pc, #68]	; (800411c <MX_I2C1_Init+0x74>)
 80040d8:	2200      	movs	r2, #0
 80040da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040dc:	4b0f      	ldr	r3, [pc, #60]	; (800411c <MX_I2C1_Init+0x74>)
 80040de:	2200      	movs	r2, #0
 80040e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040e2:	4b0e      	ldr	r3, [pc, #56]	; (800411c <MX_I2C1_Init+0x74>)
 80040e4:	0018      	movs	r0, r3
 80040e6:	f001 fa51 	bl	800558c <HAL_I2C_Init>
 80040ea:	1e03      	subs	r3, r0, #0
 80040ec:	d001      	beq.n	80040f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040ee:	f000 fae7 	bl	80046c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040f2:	4b0a      	ldr	r3, [pc, #40]	; (800411c <MX_I2C1_Init+0x74>)
 80040f4:	2100      	movs	r1, #0
 80040f6:	0018      	movs	r0, r3
 80040f8:	f001 fe1a 	bl	8005d30 <HAL_I2CEx_ConfigAnalogFilter>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d001      	beq.n	8004104 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004100:	f000 fade 	bl	80046c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004104:	4b05      	ldr	r3, [pc, #20]	; (800411c <MX_I2C1_Init+0x74>)
 8004106:	2100      	movs	r1, #0
 8004108:	0018      	movs	r0, r3
 800410a:	f001 fe5d 	bl	8005dc8 <HAL_I2CEx_ConfigDigitalFilter>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d001      	beq.n	8004116 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004112:	f000 fad5 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000384 	.word	0x20000384
 8004120:	40005400 	.word	0x40005400
 8004124:	00801d76 	.word	0x00801d76

08004128 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b090      	sub	sp, #64	; 0x40
 800412c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800412e:	232c      	movs	r3, #44	; 0x2c
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	0018      	movs	r0, r3
 8004134:	2314      	movs	r3, #20
 8004136:	001a      	movs	r2, r3
 8004138:	2100      	movs	r1, #0
 800413a:	f006 fb95 	bl	800a868 <memset>
  RTC_DateTypeDef sDate = {0};
 800413e:	2328      	movs	r3, #40	; 0x28
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8004146:	003b      	movs	r3, r7
 8004148:	0018      	movs	r0, r3
 800414a:	2328      	movs	r3, #40	; 0x28
 800414c:	001a      	movs	r2, r3
 800414e:	2100      	movs	r1, #0
 8004150:	f006 fb8a 	bl	800a868 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <MX_RTC_Init+0x12c>)
 8004156:	4a40      	ldr	r2, [pc, #256]	; (8004258 <MX_RTC_Init+0x130>)
 8004158:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <MX_RTC_Init+0x12c>)
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004160:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <MX_RTC_Init+0x12c>)
 8004162:	227f      	movs	r2, #127	; 0x7f
 8004164:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004166:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <MX_RTC_Init+0x12c>)
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800416c:	4b39      	ldr	r3, [pc, #228]	; (8004254 <MX_RTC_Init+0x12c>)
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <MX_RTC_Init+0x12c>)
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004178:	4b36      	ldr	r3, [pc, #216]	; (8004254 <MX_RTC_Init+0x12c>)
 800417a:	2200      	movs	r2, #0
 800417c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800417e:	4b35      	ldr	r3, [pc, #212]	; (8004254 <MX_RTC_Init+0x12c>)
 8004180:	0018      	movs	r0, r3
 8004182:	f002 fb99 	bl	80068b8 <HAL_RTC_Init>
 8004186:	1e03      	subs	r3, r0, #0
 8004188:	d001      	beq.n	800418e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800418a:	f000 fa99 	bl	80046c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800418e:	212c      	movs	r1, #44	; 0x2c
 8004190:	187b      	adds	r3, r7, r1
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8004196:	187b      	adds	r3, r7, r1
 8004198:	2200      	movs	r2, #0
 800419a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800419c:	187b      	adds	r3, r7, r1
 800419e:	2200      	movs	r2, #0
 80041a0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80041a2:	187b      	adds	r3, r7, r1
 80041a4:	2200      	movs	r2, #0
 80041a6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80041ae:	1879      	adds	r1, r7, r1
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <MX_RTC_Init+0x12c>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	0018      	movs	r0, r3
 80041b6:	f002 fc17 	bl	80069e8 <HAL_RTC_SetTime>
 80041ba:	1e03      	subs	r3, r0, #0
 80041bc:	d001      	beq.n	80041c2 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80041be:	f000 fa7f 	bl	80046c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80041c2:	2128      	movs	r1, #40	; 0x28
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80041ca:	187b      	adds	r3, r7, r1
 80041cc:	2201      	movs	r2, #1
 80041ce:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	2201      	movs	r2, #1
 80041d4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	2200      	movs	r2, #0
 80041da:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80041dc:	1879      	adds	r1, r7, r1
 80041de:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <MX_RTC_Init+0x12c>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	0018      	movs	r0, r3
 80041e4:	f002 fd04 	bl	8006bf0 <HAL_RTC_SetDate>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80041ec:	f000 fa68 	bl	80046c0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80041f0:	003b      	movs	r3, r7
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80041f6:	003b      	movs	r3, r7
 80041f8:	2200      	movs	r2, #0
 80041fa:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 2;
 80041fc:	003b      	movs	r3, r7
 80041fe:	2202      	movs	r2, #2
 8004200:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004202:	003b      	movs	r3, r7
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004208:	003b      	movs	r3, r7
 800420a:	2200      	movs	r2, #0
 800420c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800420e:	003b      	movs	r3, r7
 8004210:	2200      	movs	r2, #0
 8004212:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8004214:	003b      	movs	r3, r7
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <MX_RTC_Init+0x134>)
 8004218:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800421a:	003b      	movs	r3, r7
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004220:	003b      	movs	r3, r7
 8004222:	2200      	movs	r2, #0
 8004224:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004226:	003b      	movs	r3, r7
 8004228:	2220      	movs	r2, #32
 800422a:	2101      	movs	r1, #1
 800422c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800422e:	003b      	movs	r3, r7
 8004230:	2280      	movs	r2, #128	; 0x80
 8004232:	0052      	lsls	r2, r2, #1
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004236:	0039      	movs	r1, r7
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <MX_RTC_Init+0x12c>)
 800423a:	2200      	movs	r2, #0
 800423c:	0018      	movs	r0, r3
 800423e:	f002 fdb7 	bl	8006db0 <HAL_RTC_SetAlarm_IT>
 8004242:	1e03      	subs	r3, r0, #0
 8004244:	d001      	beq.n	800424a <MX_RTC_Init+0x122>
  {
    Error_Handler();
 8004246:	f000 fa3b 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //TODO add TEMPERATURE_READ_INTERVAL_SECONDS above in sAlarm.AlarmTime.Seconds
  /* USER CODE END RTC_Init 2 */

}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b010      	add	sp, #64	; 0x40
 8004250:	bd80      	pop	{r7, pc}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	200003d8 	.word	0x200003d8
 8004258:	40002800 	.word	0x40002800
 800425c:	80808080 	.word	0x80808080

08004260 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <MX_SPI2_Init+0x74>)
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <MX_SPI2_Init+0x78>)
 8004268:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800426a:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <MX_SPI2_Init+0x74>)
 800426c:	2282      	movs	r2, #130	; 0x82
 800426e:	0052      	lsls	r2, r2, #1
 8004270:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <MX_SPI2_Init+0x74>)
 8004274:	2200      	movs	r2, #0
 8004276:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004278:	4b16      	ldr	r3, [pc, #88]	; (80042d4 <MX_SPI2_Init+0x74>)
 800427a:	22e0      	movs	r2, #224	; 0xe0
 800427c:	00d2      	lsls	r2, r2, #3
 800427e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <MX_SPI2_Init+0x74>)
 8004282:	2200      	movs	r2, #0
 8004284:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <MX_SPI2_Init+0x74>)
 8004288:	2200      	movs	r2, #0
 800428a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <MX_SPI2_Init+0x74>)
 800428e:	2280      	movs	r2, #128	; 0x80
 8004290:	0092      	lsls	r2, r2, #2
 8004292:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <MX_SPI2_Init+0x74>)
 8004296:	2218      	movs	r2, #24
 8004298:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <MX_SPI2_Init+0x74>)
 800429c:	2200      	movs	r2, #0
 800429e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <MX_SPI2_Init+0x74>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <MX_SPI2_Init+0x74>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <MX_SPI2_Init+0x74>)
 80042ae:	2207      	movs	r2, #7
 80042b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <MX_SPI2_Init+0x74>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <MX_SPI2_Init+0x74>)
 80042ba:	2208      	movs	r2, #8
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <MX_SPI2_Init+0x74>)
 80042c0:	0018      	movs	r0, r3
 80042c2:	f002 ff73 	bl	80071ac <HAL_SPI_Init>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d001      	beq.n	80042ce <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80042ca:	f000 f9f9 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200003f8 	.word	0x200003f8
 80042d8:	40003800 	.word	0x40003800

080042dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042e2:	2310      	movs	r3, #16
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	0018      	movs	r0, r3
 80042e8:	2308      	movs	r3, #8
 80042ea:	001a      	movs	r2, r3
 80042ec:	2100      	movs	r1, #0
 80042ee:	f006 fabb 	bl	800a868 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80042f2:	003b      	movs	r3, r7
 80042f4:	0018      	movs	r0, r3
 80042f6:	2310      	movs	r3, #16
 80042f8:	001a      	movs	r2, r3
 80042fa:	2100      	movs	r1, #0
 80042fc:	f006 fab4 	bl	800a868 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004300:	4b26      	ldr	r3, [pc, #152]	; (800439c <MX_TIM3_Init+0xc0>)
 8004302:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <MX_TIM3_Init+0xc4>)
 8004304:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <MX_TIM3_Init+0xc0>)
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800430c:	4b23      	ldr	r3, [pc, #140]	; (800439c <MX_TIM3_Init+0xc0>)
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004312:	4b22      	ldr	r3, [pc, #136]	; (800439c <MX_TIM3_Init+0xc0>)
 8004314:	4a23      	ldr	r2, [pc, #140]	; (80043a4 <MX_TIM3_Init+0xc8>)
 8004316:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004318:	4b20      	ldr	r3, [pc, #128]	; (800439c <MX_TIM3_Init+0xc0>)
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431e:	4b1f      	ldr	r3, [pc, #124]	; (800439c <MX_TIM3_Init+0xc0>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <MX_TIM3_Init+0xc0>)
 8004326:	0018      	movs	r0, r3
 8004328:	f003 fd00 	bl	8007d2c <HAL_TIM_IC_Init>
 800432c:	1e03      	subs	r3, r0, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004330:	f000 f9c6 	bl	80046c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004334:	2110      	movs	r1, #16
 8004336:	187b      	adds	r3, r7, r1
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433c:	187b      	adds	r3, r7, r1
 800433e:	2200      	movs	r2, #0
 8004340:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004342:	187a      	adds	r2, r7, r1
 8004344:	4b15      	ldr	r3, [pc, #84]	; (800439c <MX_TIM3_Init+0xc0>)
 8004346:	0011      	movs	r1, r2
 8004348:	0018      	movs	r0, r3
 800434a:	f004 f9db 	bl	8008704 <HAL_TIMEx_MasterConfigSynchronization>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d001      	beq.n	8004356 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8004352:	f000 f9b5 	bl	80046c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8004356:	003b      	movs	r3, r7
 8004358:	220a      	movs	r2, #10
 800435a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800435c:	003b      	movs	r3, r7
 800435e:	2201      	movs	r2, #1
 8004360:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004362:	003b      	movs	r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 11;
 8004368:	003b      	movs	r3, r7
 800436a:	220b      	movs	r2, #11
 800436c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800436e:	0039      	movs	r1, r7
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <MX_TIM3_Init+0xc0>)
 8004372:	2200      	movs	r2, #0
 8004374:	0018      	movs	r0, r3
 8004376:	f003 ff47 	bl	8008208 <HAL_TIM_IC_ConfigChannel>
 800437a:	1e03      	subs	r3, r0, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800437e:	f000 f99f 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <MX_TIM3_Init+0xc0>)
 8004384:	2100      	movs	r1, #0
 8004386:	0018      	movs	r0, r3
 8004388:	f003 fd20 	bl	8007dcc <HAL_TIM_IC_Start_IT>
 800438c:	1e03      	subs	r3, r0, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM3_Init+0xb8>
  {
      Error_Handler();  // Handle the error.
 8004390:	f000 f996 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE END TIM3_Init 2 */

}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	b006      	add	sp, #24
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2000045c 	.word	0x2000045c
 80043a0:	40000400 	.word	0x40000400
 80043a4:	0000ffff 	.word	0x0000ffff

080043a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043ae:	4a15      	ldr	r2, [pc, #84]	; (8004404 <MX_USART1_UART_Init+0x5c>)
 80043b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043b4:	2296      	movs	r2, #150	; 0x96
 80043b6:	0192      	lsls	r2, r2, #6
 80043b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043ba:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043ce:	220c      	movs	r2, #12
 80043d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043da:	2200      	movs	r2, #0
 80043dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <MX_USART1_UART_Init+0x58>)
 80043ec:	0018      	movs	r0, r3
 80043ee:	f004 f9f1 	bl	80087d4 <HAL_UART_Init>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d001      	beq.n	80043fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80043f6:	f000 f963 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	200004a4 	.word	0x200004a4
 8004404:	40013800 	.word	0x40013800

08004408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440e:	2414      	movs	r4, #20
 8004410:	193b      	adds	r3, r7, r4
 8004412:	0018      	movs	r0, r3
 8004414:	2314      	movs	r3, #20
 8004416:	001a      	movs	r2, r3
 8004418:	2100      	movs	r1, #0
 800441a:	f006 fa25 	bl	800a868 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	4b69      	ldr	r3, [pc, #420]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	4b68      	ldr	r3, [pc, #416]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	0309      	lsls	r1, r1, #12
 8004428:	430a      	orrs	r2, r1
 800442a:	615a      	str	r2, [r3, #20]
 800442c:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	031b      	lsls	r3, r3, #12
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800443a:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	0289      	lsls	r1, r1, #10
 8004444:	430a      	orrs	r2, r1
 8004446:	615a      	str	r2, [r3, #20]
 8004448:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	029b      	lsls	r3, r3, #10
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	02c9      	lsls	r1, r1, #11
 8004460:	430a      	orrs	r2, r1
 8004462:	615a      	str	r2, [r3, #20]
 8004464:	4b57      	ldr	r3, [pc, #348]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	02db      	lsls	r3, r3, #11
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004472:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	03c9      	lsls	r1, r1, #15
 800447c:	430a      	orrs	r2, r1
 800447e:	615a      	str	r2, [r3, #20]
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <MX_GPIO_Init+0x1bc>)
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	03db      	lsls	r3, r3, #15
 8004488:	4013      	ands	r3, r2
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW1_Pin|SW2_Pin|SW3_Pin, GPIO_PIN_RESET);
 800448e:	2390      	movs	r3, #144	; 0x90
 8004490:	05db      	lsls	r3, r3, #23
 8004492:	2200      	movs	r2, #0
 8004494:	2138      	movs	r1, #56	; 0x38
 8004496:	0018      	movs	r0, r3
 8004498:	f001 f823 	bl	80054e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	015b      	lsls	r3, r3, #5
 80044a0:	4849      	ldr	r0, [pc, #292]	; (80045c8 <MX_GPIO_Init+0x1c0>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	0019      	movs	r1, r3
 80044a6:	f001 f81c 	bl	80054e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80044aa:	193b      	adds	r3, r7, r4
 80044ac:	2238      	movs	r2, #56	; 0x38
 80044ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044b0:	193b      	adds	r3, r7, r4
 80044b2:	2201      	movs	r2, #1
 80044b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b6:	193b      	adds	r3, r7, r4
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	193b      	adds	r3, r7, r4
 80044be:	2200      	movs	r2, #0
 80044c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	193a      	adds	r2, r7, r4
 80044c4:	2390      	movs	r3, #144	; 0x90
 80044c6:	05db      	lsls	r3, r3, #23
 80044c8:	0011      	movs	r1, r2
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fe7c 	bl	80051c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT4_Pin BUT3_Pin ENC_B_Pin */
  GPIO_InitStruct.Pin = BUT4_Pin|BUT3_Pin|ENC_B_Pin;
 80044d0:	0021      	movs	r1, r4
 80044d2:	187b      	adds	r3, r7, r1
 80044d4:	220b      	movs	r2, #11
 80044d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044d8:	187b      	adds	r3, r7, r1
 80044da:	2288      	movs	r2, #136	; 0x88
 80044dc:	0352      	lsls	r2, r2, #13
 80044de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	2200      	movs	r2, #0
 80044e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044e6:	000c      	movs	r4, r1
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	4a37      	ldr	r2, [pc, #220]	; (80045c8 <MX_GPIO_Init+0x1c0>)
 80044ec:	0019      	movs	r1, r3
 80044ee:	0010      	movs	r0, r2
 80044f0:	f000 fe6a 	bl	80051c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_C_Pin */
  GPIO_InitStruct.Pin = SW_C_Pin;
 80044f4:	0021      	movs	r1, r4
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2204      	movs	r2, #4
 80044fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	22c4      	movs	r2, #196	; 0xc4
 8004500:	0392      	lsls	r2, r2, #14
 8004502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2202      	movs	r2, #2
 8004508:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_C_GPIO_Port, &GPIO_InitStruct);
 800450a:	000c      	movs	r4, r1
 800450c:	187b      	adds	r3, r7, r1
 800450e:	4a2e      	ldr	r2, [pc, #184]	; (80045c8 <MX_GPIO_Init+0x1c0>)
 8004510:	0019      	movs	r1, r3
 8004512:	0010      	movs	r0, r2
 8004514:	f000 fe58 	bl	80051c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8004518:	0021      	movs	r1, r4
 800451a:	187b      	adds	r3, r7, r1
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	0152      	lsls	r2, r2, #5
 8004520:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004522:	000c      	movs	r4, r1
 8004524:	193b      	adds	r3, r7, r4
 8004526:	2201      	movs	r2, #1
 8004528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	193b      	adds	r3, r7, r4
 800452c:	2200      	movs	r2, #0
 800452e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004530:	193b      	adds	r3, r7, r4
 8004532:	2200      	movs	r2, #0
 8004534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8004536:	193b      	adds	r3, r7, r4
 8004538:	4a23      	ldr	r2, [pc, #140]	; (80045c8 <MX_GPIO_Init+0x1c0>)
 800453a:	0019      	movs	r1, r3
 800453c:	0010      	movs	r0, r2
 800453e:	f000 fe43 	bl	80051c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT2_Pin BUT1_Pin */
  GPIO_InitStruct.Pin = BUT2_Pin|BUT1_Pin;
 8004542:	0021      	movs	r1, r4
 8004544:	187b      	adds	r3, r7, r1
 8004546:	22c0      	movs	r2, #192	; 0xc0
 8004548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800454a:	187b      	adds	r3, r7, r1
 800454c:	2288      	movs	r2, #136	; 0x88
 800454e:	0352      	lsls	r2, r2, #13
 8004550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004552:	187b      	adds	r3, r7, r1
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004558:	000c      	movs	r4, r1
 800455a:	187b      	adds	r3, r7, r1
 800455c:	4a1b      	ldr	r2, [pc, #108]	; (80045cc <MX_GPIO_Init+0x1c4>)
 800455e:	0019      	movs	r1, r3
 8004560:	0010      	movs	r0, r2
 8004562:	f000 fe31 	bl	80051c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT5_Pin */
  GPIO_InitStruct.Pin = BUT5_Pin;
 8004566:	0021      	movs	r1, r4
 8004568:	187b      	adds	r3, r7, r1
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	0212      	lsls	r2, r2, #8
 800456e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004570:	187b      	adds	r3, r7, r1
 8004572:	2288      	movs	r2, #136	; 0x88
 8004574:	0352      	lsls	r2, r2, #13
 8004576:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	187b      	adds	r3, r7, r1
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUT5_GPIO_Port, &GPIO_InitStruct);
 800457e:	187a      	adds	r2, r7, r1
 8004580:	2390      	movs	r3, #144	; 0x90
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f000 fe1e 	bl	80051c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800458c:	2200      	movs	r2, #0
 800458e:	2100      	movs	r1, #0
 8004590:	2005      	movs	r0, #5
 8004592:	f000 fd69 	bl	8005068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004596:	2005      	movs	r0, #5
 8004598:	f000 fd7b 	bl	8005092 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	2006      	movs	r0, #6
 80045a2:	f000 fd61 	bl	8005068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80045a6:	2006      	movs	r0, #6
 80045a8:	f000 fd73 	bl	8005092 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	2007      	movs	r0, #7
 80045b2:	f000 fd59 	bl	8005068 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80045b6:	2007      	movs	r0, #7
 80045b8:	f000 fd6b 	bl	8005092 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b00b      	add	sp, #44	; 0x2c
 80045c2:	bd90      	pop	{r4, r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	48000400 	.word	0x48000400
 80045cc:	48001400 	.word	0x48001400

080045d0 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

    heater_on_interupt(&hheater, hrtc);
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4b04      	ldr	r3, [pc, #16]	; (80045ec <HAL_RTC_AlarmAEventCallback+0x1c>)
 80045dc:	0011      	movs	r1, r2
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff f994 	bl	800390c <heater_on_interupt>
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	2000054c 	.word	0x2000054c

080045f0 <HAL_TIM_IC_CaptureCallback>:
uint8_t counter = 0;
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim){
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
    encoder_callback(&hencoder, 0xff);
 80045f8:	4b04      	ldr	r3, [pc, #16]	; (800460c <HAL_TIM_IC_CaptureCallback+0x1c>)
 80045fa:	21ff      	movs	r1, #255	; 0xff
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7fe fdf7 	bl	80031f0 <encoder_callback>
}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b002      	add	sp, #8
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	200005a4 	.word	0x200005a4

08004610 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	0002      	movs	r2, r0
 8004618:	1dbb      	adds	r3, r7, #6
 800461a:	801a      	strh	r2, [r3, #0]
    //NOTE: All pins are different Pin but also different Ports
    switch (GPIO_Pin) {
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	0212      	lsls	r2, r2, #8
 8004624:	4293      	cmp	r3, r2
 8004626:	d02c      	beq.n	8004682 <HAL_GPIO_EXTI_Callback+0x72>
 8004628:	2280      	movs	r2, #128	; 0x80
 800462a:	0212      	lsls	r2, r2, #8
 800462c:	4293      	cmp	r3, r2
 800462e:	dc3c      	bgt.n	80046aa <HAL_GPIO_EXTI_Callback+0x9a>
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d00e      	beq.n	8004652 <HAL_GPIO_EXTI_Callback+0x42>
 8004634:	dc39      	bgt.n	80046aa <HAL_GPIO_EXTI_Callback+0x9a>
 8004636:	2b10      	cmp	r3, #16
 8004638:	dc08      	bgt.n	800464c <HAL_GPIO_EXTI_Callback+0x3c>
 800463a:	2b00      	cmp	r3, #0
 800463c:	dd35      	ble.n	80046aa <HAL_GPIO_EXTI_Callback+0x9a>
 800463e:	2b10      	cmp	r3, #16
 8004640:	d833      	bhi.n	80046aa <HAL_GPIO_EXTI_Callback+0x9a>
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8004646:	18d3      	adds	r3, r2, r3
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	469f      	mov	pc, r3
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d006      	beq.n	800465e <HAL_GPIO_EXTI_Callback+0x4e>
                }
            }
#endif
            break;
        default:
            break;
 8004650:	e02b      	b.n	80046aa <HAL_GPIO_EXTI_Callback+0x9a>
            event_enqueue(&hevent_queue, BUT1);
 8004652:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8004654:	2101      	movs	r1, #1
 8004656:	0018      	movs	r0, r3
 8004658:	f7fe fe98 	bl	800338c <event_enqueue>
            break;
 800465c:	e026      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            event_enqueue(&hevent_queue, BUT2);
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8004660:	2102      	movs	r1, #2
 8004662:	0018      	movs	r0, r3
 8004664:	f7fe fe92 	bl	800338c <event_enqueue>
            break;
 8004668:	e020      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            event_enqueue(&hevent_queue, BUT3);
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800466c:	2103      	movs	r1, #3
 800466e:	0018      	movs	r0, r3
 8004670:	f7fe fe8c 	bl	800338c <event_enqueue>
            break;
 8004674:	e01a      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            event_enqueue(&hevent_queue, BUT4);
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8004678:	2104      	movs	r1, #4
 800467a:	0018      	movs	r0, r3
 800467c:	f7fe fe86 	bl	800338c <event_enqueue>
            break;
 8004680:	e014      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            encoder_callback(&hencoder, BUT5_Pin);
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	021a      	lsls	r2, r3, #8
 8004686:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <HAL_GPIO_EXTI_Callback+0xac>)
 8004688:	0011      	movs	r1, r2
 800468a:	0018      	movs	r0, r3
 800468c:	f7fe fdb0 	bl	80031f0 <encoder_callback>
            break;
 8004690:	e00c      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            encoder_callback(&hencoder, ENC_A_Pin);
 8004692:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <HAL_GPIO_EXTI_Callback+0xac>)
 8004694:	2110      	movs	r1, #16
 8004696:	0018      	movs	r0, r3
 8004698:	f7fe fdaa 	bl	80031f0 <encoder_callback>
            break;
 800469c:	e006      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            encoder_callback(&hencoder, ENC_B_Pin);
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_GPIO_EXTI_Callback+0xac>)
 80046a0:	2108      	movs	r1, #8
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7fe fda4 	bl	80031f0 <encoder_callback>
            break;
 80046a8:	e000      	b.n	80046ac <HAL_GPIO_EXTI_Callback+0x9c>
            break;
 80046aa:	46c0      	nop			; (mov r8, r8)
    }
}
 80046ac:	46c0      	nop			; (mov r8, r8)
 80046ae:	46bd      	mov	sp, r7
 80046b0:	b002      	add	sp, #8
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	0800c6e4 	.word	0x0800c6e4
 80046b8:	2000090c 	.word	0x2000090c
 80046bc:	200005a4 	.word	0x200005a4

080046c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
}
 80046c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046c8:	e7fe      	b.n	80046c8 <Error_Handler+0x8>
	...

080046cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <HAL_MspInit+0x44>)
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <HAL_MspInit+0x44>)
 80046d8:	2101      	movs	r1, #1
 80046da:	430a      	orrs	r2, r1
 80046dc:	619a      	str	r2, [r3, #24]
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_MspInit+0x44>)
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2201      	movs	r2, #1
 80046e4:	4013      	ands	r3, r2
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_MspInit+0x44>)
 80046ec:	69da      	ldr	r2, [r3, #28]
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_MspInit+0x44>)
 80046f0:	2180      	movs	r1, #128	; 0x80
 80046f2:	0549      	lsls	r1, r1, #21
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_MspInit+0x44>)
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	055b      	lsls	r3, r3, #21
 8004700:	4013      	ands	r3, r2
 8004702:	603b      	str	r3, [r7, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	40021000 	.word	0x40021000

08004714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b08b      	sub	sp, #44	; 0x2c
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	2414      	movs	r4, #20
 800471e:	193b      	adds	r3, r7, r4
 8004720:	0018      	movs	r0, r3
 8004722:	2314      	movs	r3, #20
 8004724:	001a      	movs	r2, r3
 8004726:	2100      	movs	r1, #0
 8004728:	f006 f89e 	bl	800a868 <memset>
  if(hi2c->Instance==I2C1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a1c      	ldr	r2, [pc, #112]	; (80047a4 <HAL_I2C_MspInit+0x90>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d131      	bne.n	800479a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004736:	4b1c      	ldr	r3, [pc, #112]	; (80047a8 <HAL_I2C_MspInit+0x94>)
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <HAL_I2C_MspInit+0x94>)
 800473c:	2180      	movs	r1, #128	; 0x80
 800473e:	02c9      	lsls	r1, r1, #11
 8004740:	430a      	orrs	r2, r1
 8004742:	615a      	str	r2, [r3, #20]
 8004744:	4b18      	ldr	r3, [pc, #96]	; (80047a8 <HAL_I2C_MspInit+0x94>)
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	02db      	lsls	r3, r3, #11
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004752:	0021      	movs	r1, r4
 8004754:	187b      	adds	r3, r7, r1
 8004756:	22c0      	movs	r2, #192	; 0xc0
 8004758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800475a:	187b      	adds	r3, r7, r1
 800475c:	2212      	movs	r2, #18
 800475e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	187b      	adds	r3, r7, r1
 8004762:	2200      	movs	r2, #0
 8004764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004766:	187b      	adds	r3, r7, r1
 8004768:	2203      	movs	r2, #3
 800476a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800476c:	187b      	adds	r3, r7, r1
 800476e:	2201      	movs	r2, #1
 8004770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004772:	187b      	adds	r3, r7, r1
 8004774:	4a0d      	ldr	r2, [pc, #52]	; (80047ac <HAL_I2C_MspInit+0x98>)
 8004776:	0019      	movs	r1, r3
 8004778:	0010      	movs	r0, r2
 800477a:	f000 fd25 	bl	80051c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <HAL_I2C_MspInit+0x94>)
 8004780:	69da      	ldr	r2, [r3, #28]
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_I2C_MspInit+0x94>)
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	0389      	lsls	r1, r1, #14
 8004788:	430a      	orrs	r2, r1
 800478a:	61da      	str	r2, [r3, #28]
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_I2C_MspInit+0x94>)
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	2380      	movs	r3, #128	; 0x80
 8004792:	039b      	lsls	r3, r3, #14
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b00b      	add	sp, #44	; 0x2c
 80047a0:	bd90      	pop	{r4, r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	40005400 	.word	0x40005400
 80047a8:	40021000 	.word	0x40021000
 80047ac:	48000400 	.word	0x48000400

080047b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <HAL_RTC_MspInit+0x38>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10e      	bne.n	80047e0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <HAL_RTC_MspInit+0x3c>)
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RTC_MspInit+0x3c>)
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	0209      	lsls	r1, r1, #8
 80047cc:	430a      	orrs	r2, r1
 80047ce:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80047d0:	2200      	movs	r2, #0
 80047d2:	2100      	movs	r1, #0
 80047d4:	2002      	movs	r0, #2
 80047d6:	f000 fc47 	bl	8005068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80047da:	2002      	movs	r0, #2
 80047dc:	f000 fc59 	bl	8005092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40002800 	.word	0x40002800
 80047ec:	40021000 	.word	0x40021000

080047f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047f0:	b590      	push	{r4, r7, lr}
 80047f2:	b08b      	sub	sp, #44	; 0x2c
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f8:	2414      	movs	r4, #20
 80047fa:	193b      	adds	r3, r7, r4
 80047fc:	0018      	movs	r0, r3
 80047fe:	2314      	movs	r3, #20
 8004800:	001a      	movs	r2, r3
 8004802:	2100      	movs	r1, #0
 8004804:	f006 f830 	bl	800a868 <memset>
  if(hspi->Instance==SPI2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <HAL_SPI_MspInit+0x90>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d132      	bne.n	8004878 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <HAL_SPI_MspInit+0x94>)
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_SPI_MspInit+0x94>)
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	01c9      	lsls	r1, r1, #7
 800481c:	430a      	orrs	r2, r1
 800481e:	61da      	str	r2, [r3, #28]
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HAL_SPI_MspInit+0x94>)
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	2380      	movs	r3, #128	; 0x80
 8004826:	01db      	lsls	r3, r3, #7
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	4b15      	ldr	r3, [pc, #84]	; (8004884 <HAL_SPI_MspInit+0x94>)
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_SPI_MspInit+0x94>)
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	02c9      	lsls	r1, r1, #11
 8004838:	430a      	orrs	r2, r1
 800483a:	615a      	str	r2, [r3, #20]
 800483c:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_SPI_MspInit+0x94>)
 800483e:	695a      	ldr	r2, [r3, #20]
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	02db      	lsls	r3, r3, #11
 8004844:	4013      	ands	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800484a:	193b      	adds	r3, r7, r4
 800484c:	22e0      	movs	r2, #224	; 0xe0
 800484e:	0212      	lsls	r2, r2, #8
 8004850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004852:	0021      	movs	r1, r4
 8004854:	187b      	adds	r3, r7, r1
 8004856:	2202      	movs	r2, #2
 8004858:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	187b      	adds	r3, r7, r1
 800485c:	2200      	movs	r2, #0
 800485e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004860:	187b      	adds	r3, r7, r1
 8004862:	2203      	movs	r2, #3
 8004864:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004866:	187b      	adds	r3, r7, r1
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486c:	187b      	adds	r3, r7, r1
 800486e:	4a06      	ldr	r2, [pc, #24]	; (8004888 <HAL_SPI_MspInit+0x98>)
 8004870:	0019      	movs	r1, r3
 8004872:	0010      	movs	r0, r2
 8004874:	f000 fca8 	bl	80051c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b00b      	add	sp, #44	; 0x2c
 800487e:	bd90      	pop	{r4, r7, pc}
 8004880:	40003800 	.word	0x40003800
 8004884:	40021000 	.word	0x40021000
 8004888:	48000400 	.word	0x48000400

0800488c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800488c:	b590      	push	{r4, r7, lr}
 800488e:	b08b      	sub	sp, #44	; 0x2c
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004894:	2414      	movs	r4, #20
 8004896:	193b      	adds	r3, r7, r4
 8004898:	0018      	movs	r0, r3
 800489a:	2314      	movs	r3, #20
 800489c:	001a      	movs	r2, r3
 800489e:	2100      	movs	r1, #0
 80048a0:	f005 ffe2 	bl	800a868 <memset>
  if(htim_ic->Instance==TIM3)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <HAL_TIM_IC_MspInit+0x9c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d137      	bne.n	800491e <HAL_TIM_IC_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048ae:	4b1f      	ldr	r3, [pc, #124]	; (800492c <HAL_TIM_IC_MspInit+0xa0>)
 80048b0:	69da      	ldr	r2, [r3, #28]
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <HAL_TIM_IC_MspInit+0xa0>)
 80048b4:	2102      	movs	r1, #2
 80048b6:	430a      	orrs	r2, r1
 80048b8:	61da      	str	r2, [r3, #28]
 80048ba:	4b1c      	ldr	r3, [pc, #112]	; (800492c <HAL_TIM_IC_MspInit+0xa0>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2202      	movs	r2, #2
 80048c0:	4013      	ands	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048c6:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_TIM_IC_MspInit+0xa0>)
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <HAL_TIM_IC_MspInit+0xa0>)
 80048cc:	2180      	movs	r1, #128	; 0x80
 80048ce:	02c9      	lsls	r1, r1, #11
 80048d0:	430a      	orrs	r2, r1
 80048d2:	615a      	str	r2, [r3, #20]
 80048d4:	4b15      	ldr	r3, [pc, #84]	; (800492c <HAL_TIM_IC_MspInit+0xa0>)
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	2380      	movs	r3, #128	; 0x80
 80048da:	02db      	lsls	r3, r3, #11
 80048dc:	4013      	ands	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 80048e2:	0021      	movs	r1, r4
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	2210      	movs	r2, #16
 80048e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ea:	187b      	adds	r3, r7, r1
 80048ec:	2202      	movs	r2, #2
 80048ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	187b      	adds	r3, r7, r1
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f6:	187b      	adds	r3, r7, r1
 80048f8:	2200      	movs	r2, #0
 80048fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80048fc:	187b      	adds	r3, r7, r1
 80048fe:	2201      	movs	r2, #1
 8004900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004902:	187b      	adds	r3, r7, r1
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_TIM_IC_MspInit+0xa4>)
 8004906:	0019      	movs	r1, r3
 8004908:	0010      	movs	r0, r2
 800490a:	f000 fc5d 	bl	80051c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	2010      	movs	r0, #16
 8004914:	f000 fba8 	bl	8005068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004918:	2010      	movs	r0, #16
 800491a:	f000 fbba 	bl	8005092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	46bd      	mov	sp, r7
 8004922:	b00b      	add	sp, #44	; 0x2c
 8004924:	bd90      	pop	{r4, r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	40000400 	.word	0x40000400
 800492c:	40021000 	.word	0x40021000
 8004930:	48000400 	.word	0x48000400

08004934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b08b      	sub	sp, #44	; 0x2c
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800493c:	2414      	movs	r4, #20
 800493e:	193b      	adds	r3, r7, r4
 8004940:	0018      	movs	r0, r3
 8004942:	2314      	movs	r3, #20
 8004944:	001a      	movs	r2, r3
 8004946:	2100      	movs	r1, #0
 8004948:	f005 ff8e 	bl	800a868 <memset>
  if(huart->Instance==USART1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a21      	ldr	r2, [pc, #132]	; (80049d8 <HAL_UART_MspInit+0xa4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d13b      	bne.n	80049ce <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <HAL_UART_MspInit+0xa8>)
 8004958:	699a      	ldr	r2, [r3, #24]
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_UART_MspInit+0xa8>)
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	01c9      	lsls	r1, r1, #7
 8004960:	430a      	orrs	r2, r1
 8004962:	619a      	str	r2, [r3, #24]
 8004964:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <HAL_UART_MspInit+0xa8>)
 8004966:	699a      	ldr	r2, [r3, #24]
 8004968:	2380      	movs	r3, #128	; 0x80
 800496a:	01db      	lsls	r3, r3, #7
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <HAL_UART_MspInit+0xa8>)
 8004974:	695a      	ldr	r2, [r3, #20]
 8004976:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_UART_MspInit+0xa8>)
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	0289      	lsls	r1, r1, #10
 800497c:	430a      	orrs	r2, r1
 800497e:	615a      	str	r2, [r3, #20]
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_UART_MspInit+0xa8>)
 8004982:	695a      	ldr	r2, [r3, #20]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800498e:	193b      	adds	r3, r7, r4
 8004990:	22c0      	movs	r2, #192	; 0xc0
 8004992:	00d2      	lsls	r2, r2, #3
 8004994:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	0021      	movs	r1, r4
 8004998:	187b      	adds	r3, r7, r1
 800499a:	2202      	movs	r2, #2
 800499c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	187b      	adds	r3, r7, r1
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	2203      	movs	r2, #3
 80049a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	2201      	movs	r2, #1
 80049ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049b0:	187a      	adds	r2, r7, r1
 80049b2:	2390      	movs	r3, #144	; 0x90
 80049b4:	05db      	lsls	r3, r3, #23
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 fc05 	bl	80051c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	201b      	movs	r0, #27
 80049c4:	f000 fb50 	bl	8005068 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049c8:	201b      	movs	r0, #27
 80049ca:	f000 fb62 	bl	8005092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b00b      	add	sp, #44	; 0x2c
 80049d4:	bd90      	pop	{r4, r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40021000 	.word	0x40021000

080049e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <NMI_Handler+0x4>

080049e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ea:	e7fe      	b.n	80049ea <HardFault_Handler+0x4>

080049ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049fa:	46c0      	nop			; (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a04:	f000 fa44 	bl	8004e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <RTC_IRQHandler+0x14>)
 8004a16:	0018      	movs	r0, r3
 8004a18:	f002 fac4 	bl	8006fa4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	200003d8 	.word	0x200003d8

08004a28 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT4_Pin);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f000 fd91 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8004a32:	2002      	movs	r0, #2
 8004a34:	f000 fd8e 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_C_Pin);
 8004a42:	2004      	movs	r0, #4
 8004a44:	f000 fd86 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 8004a48:	2008      	movs	r0, #8
 8004a4a:	f000 fd83 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8004a58:	2040      	movs	r0, #64	; 0x40
 8004a5a:	f000 fd7b 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8004a5e:	2080      	movs	r0, #128	; 0x80
 8004a60:	f000 fd78 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUT5_Pin);
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 fd73 	bl	8005554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
    //printf("hello\n\r");
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a78:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <TIM3_IRQHandler+0x14>)
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f003 faae 	bl	8007fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	2000045c 	.word	0x2000045c

08004a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <USART1_IRQHandler+0x14>)
 8004a92:	0018      	movs	r0, r3
 8004a94:	f004 f866 	bl	8008b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	200004a4 	.word	0x200004a4

08004aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  return 1;
 8004aa8:	2301      	movs	r3, #1
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_kill>:

int _kill(int pid, int sig)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004aba:	f005 ff41 	bl	800a940 <__errno>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	2216      	movs	r2, #22
 8004ac2:	601a      	str	r2, [r3, #0]
  return -1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	425b      	negs	r3, r3
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_exit>:

void _exit (int status)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ad8:	2301      	movs	r3, #1
 8004ada:	425a      	negs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0011      	movs	r1, r2
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f7ff ffe5 	bl	8004ab0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ae6:	e7fe      	b.n	8004ae6 <_exit+0x16>

08004ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e00a      	b.n	8004b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004afa:	f7ff f9c5 	bl	8003e88 <__io_getchar>
 8004afe:	0001      	movs	r1, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	60ba      	str	r2, [r7, #8]
 8004b06:	b2ca      	uxtb	r2, r1
 8004b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	dbf0      	blt.n	8004afa <_read+0x12>
  }

  return len;
 8004b18:	687b      	ldr	r3, [r7, #4]
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b006      	add	sp, #24
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b086      	sub	sp, #24
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	e009      	b.n	8004b48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	60ba      	str	r2, [r7, #8]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7ff f98f 	bl	8003e60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3301      	adds	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	dbf1      	blt.n	8004b34 <_write+0x12>
  }
  return len;
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	0018      	movs	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b006      	add	sp, #24
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <_close>:

int _close(int file)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	425b      	negs	r3, r3
}
 8004b66:	0018      	movs	r0, r3
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	0192      	lsls	r2, r2, #6
 8004b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	0018      	movs	r0, r3
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <_isatty>:

int _isatty(int file)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b92:	2301      	movs	r3, #1
}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bbc:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <_sbrk+0x5c>)
 8004bbe:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <_sbrk+0x60>)
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <_sbrk+0x64>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <_sbrk+0x64>)
 8004bd2:	4a12      	ldr	r2, [pc, #72]	; (8004c1c <_sbrk+0x68>)
 8004bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	18d3      	adds	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d207      	bcs.n	8004bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004be4:	f005 feac 	bl	800a940 <__errno>
 8004be8:	0003      	movs	r3, r0
 8004bea:	220c      	movs	r2, #12
 8004bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	425b      	negs	r3, r3
 8004bf2:	e009      	b.n	8004c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bf4:	4b08      	ldr	r3, [pc, #32]	; (8004c18 <_sbrk+0x64>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <_sbrk+0x64>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	18d2      	adds	r2, r2, r3
 8004c02:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <_sbrk+0x64>)
 8004c04:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004c06:	68fb      	ldr	r3, [r7, #12]
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b006      	add	sp, #24
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20002000 	.word	0x20002000
 8004c14:	00000400 	.word	0x00000400
 8004c18:	20000914 	.word	0x20000914
 8004c1c:	20000a68 	.word	0x20000a68

08004c20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
	...

08004c2c <initUI>:

/*
 * init function for ui struct handle
 */
void initUI(Ui_HandleTypeDef_t* ui, Event_Queue_HandleTypeDef_t *queue, LCD1602_RGB_HandleTypeDef_t *hlcd)
{
 8004c2c:	b590      	push	{r4, r7, lr}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
    ui->hlcd = hlcd;
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	23cf      	movs	r3, #207	; 0xcf
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	50d1      	str	r1, [r2, r3]
    ui->queue = queue;
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	23d0      	movs	r3, #208	; 0xd0
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	68b9      	ldr	r1, [r7, #8]
 8004c4a:	50d1      	str	r1, [r2, r3]
    ui->state = PROGRAMS;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	701a      	strb	r2, [r3, #0]
    ui->last_state = NO_MENUPOINT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	705a      	strb	r2, [r3, #1]

    ui->programs.cur_index = 0;
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	239c      	movs	r3, #156	; 0x9c
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	2100      	movs	r1, #0
 8004c60:	54d1      	strb	r1, [r2, r3]
    ui->programs.length = 3;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2203      	movs	r2, #3
 8004c66:	709a      	strb	r2, [r3, #2]
    ui->programs.program_list[0] = p1;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	4a43      	ldr	r2, [pc, #268]	; (8004d78 <initUI+0x14c>)
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	0011      	movs	r1, r2
 8004c70:	223e      	movs	r2, #62	; 0x3e
 8004c72:	0018      	movs	r0, r3
 8004c74:	f005 fe9c 	bl	800a9b0 <memcpy>
    ui->programs.program_list[1] = p2;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2242      	movs	r2, #66	; 0x42
 8004c7c:	493f      	ldr	r1, [pc, #252]	; (8004d7c <initUI+0x150>)
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	223e      	movs	r2, #62	; 0x3e
 8004c82:	0018      	movs	r0, r3
 8004c84:	f005 fe94 	bl	800a9b0 <memcpy>
    ui->programs.program_list[2] = p3;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a3d      	ldr	r2, [pc, #244]	; (8004d80 <initUI+0x154>)
 8004c8c:	3380      	adds	r3, #128	; 0x80
 8004c8e:	0011      	movs	r1, r2
 8004c90:	223e      	movs	r2, #62	; 0x3e
 8004c92:	0018      	movs	r0, r3
 8004c94:	f005 fe8c 	bl	800a9b0 <memcpy>

    ui->settings.cur_index = 0;
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	23ce      	movs	r3, #206	; 0xce
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	54d1      	strb	r1, [r2, r3]
    ui->settings.length = 8;
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	239d      	movs	r3, #157	; 0x9d
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	2108      	movs	r1, #8
 8004caa:	54d1      	strb	r1, [r2, r3]
    ui->settings.setting_list[0] = kp_gradient;
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	239e      	movs	r3, #158	; 0x9e
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4934      	ldr	r1, [pc, #208]	; (8004d84 <initUI+0x158>)
 8004cb4:	18d3      	adds	r3, r2, r3
 8004cb6:	000a      	movs	r2, r1
 8004cb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cba:	c313      	stmia	r3!, {r0, r1, r4}
 8004cbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cbe:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[1] = ki_gradient;
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	23a4      	movs	r3, #164	; 0xa4
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4930      	ldr	r1, [pc, #192]	; (8004d88 <initUI+0x15c>)
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	000a      	movs	r2, r1
 8004ccc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cce:	c313      	stmia	r3!, {r0, r1, r4}
 8004cd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cd2:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[2] = kd_gradient;
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	23aa      	movs	r3, #170	; 0xaa
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	492c      	ldr	r1, [pc, #176]	; (8004d8c <initUI+0x160>)
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	000a      	movs	r2, r1
 8004ce0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ce2:	c313      	stmia	r3!, {r0, r1, r4}
 8004ce4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004ce6:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[3] = interval_gradient;
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	23b0      	movs	r3, #176	; 0xb0
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4928      	ldr	r1, [pc, #160]	; (8004d90 <initUI+0x164>)
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	000a      	movs	r2, r1
 8004cf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cf6:	c313      	stmia	r3!, {r0, r1, r4}
 8004cf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004cfa:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[4] = kp_setpoint;
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	23b6      	movs	r3, #182	; 0xb6
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4924      	ldr	r1, [pc, #144]	; (8004d94 <initUI+0x168>)
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	000a      	movs	r2, r1
 8004d08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d0a:	c313      	stmia	r3!, {r0, r1, r4}
 8004d0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d0e:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[5] = ki_setpoint;
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	23bc      	movs	r3, #188	; 0xbc
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4920      	ldr	r1, [pc, #128]	; (8004d98 <initUI+0x16c>)
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	000a      	movs	r2, r1
 8004d1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d1e:	c313      	stmia	r3!, {r0, r1, r4}
 8004d20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d22:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[6] = kd_setpoint;
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	23c2      	movs	r3, #194	; 0xc2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	491c      	ldr	r1, [pc, #112]	; (8004d9c <initUI+0x170>)
 8004d2c:	18d3      	adds	r3, r2, r3
 8004d2e:	000a      	movs	r2, r1
 8004d30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d32:	c313      	stmia	r3!, {r0, r1, r4}
 8004d34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d36:	c313      	stmia	r3!, {r0, r1, r4}
    ui->settings.setting_list[7] = interval_setpoint;
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	23c8      	movs	r3, #200	; 0xc8
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4918      	ldr	r1, [pc, #96]	; (8004da0 <initUI+0x174>)
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	000a      	movs	r2, r1
 8004d44:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d46:	c313      	stmia	r3!, {r0, r1, r4}
 8004d48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d4a:	c313      	stmia	r3!, {r0, r1, r4}

    lcd1602_customSymbol(ui->hlcd, 1,degree_slash);
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	23cf      	movs	r3, #207	; 0xcf
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	58d3      	ldr	r3, [r2, r3]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <initUI+0x178>)
 8004d56:	2101      	movs	r1, #1
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7ff f80c 	bl	8003d76 <lcd1602_customSymbol>
    lcd1602_customSymbol(ui->hlcd, 0,degree);
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	23cf      	movs	r3, #207	; 0xcf
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	58d3      	ldr	r3, [r2, r3]
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <initUI+0x17c>)
 8004d68:	2100      	movs	r1, #0
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f7ff f803 	bl	8003d76 <lcd1602_customSymbol>
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b005      	add	sp, #20
 8004d76:	bd90      	pop	{r4, r7, pc}
 8004d78:	20000004 	.word	0x20000004
 8004d7c:	20000044 	.word	0x20000044
 8004d80:	20000084 	.word	0x20000084
 8004d84:	200000c4 	.word	0x200000c4
 8004d88:	200000dc 	.word	0x200000dc
 8004d8c:	200000f4 	.word	0x200000f4
 8004d90:	2000010c 	.word	0x2000010c
 8004d94:	20000124 	.word	0x20000124
 8004d98:	2000013c 	.word	0x2000013c
 8004d9c:	20000154 	.word	0x20000154
 8004da0:	2000016c 	.word	0x2000016c
 8004da4:	20000184 	.word	0x20000184
 8004da8:	2000018c 	.word	0x2000018c

08004dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004dac:	480d      	ldr	r0, [pc, #52]	; (8004de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004db0:	f7ff ff36 	bl	8004c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004db4:	480c      	ldr	r0, [pc, #48]	; (8004de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004db6:	490d      	ldr	r1, [pc, #52]	; (8004dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8004db8:	4a0d      	ldr	r2, [pc, #52]	; (8004df0 <LoopForever+0xe>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004dbc:	e002      	b.n	8004dc4 <LoopCopyDataInit>

08004dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dc2:	3304      	adds	r3, #4

08004dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dc8:	d3f9      	bcc.n	8004dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dca:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004dcc:	4c0a      	ldr	r4, [pc, #40]	; (8004df8 <LoopForever+0x16>)
  movs r3, #0
 8004dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dd0:	e001      	b.n	8004dd6 <LoopFillZerobss>

08004dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dd4:	3204      	adds	r2, #4

08004dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dd8:	d3fb      	bcc.n	8004dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004dda:	f005 fdb7 	bl	800a94c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004dde:	f7ff f867 	bl	8003eb0 <main>

08004de2 <LoopForever>:

LoopForever:
    b LoopForever
 8004de2:	e7fe      	b.n	8004de2 <LoopForever>
  ldr   r0, =_estack
 8004de4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dec:	20000364 	.word	0x20000364
  ldr r2, =_sidata
 8004df0:	0800cadc 	.word	0x0800cadc
  ldr r2, =_sbss
 8004df4:	20000364 	.word	0x20000364
  ldr r4, =_ebss
 8004df8:	20000a68 	.word	0x20000a68

08004dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004dfc:	e7fe      	b.n	8004dfc <ADC1_IRQHandler>
	...

08004e00 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e04:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <HAL_Init+0x24>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <HAL_Init+0x24>)
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004e10:	2003      	movs	r0, #3
 8004e12:	f000 f809 	bl	8004e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e16:	f7ff fc59 	bl	80046cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	40022000 	.word	0x40022000

08004e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e30:	4b14      	ldr	r3, [pc, #80]	; (8004e84 <HAL_InitTick+0x5c>)
 8004e32:	681c      	ldr	r4, [r3, #0]
 8004e34:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <HAL_InitTick+0x60>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	0019      	movs	r1, r3
 8004e3a:	23fa      	movs	r3, #250	; 0xfa
 8004e3c:	0098      	lsls	r0, r3, #2
 8004e3e:	f7fb f97f 	bl	8000140 <__udivsi3>
 8004e42:	0003      	movs	r3, r0
 8004e44:	0019      	movs	r1, r3
 8004e46:	0020      	movs	r0, r4
 8004e48:	f7fb f97a 	bl	8000140 <__udivsi3>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f000 f92f 	bl	80050b2 <HAL_SYSTICK_Config>
 8004e54:	1e03      	subs	r3, r0, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e00f      	b.n	8004e7c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b03      	cmp	r3, #3
 8004e60:	d80b      	bhi.n	8004e7a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	2301      	movs	r3, #1
 8004e66:	425b      	negs	r3, r3
 8004e68:	2200      	movs	r2, #0
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	f000 f8fc 	bl	8005068 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_InitTick+0x64>)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b003      	add	sp, #12
 8004e82:	bd90      	pop	{r4, r7, pc}
 8004e84:	20000000 	.word	0x20000000
 8004e88:	20000198 	.word	0x20000198
 8004e8c:	20000194 	.word	0x20000194

08004e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_IncTick+0x1c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	001a      	movs	r2, r3
 8004e9a:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <HAL_IncTick+0x20>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	18d2      	adds	r2, r2, r3
 8004ea0:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <HAL_IncTick+0x20>)
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	20000198 	.word	0x20000198
 8004eb0:	20000918 	.word	0x20000918

08004eb4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004eb8:	4b02      	ldr	r3, [pc, #8]	; (8004ec4 <HAL_GetTick+0x10>)
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	20000918 	.word	0x20000918

08004ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ed0:	f7ff fff0 	bl	8004eb4 <HAL_GetTick>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	d005      	beq.n	8004eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_Delay+0x44>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	001a      	movs	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	f7ff ffe0 	bl	8004eb4 <HAL_GetTick>
 8004ef4:	0002      	movs	r2, r0
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d8f7      	bhi.n	8004ef0 <HAL_Delay+0x28>
  {
  }
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	20000198 	.word	0x20000198

08004f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	0002      	movs	r2, r0
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b7f      	cmp	r3, #127	; 0x7f
 8004f22:	d809      	bhi.n	8004f38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f24:	1dfb      	adds	r3, r7, #7
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	001a      	movs	r2, r3
 8004f2a:	231f      	movs	r3, #31
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <__NVIC_EnableIRQ+0x30>)
 8004f30:	2101      	movs	r1, #1
 8004f32:	4091      	lsls	r1, r2
 8004f34:	000a      	movs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
  }
}
 8004f38:	46c0      	nop			; (mov r8, r8)
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b002      	add	sp, #8
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	e000e100 	.word	0xe000e100

08004f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	0002      	movs	r2, r0
 8004f4c:	6039      	str	r1, [r7, #0]
 8004f4e:	1dfb      	adds	r3, r7, #7
 8004f50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f52:	1dfb      	adds	r3, r7, #7
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b7f      	cmp	r3, #127	; 0x7f
 8004f58:	d828      	bhi.n	8004fac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f5a:	4a2f      	ldr	r2, [pc, #188]	; (8005018 <__NVIC_SetPriority+0xd4>)
 8004f5c:	1dfb      	adds	r3, r7, #7
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b25b      	sxtb	r3, r3
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	33c0      	adds	r3, #192	; 0xc0
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	589b      	ldr	r3, [r3, r2]
 8004f6a:	1dfa      	adds	r2, r7, #7
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	0011      	movs	r1, r2
 8004f70:	2203      	movs	r2, #3
 8004f72:	400a      	ands	r2, r1
 8004f74:	00d2      	lsls	r2, r2, #3
 8004f76:	21ff      	movs	r1, #255	; 0xff
 8004f78:	4091      	lsls	r1, r2
 8004f7a:	000a      	movs	r2, r1
 8004f7c:	43d2      	mvns	r2, r2
 8004f7e:	401a      	ands	r2, r3
 8004f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	22ff      	movs	r2, #255	; 0xff
 8004f88:	401a      	ands	r2, r3
 8004f8a:	1dfb      	adds	r3, r7, #7
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	0018      	movs	r0, r3
 8004f90:	2303      	movs	r3, #3
 8004f92:	4003      	ands	r3, r0
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f98:	481f      	ldr	r0, [pc, #124]	; (8005018 <__NVIC_SetPriority+0xd4>)
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	089b      	lsrs	r3, r3, #2
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	33c0      	adds	r3, #192	; 0xc0
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004faa:	e031      	b.n	8005010 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <__NVIC_SetPriority+0xd8>)
 8004fae:	1dfb      	adds	r3, r7, #7
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	0019      	movs	r1, r3
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	3b08      	subs	r3, #8
 8004fba:	089b      	lsrs	r3, r3, #2
 8004fbc:	3306      	adds	r3, #6
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	18d3      	adds	r3, r2, r3
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	1dfa      	adds	r2, r7, #7
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	0011      	movs	r1, r2
 8004fcc:	2203      	movs	r2, #3
 8004fce:	400a      	ands	r2, r1
 8004fd0:	00d2      	lsls	r2, r2, #3
 8004fd2:	21ff      	movs	r1, #255	; 0xff
 8004fd4:	4091      	lsls	r1, r2
 8004fd6:	000a      	movs	r2, r1
 8004fd8:	43d2      	mvns	r2, r2
 8004fda:	401a      	ands	r2, r3
 8004fdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	019b      	lsls	r3, r3, #6
 8004fe2:	22ff      	movs	r2, #255	; 0xff
 8004fe4:	401a      	ands	r2, r3
 8004fe6:	1dfb      	adds	r3, r7, #7
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	0018      	movs	r0, r3
 8004fec:	2303      	movs	r3, #3
 8004fee:	4003      	ands	r3, r0
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ff4:	4809      	ldr	r0, [pc, #36]	; (800501c <__NVIC_SetPriority+0xd8>)
 8004ff6:	1dfb      	adds	r3, r7, #7
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	001c      	movs	r4, r3
 8004ffc:	230f      	movs	r3, #15
 8004ffe:	4023      	ands	r3, r4
 8005000:	3b08      	subs	r3, #8
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	430a      	orrs	r2, r1
 8005006:	3306      	adds	r3, #6
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	18c3      	adds	r3, r0, r3
 800500c:	3304      	adds	r3, #4
 800500e:	601a      	str	r2, [r3, #0]
}
 8005010:	46c0      	nop			; (mov r8, r8)
 8005012:	46bd      	mov	sp, r7
 8005014:	b003      	add	sp, #12
 8005016:	bd90      	pop	{r4, r7, pc}
 8005018:	e000e100 	.word	0xe000e100
 800501c:	e000ed00 	.word	0xe000ed00

08005020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	1e5a      	subs	r2, r3, #1
 800502c:	2380      	movs	r3, #128	; 0x80
 800502e:	045b      	lsls	r3, r3, #17
 8005030:	429a      	cmp	r2, r3
 8005032:	d301      	bcc.n	8005038 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005034:	2301      	movs	r3, #1
 8005036:	e010      	b.n	800505a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <SysTick_Config+0x44>)
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	3a01      	subs	r2, #1
 800503e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005040:	2301      	movs	r3, #1
 8005042:	425b      	negs	r3, r3
 8005044:	2103      	movs	r1, #3
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff ff7c 	bl	8004f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <SysTick_Config+0x44>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005052:	4b04      	ldr	r3, [pc, #16]	; (8005064 <SysTick_Config+0x44>)
 8005054:	2207      	movs	r2, #7
 8005056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005058:	2300      	movs	r3, #0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b002      	add	sp, #8
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	e000e010 	.word	0xe000e010

08005068 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	210f      	movs	r1, #15
 8005074:	187b      	adds	r3, r7, r1
 8005076:	1c02      	adds	r2, r0, #0
 8005078:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	187b      	adds	r3, r7, r1
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	b25b      	sxtb	r3, r3
 8005082:	0011      	movs	r1, r2
 8005084:	0018      	movs	r0, r3
 8005086:	f7ff ff5d 	bl	8004f44 <__NVIC_SetPriority>
}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	46bd      	mov	sp, r7
 800508e:	b004      	add	sp, #16
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	0002      	movs	r2, r0
 800509a:	1dfb      	adds	r3, r7, #7
 800509c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800509e:	1dfb      	adds	r3, r7, #7
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7ff ff33 	bl	8004f10 <__NVIC_EnableIRQ>
}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	46bd      	mov	sp, r7
 80050ae:	b002      	add	sp, #8
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7ff ffaf 	bl	8005020 <SysTick_Config>
 80050c2:	0003      	movs	r3, r0
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b002      	add	sp, #8
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2221      	movs	r2, #33	; 0x21
 80050d8:	5c9b      	ldrb	r3, [r3, r2]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d008      	beq.n	80050f2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	2100      	movs	r1, #0
 80050ec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e020      	b.n	8005134 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	210e      	movs	r1, #14
 80050fe:	438a      	bics	r2, r1
 8005100:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2101      	movs	r1, #1
 800510e:	438a      	bics	r2, r1
 8005110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	2101      	movs	r1, #1
 800511c:	4091      	lsls	r1, r2
 800511e:	000a      	movs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2221      	movs	r2, #33	; 0x21
 8005126:	2101      	movs	r1, #1
 8005128:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	2100      	movs	r1, #0
 8005130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b002      	add	sp, #8
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005144:	210f      	movs	r1, #15
 8005146:	187b      	adds	r3, r7, r1
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2221      	movs	r2, #33	; 0x21
 8005150:	5c9b      	ldrb	r3, [r3, r2]
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d006      	beq.n	8005166 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2204      	movs	r2, #4
 800515c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800515e:	187b      	adds	r3, r7, r1
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e028      	b.n	80051b8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	210e      	movs	r1, #14
 8005172:	438a      	bics	r2, r1
 8005174:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2101      	movs	r1, #1
 8005182:	438a      	bics	r2, r1
 8005184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	2101      	movs	r1, #1
 8005190:	4091      	lsls	r1, r2
 8005192:	000a      	movs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2221      	movs	r2, #33	; 0x21
 800519a:	2101      	movs	r1, #1
 800519c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	0010      	movs	r0, r2
 80051b6:	4798      	blx	r3
    }
  }
  return status;
 80051b8:	230f      	movs	r3, #15
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	781b      	ldrb	r3, [r3, #0]
}
 80051be:	0018      	movs	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b004      	add	sp, #16
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051d2:	2300      	movs	r3, #0
 80051d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051d6:	e14f      	b.n	8005478 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2101      	movs	r1, #1
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4091      	lsls	r1, r2
 80051e2:	000a      	movs	r2, r1
 80051e4:	4013      	ands	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d100      	bne.n	80051f0 <HAL_GPIO_Init+0x28>
 80051ee:	e140      	b.n	8005472 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2203      	movs	r2, #3
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d005      	beq.n	8005208 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2203      	movs	r2, #3
 8005202:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005204:	2b02      	cmp	r3, #2
 8005206:	d130      	bne.n	800526a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	2203      	movs	r2, #3
 8005214:	409a      	lsls	r2, r3
 8005216:	0013      	movs	r3, r2
 8005218:	43da      	mvns	r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	4013      	ands	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68da      	ldr	r2, [r3, #12]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	409a      	lsls	r2, r3
 800522a:	0013      	movs	r3, r2
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800523e:	2201      	movs	r2, #1
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	409a      	lsls	r2, r3
 8005244:	0013      	movs	r3, r2
 8005246:	43da      	mvns	r2, r3
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4013      	ands	r3, r2
 800524c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	2201      	movs	r2, #1
 8005256:	401a      	ands	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	409a      	lsls	r2, r3
 800525c:	0013      	movs	r3, r2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2203      	movs	r2, #3
 8005270:	4013      	ands	r3, r2
 8005272:	2b03      	cmp	r3, #3
 8005274:	d017      	beq.n	80052a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	2203      	movs	r2, #3
 8005282:	409a      	lsls	r2, r3
 8005284:	0013      	movs	r3, r2
 8005286:	43da      	mvns	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	409a      	lsls	r2, r3
 8005298:	0013      	movs	r3, r2
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2203      	movs	r2, #3
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d123      	bne.n	80052fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	08da      	lsrs	r2, r3, #3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3208      	adds	r2, #8
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	58d3      	ldr	r3, [r2, r3]
 80052be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2207      	movs	r2, #7
 80052c4:	4013      	ands	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	220f      	movs	r2, #15
 80052ca:	409a      	lsls	r2, r3
 80052cc:	0013      	movs	r3, r2
 80052ce:	43da      	mvns	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4013      	ands	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2107      	movs	r1, #7
 80052de:	400b      	ands	r3, r1
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	409a      	lsls	r2, r3
 80052e4:	0013      	movs	r3, r2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	08da      	lsrs	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3208      	adds	r2, #8
 80052f4:	0092      	lsls	r2, r2, #2
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	2203      	movs	r2, #3
 8005306:	409a      	lsls	r2, r3
 8005308:	0013      	movs	r3, r2
 800530a:	43da      	mvns	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4013      	ands	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2203      	movs	r2, #3
 8005318:	401a      	ands	r2, r3
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	409a      	lsls	r2, r3
 8005320:	0013      	movs	r3, r2
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	23c0      	movs	r3, #192	; 0xc0
 8005334:	029b      	lsls	r3, r3, #10
 8005336:	4013      	ands	r3, r2
 8005338:	d100      	bne.n	800533c <HAL_GPIO_Init+0x174>
 800533a:	e09a      	b.n	8005472 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533c:	4b54      	ldr	r3, [pc, #336]	; (8005490 <HAL_GPIO_Init+0x2c8>)
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	4b53      	ldr	r3, [pc, #332]	; (8005490 <HAL_GPIO_Init+0x2c8>)
 8005342:	2101      	movs	r1, #1
 8005344:	430a      	orrs	r2, r1
 8005346:	619a      	str	r2, [r3, #24]
 8005348:	4b51      	ldr	r3, [pc, #324]	; (8005490 <HAL_GPIO_Init+0x2c8>)
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2201      	movs	r2, #1
 800534e:	4013      	ands	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]
 8005352:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005354:	4a4f      	ldr	r2, [pc, #316]	; (8005494 <HAL_GPIO_Init+0x2cc>)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	089b      	lsrs	r3, r3, #2
 800535a:	3302      	adds	r3, #2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	589b      	ldr	r3, [r3, r2]
 8005360:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2203      	movs	r2, #3
 8005366:	4013      	ands	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	220f      	movs	r2, #15
 800536c:	409a      	lsls	r2, r3
 800536e:	0013      	movs	r3, r2
 8005370:	43da      	mvns	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	2390      	movs	r3, #144	; 0x90
 800537c:	05db      	lsls	r3, r3, #23
 800537e:	429a      	cmp	r2, r3
 8005380:	d013      	beq.n	80053aa <HAL_GPIO_Init+0x1e2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a44      	ldr	r2, [pc, #272]	; (8005498 <HAL_GPIO_Init+0x2d0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00d      	beq.n	80053a6 <HAL_GPIO_Init+0x1de>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a43      	ldr	r2, [pc, #268]	; (800549c <HAL_GPIO_Init+0x2d4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <HAL_GPIO_Init+0x1da>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a42      	ldr	r2, [pc, #264]	; (80054a0 <HAL_GPIO_Init+0x2d8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d101      	bne.n	800539e <HAL_GPIO_Init+0x1d6>
 800539a:	2303      	movs	r3, #3
 800539c:	e006      	b.n	80053ac <HAL_GPIO_Init+0x1e4>
 800539e:	2305      	movs	r3, #5
 80053a0:	e004      	b.n	80053ac <HAL_GPIO_Init+0x1e4>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e002      	b.n	80053ac <HAL_GPIO_Init+0x1e4>
 80053a6:	2301      	movs	r3, #1
 80053a8:	e000      	b.n	80053ac <HAL_GPIO_Init+0x1e4>
 80053aa:	2300      	movs	r3, #0
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	2103      	movs	r1, #3
 80053b0:	400a      	ands	r2, r1
 80053b2:	0092      	lsls	r2, r2, #2
 80053b4:	4093      	lsls	r3, r2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053bc:	4935      	ldr	r1, [pc, #212]	; (8005494 <HAL_GPIO_Init+0x2cc>)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	089b      	lsrs	r3, r3, #2
 80053c2:	3302      	adds	r3, #2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053ca:	4b36      	ldr	r3, [pc, #216]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	43da      	mvns	r2, r3
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4013      	ands	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	035b      	lsls	r3, r3, #13
 80053e2:	4013      	ands	r3, r2
 80053e4:	d003      	beq.n	80053ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80053ee:	4b2d      	ldr	r3, [pc, #180]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80053f4:	4b2b      	ldr	r3, [pc, #172]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	43da      	mvns	r2, r3
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4013      	ands	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	2380      	movs	r3, #128	; 0x80
 800540a:	039b      	lsls	r3, r3, #14
 800540c:	4013      	ands	r3, r2
 800540e:	d003      	beq.n	8005418 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005418:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	43da      	mvns	r2, r3
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4013      	ands	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	029b      	lsls	r3, r3, #10
 8005436:	4013      	ands	r3, r2
 8005438:	d003      	beq.n	8005442 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005442:	4b18      	ldr	r3, [pc, #96]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005448:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	43da      	mvns	r2, r3
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	025b      	lsls	r3, r3, #9
 8005460:	4013      	ands	r3, r2
 8005462:	d003      	beq.n	800546c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800546c:	4b0d      	ldr	r3, [pc, #52]	; (80054a4 <HAL_GPIO_Init+0x2dc>)
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3301      	adds	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	40da      	lsrs	r2, r3
 8005480:	1e13      	subs	r3, r2, #0
 8005482:	d000      	beq.n	8005486 <HAL_GPIO_Init+0x2be>
 8005484:	e6a8      	b.n	80051d8 <HAL_GPIO_Init+0x10>
  } 
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46c0      	nop			; (mov r8, r8)
 800548a:	46bd      	mov	sp, r7
 800548c:	b006      	add	sp, #24
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40021000 	.word	0x40021000
 8005494:	40010000 	.word	0x40010000
 8005498:	48000400 	.word	0x48000400
 800549c:	48000800 	.word	0x48000800
 80054a0:	48000c00 	.word	0x48000c00
 80054a4:	40010400 	.word	0x40010400

080054a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	000a      	movs	r2, r1
 80054b2:	1cbb      	adds	r3, r7, #2
 80054b4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	1cba      	adds	r2, r7, #2
 80054bc:	8812      	ldrh	r2, [r2, #0]
 80054be:	4013      	ands	r3, r2
 80054c0:	d004      	beq.n	80054cc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80054c2:	230f      	movs	r3, #15
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	e003      	b.n	80054d4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054cc:	230f      	movs	r3, #15
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80054d4:	230f      	movs	r3, #15
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	781b      	ldrb	r3, [r3, #0]
  }
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b004      	add	sp, #16
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b082      	sub	sp, #8
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	0008      	movs	r0, r1
 80054ec:	0011      	movs	r1, r2
 80054ee:	1cbb      	adds	r3, r7, #2
 80054f0:	1c02      	adds	r2, r0, #0
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	1c7b      	adds	r3, r7, #1
 80054f6:	1c0a      	adds	r2, r1, #0
 80054f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054fa:	1c7b      	adds	r3, r7, #1
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005502:	1cbb      	adds	r3, r7, #2
 8005504:	881a      	ldrh	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800550a:	e003      	b.n	8005514 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800550c:	1cbb      	adds	r3, r7, #2
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	000a      	movs	r2, r1
 8005526:	1cbb      	adds	r3, r7, #2
 8005528:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005530:	1cbb      	adds	r3, r7, #2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	041a      	lsls	r2, r3, #16
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	43db      	mvns	r3, r3
 800553e:	1cb9      	adds	r1, r7, #2
 8005540:	8809      	ldrh	r1, [r1, #0]
 8005542:	400b      	ands	r3, r1
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	619a      	str	r2, [r3, #24]
}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	b004      	add	sp, #16
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	0002      	movs	r2, r0
 800555c:	1dbb      	adds	r3, r7, #6
 800555e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	1dba      	adds	r2, r7, #6
 8005566:	8812      	ldrh	r2, [r2, #0]
 8005568:	4013      	ands	r3, r2
 800556a:	d008      	beq.n	800557e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800556e:	1dba      	adds	r2, r7, #6
 8005570:	8812      	ldrh	r2, [r2, #0]
 8005572:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005574:	1dbb      	adds	r3, r7, #6
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	0018      	movs	r0, r3
 800557a:	f7ff f849 	bl	8004610 <HAL_GPIO_EXTI_Callback>
  }
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b002      	add	sp, #8
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	40010400 	.word	0x40010400

0800558c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e082      	b.n	80056a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2241      	movs	r2, #65	; 0x41
 80055a2:	5c9b      	ldrb	r3, [r3, r2]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d107      	bne.n	80055ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	2100      	movs	r1, #0
 80055b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	0018      	movs	r0, r3
 80055b6:	f7ff f8ad 	bl	8004714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2241      	movs	r2, #65	; 0x41
 80055be:	2124      	movs	r1, #36	; 0x24
 80055c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2101      	movs	r1, #1
 80055ce:	438a      	bics	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4934      	ldr	r1, [pc, #208]	; (80056ac <HAL_I2C_Init+0x120>)
 80055dc:	400a      	ands	r2, r1
 80055de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4931      	ldr	r1, [pc, #196]	; (80056b0 <HAL_I2C_Init+0x124>)
 80055ec:	400a      	ands	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d108      	bne.n	800560a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2180      	movs	r1, #128	; 0x80
 8005602:	0209      	lsls	r1, r1, #8
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
 8005608:	e007      	b.n	800561a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689a      	ldr	r2, [r3, #8]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2184      	movs	r1, #132	; 0x84
 8005614:	0209      	lsls	r1, r1, #8
 8005616:	430a      	orrs	r2, r1
 8005618:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d104      	bne.n	800562c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2280      	movs	r2, #128	; 0x80
 8005628:	0112      	lsls	r2, r2, #4
 800562a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	491f      	ldr	r1, [pc, #124]	; (80056b4 <HAL_I2C_Init+0x128>)
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	491a      	ldr	r1, [pc, #104]	; (80056b0 <HAL_I2C_Init+0x124>)
 8005648:	400a      	ands	r2, r1
 800564a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691a      	ldr	r2, [r3, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	431a      	orrs	r2, r3
 8005656:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69d9      	ldr	r1, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2101      	movs	r1, #1
 8005682:	430a      	orrs	r2, r1
 8005684:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2241      	movs	r2, #65	; 0x41
 8005690:	2120      	movs	r1, #32
 8005692:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2242      	movs	r2, #66	; 0x42
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	f0ffffff 	.word	0xf0ffffff
 80056b0:	ffff7fff 	.word	0xffff7fff
 80056b4:	02008000 	.word	0x02008000

080056b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056b8:	b590      	push	{r4, r7, lr}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	0008      	movs	r0, r1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	0019      	movs	r1, r3
 80056c6:	230a      	movs	r3, #10
 80056c8:	18fb      	adds	r3, r7, r3
 80056ca:	1c02      	adds	r2, r0, #0
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	2308      	movs	r3, #8
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	1c0a      	adds	r2, r1, #0
 80056d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2241      	movs	r2, #65	; 0x41
 80056da:	5c9b      	ldrb	r3, [r3, r2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d000      	beq.n	80056e4 <HAL_I2C_Master_Transmit+0x2c>
 80056e2:	e0e7      	b.n	80058b4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	5c9b      	ldrb	r3, [r3, r2]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_I2C_Master_Transmit+0x3a>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e0e1      	b.n	80058b6 <HAL_I2C_Master_Transmit+0x1fe>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	2101      	movs	r1, #1
 80056f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056fa:	f7ff fbdb 	bl	8004eb4 <HAL_GetTick>
 80056fe:	0003      	movs	r3, r0
 8005700:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	0219      	lsls	r1, r3, #8
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2319      	movs	r3, #25
 800570e:	2201      	movs	r2, #1
 8005710:	f000 f8fc 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005714:	1e03      	subs	r3, r0, #0
 8005716:	d001      	beq.n	800571c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2241      	movs	r2, #65	; 0x41
 8005720:	2121      	movs	r1, #33	; 0x21
 8005722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2242      	movs	r2, #66	; 0x42
 8005728:	2110      	movs	r1, #16
 800572a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2208      	movs	r2, #8
 800573c:	18ba      	adds	r2, r7, r2
 800573e:	8812      	ldrh	r2, [r2, #0]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2bff      	cmp	r3, #255	; 0xff
 8005750:	d911      	bls.n	8005776 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	22ff      	movs	r2, #255	; 0xff
 8005756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575c:	b2da      	uxtb	r2, r3
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	045c      	lsls	r4, r3, #17
 8005762:	230a      	movs	r3, #10
 8005764:	18fb      	adds	r3, r7, r3
 8005766:	8819      	ldrh	r1, [r3, #0]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <HAL_I2C_Master_Transmit+0x208>)
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	0023      	movs	r3, r4
 8005770:	f000 faa4 	bl	8005cbc <I2C_TransferConfig>
 8005774:	e075      	b.n	8005862 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	b2da      	uxtb	r2, r3
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	049c      	lsls	r4, r3, #18
 800578a:	230a      	movs	r3, #10
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	8819      	ldrh	r1, [r3, #0]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <HAL_I2C_Master_Transmit+0x208>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	0023      	movs	r3, r4
 8005798:	f000 fa90 	bl	8005cbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800579c:	e061      	b.n	8005862 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 f8ff 	bl	80059a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80057aa:	1e03      	subs	r3, r0, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e081      	b.n	80058b6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d03a      	beq.n	8005862 <HAL_I2C_Master_Transmit+0x1aa>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d136      	bne.n	8005862 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	0013      	movs	r3, r2
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	f000 f883 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005806:	1e03      	subs	r3, r0, #0
 8005808:	d001      	beq.n	800580e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e053      	b.n	80058b6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	2bff      	cmp	r3, #255	; 0xff
 8005816:	d911      	bls.n	800583c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	22ff      	movs	r2, #255	; 0xff
 800581c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005822:	b2da      	uxtb	r2, r3
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	045c      	lsls	r4, r3, #17
 8005828:	230a      	movs	r3, #10
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	8819      	ldrh	r1, [r3, #0]
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	2300      	movs	r3, #0
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	0023      	movs	r3, r4
 8005836:	f000 fa41 	bl	8005cbc <I2C_TransferConfig>
 800583a:	e012      	b.n	8005862 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584a:	b2da      	uxtb	r2, r3
 800584c:	2380      	movs	r3, #128	; 0x80
 800584e:	049c      	lsls	r4, r3, #18
 8005850:	230a      	movs	r3, #10
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	8819      	ldrh	r1, [r3, #0]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	2300      	movs	r3, #0
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	0023      	movs	r3, r4
 800585e:	f000 fa2d 	bl	8005cbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d198      	bne.n	800579e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 f8de 	bl	8005a34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005878:	1e03      	subs	r3, r0, #0
 800587a:	d001      	beq.n	8005880 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e01a      	b.n	80058b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2220      	movs	r2, #32
 8005886:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	490c      	ldr	r1, [pc, #48]	; (80058c4 <HAL_I2C_Master_Transmit+0x20c>)
 8005894:	400a      	ands	r2, r1
 8005896:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2241      	movs	r2, #65	; 0x41
 800589c:	2120      	movs	r1, #32
 800589e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2242      	movs	r2, #66	; 0x42
 80058a4:	2100      	movs	r1, #0
 80058a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2240      	movs	r2, #64	; 0x40
 80058ac:	2100      	movs	r1, #0
 80058ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e000      	b.n	80058b6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
  }
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b007      	add	sp, #28
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	80002000 	.word	0x80002000
 80058c4:	fe00e800 	.word	0xfe00e800

080058c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2202      	movs	r2, #2
 80058d8:	4013      	ands	r3, r2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d103      	bne.n	80058e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2200      	movs	r2, #0
 80058e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2201      	movs	r2, #1
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d007      	beq.n	8005904 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699a      	ldr	r2, [r3, #24]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2101      	movs	r1, #1
 8005900:	430a      	orrs	r2, r1
 8005902:	619a      	str	r2, [r3, #24]
  }
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	46bd      	mov	sp, r7
 8005908:	b002      	add	sp, #8
 800590a:	bd80      	pop	{r7, pc}

0800590c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591c:	e030      	b.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	d02d      	beq.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005924:	f7ff fac6 	bl	8004eb4 <HAL_GetTick>
 8005928:	0002      	movs	r2, r0
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d302      	bcc.n	800593a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d122      	bne.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	4013      	ands	r3, r2
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	425a      	negs	r2, r3
 800594a:	4153      	adcs	r3, r2
 800594c:	b2db      	uxtb	r3, r3
 800594e:	001a      	movs	r2, r3
 8005950:	1dfb      	adds	r3, r7, #7
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d113      	bne.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595c:	2220      	movs	r2, #32
 800595e:	431a      	orrs	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2241      	movs	r2, #65	; 0x41
 8005968:	2120      	movs	r1, #32
 800596a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2242      	movs	r2, #66	; 0x42
 8005970:	2100      	movs	r1, #0
 8005972:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e00f      	b.n	80059a0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4013      	ands	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	425a      	negs	r2, r3
 8005990:	4153      	adcs	r3, r2
 8005992:	b2db      	uxtb	r3, r3
 8005994:	001a      	movs	r2, r3
 8005996:	1dfb      	adds	r3, r7, #7
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d0bf      	beq.n	800591e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b004      	add	sp, #16
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059b4:	e032      	b.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 f87d 	bl	8005abc <I2C_IsErrorOccurred>
 80059c2:	1e03      	subs	r3, r0, #0
 80059c4:	d001      	beq.n	80059ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e030      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3301      	adds	r3, #1
 80059ce:	d025      	beq.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d0:	f7ff fa70 	bl	8004eb4 <HAL_GetTick>
 80059d4:	0002      	movs	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d302      	bcc.n	80059e6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d11a      	bne.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2202      	movs	r2, #2
 80059ee:	4013      	ands	r3, r2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d013      	beq.n	8005a1c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f8:	2220      	movs	r2, #32
 80059fa:	431a      	orrs	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2241      	movs	r2, #65	; 0x41
 8005a04:	2120      	movs	r1, #32
 8005a06:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2242      	movs	r2, #66	; 0x42
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2240      	movs	r2, #64	; 0x40
 8005a14:	2100      	movs	r1, #0
 8005a16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e007      	b.n	8005a2c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	2202      	movs	r2, #2
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d1c5      	bne.n	80059b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a40:	e02f      	b.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 f837 	bl	8005abc <I2C_IsErrorOccurred>
 8005a4e:	1e03      	subs	r3, r0, #0
 8005a50:	d001      	beq.n	8005a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e02d      	b.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a56:	f7ff fa2d 	bl	8004eb4 <HAL_GetTick>
 8005a5a:	0002      	movs	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d302      	bcc.n	8005a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11a      	bne.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2220      	movs	r2, #32
 8005a74:	4013      	ands	r3, r2
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d013      	beq.n	8005aa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7e:	2220      	movs	r2, #32
 8005a80:	431a      	orrs	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2241      	movs	r2, #65	; 0x41
 8005a8a:	2120      	movs	r1, #32
 8005a8c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2242      	movs	r2, #66	; 0x42
 8005a92:	2100      	movs	r1, #0
 8005a94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e007      	b.n	8005ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d1c8      	bne.n	8005a42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b004      	add	sp, #16
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b08b      	sub	sp, #44	; 0x2c
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac8:	2327      	movs	r3, #39	; 0x27
 8005aca:	18fb      	adds	r3, r7, r3
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d100      	bne.n	8005aea <I2C_IsErrorOccurred+0x2e>
 8005ae8:	e082      	b.n	8005bf0 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2210      	movs	r2, #16
 8005af0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005af2:	e060      	b.n	8005bb6 <I2C_IsErrorOccurred+0xfa>
 8005af4:	2427      	movs	r4, #39	; 0x27
 8005af6:	193b      	adds	r3, r7, r4
 8005af8:	193a      	adds	r2, r7, r4
 8005afa:	7812      	ldrb	r2, [r2, #0]
 8005afc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	3301      	adds	r3, #1
 8005b02:	d058      	beq.n	8005bb6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b04:	f7ff f9d6 	bl	8004eb4 <HAL_GetTick>
 8005b08:	0002      	movs	r2, r0
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d306      	bcc.n	8005b22 <I2C_IsErrorOccurred+0x66>
 8005b14:	193b      	adds	r3, r7, r4
 8005b16:	193a      	adds	r2, r7, r4
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d149      	bne.n	8005bb6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	01db      	lsls	r3, r3, #7
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b30:	2013      	movs	r0, #19
 8005b32:	183b      	adds	r3, r7, r0
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	2142      	movs	r1, #66	; 0x42
 8005b38:	5c52      	ldrb	r2, [r2, r1]
 8005b3a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	2380      	movs	r3, #128	; 0x80
 8005b44:	021b      	lsls	r3, r3, #8
 8005b46:	401a      	ands	r2, r3
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d126      	bne.n	8005b9e <I2C_IsErrorOccurred+0xe2>
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	01db      	lsls	r3, r3, #7
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d021      	beq.n	8005b9e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8005b5a:	183b      	adds	r3, r7, r0
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d01d      	beq.n	8005b9e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2180      	movs	r1, #128	; 0x80
 8005b6e:	01c9      	lsls	r1, r1, #7
 8005b70:	430a      	orrs	r2, r1
 8005b72:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b74:	f7ff f99e 	bl	8004eb4 <HAL_GetTick>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b7c:	e00f      	b.n	8005b9e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b7e:	f7ff f999 	bl	8004eb4 <HAL_GetTick>
 8005b82:	0002      	movs	r2, r0
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b19      	cmp	r3, #25
 8005b8a:	d908      	bls.n	8005b9e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	4313      	orrs	r3, r2
 8005b92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b94:	2327      	movs	r3, #39	; 0x27
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]

              break;
 8005b9c:	e00b      	b.n	8005bb6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2127      	movs	r1, #39	; 0x27
 8005baa:	187a      	adds	r2, r7, r1
 8005bac:	1879      	adds	r1, r7, r1
 8005bae:	7809      	ldrb	r1, [r1, #0]
 8005bb0:	7011      	strb	r1, [r2, #0]
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	d1e3      	bne.n	8005b7e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d004      	beq.n	8005bce <I2C_IsErrorOccurred+0x112>
 8005bc4:	2327      	movs	r3, #39	; 0x27
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d092      	beq.n	8005af4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005bce:	2327      	movs	r3, #39	; 0x27
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2220      	movs	r2, #32
 8005bde:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2204      	movs	r2, #4
 8005be4:	4313      	orrs	r3, r2
 8005be6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005be8:	2327      	movs	r3, #39	; 0x27
 8005bea:	18fb      	adds	r3, r7, r3
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	2380      	movs	r3, #128	; 0x80
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d00c      	beq.n	8005c1c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	2201      	movs	r2, #1
 8005c06:	4313      	orrs	r3, r2
 8005c08:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	0052      	lsls	r2, r2, #1
 8005c12:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c14:	2327      	movs	r3, #39	; 0x27
 8005c16:	18fb      	adds	r3, r7, r3
 8005c18:	2201      	movs	r2, #1
 8005c1a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4013      	ands	r3, r2
 8005c24:	d00c      	beq.n	8005c40 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2280      	movs	r2, #128	; 0x80
 8005c34:	00d2      	lsls	r2, r2, #3
 8005c36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c38:	2327      	movs	r3, #39	; 0x27
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4013      	ands	r3, r2
 8005c48:	d00c      	beq.n	8005c64 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2280      	movs	r2, #128	; 0x80
 8005c58:	0092      	lsls	r2, r2, #2
 8005c5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c5c:	2327      	movs	r3, #39	; 0x27
 8005c5e:	18fb      	adds	r3, r7, r3
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005c64:	2327      	movs	r3, #39	; 0x27
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01d      	beq.n	8005caa <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	0018      	movs	r0, r3
 8005c72:	f7ff fe29 	bl	80058c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	490d      	ldr	r1, [pc, #52]	; (8005cb8 <I2C_IsErrorOccurred+0x1fc>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2241      	movs	r2, #65	; 0x41
 8005c96:	2120      	movs	r1, #32
 8005c98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2242      	movs	r2, #66	; 0x42
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2240      	movs	r2, #64	; 0x40
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005caa:	2327      	movs	r3, #39	; 0x27
 8005cac:	18fb      	adds	r3, r7, r3
 8005cae:	781b      	ldrb	r3, [r3, #0]
}
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	b00b      	add	sp, #44	; 0x2c
 8005cb6:	bd90      	pop	{r4, r7, pc}
 8005cb8:	fe00e800 	.word	0xfe00e800

08005cbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005cbc:	b590      	push	{r4, r7, lr}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	0008      	movs	r0, r1
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	240a      	movs	r4, #10
 8005ccc:	193b      	adds	r3, r7, r4
 8005cce:	1c02      	adds	r2, r0, #0
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	2009      	movs	r0, #9
 8005cd4:	183b      	adds	r3, r7, r0
 8005cd6:	1c0a      	adds	r2, r1, #0
 8005cd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cda:	193b      	adds	r3, r7, r4
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	059b      	lsls	r3, r3, #22
 8005ce0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ce2:	183b      	adds	r3, r7, r0
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	0419      	lsls	r1, r3, #16
 8005ce8:	23ff      	movs	r3, #255	; 0xff
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cee:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	085b      	lsrs	r3, r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d06:	0d51      	lsrs	r1, r2, #21
 8005d08:	2280      	movs	r2, #128	; 0x80
 8005d0a:	00d2      	lsls	r2, r2, #3
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	4907      	ldr	r1, [pc, #28]	; (8005d2c <I2C_TransferConfig+0x70>)
 8005d10:	430a      	orrs	r2, r1
 8005d12:	43d2      	mvns	r2, r2
 8005d14:	401a      	ands	r2, r3
 8005d16:	0011      	movs	r1, r2
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	46bd      	mov	sp, r7
 8005d26:	b007      	add	sp, #28
 8005d28:	bd90      	pop	{r4, r7, pc}
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	03ff63ff 	.word	0x03ff63ff

08005d30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2241      	movs	r2, #65	; 0x41
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b20      	cmp	r3, #32
 8005d44:	d138      	bne.n	8005db8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2240      	movs	r2, #64	; 0x40
 8005d4a:	5c9b      	ldrb	r3, [r3, r2]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d101      	bne.n	8005d54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d50:	2302      	movs	r3, #2
 8005d52:	e032      	b.n	8005dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2240      	movs	r2, #64	; 0x40
 8005d58:	2101      	movs	r1, #1
 8005d5a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2241      	movs	r2, #65	; 0x41
 8005d60:	2124      	movs	r1, #36	; 0x24
 8005d62:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	438a      	bics	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4911      	ldr	r1, [pc, #68]	; (8005dc4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005d80:	400a      	ands	r2, r1
 8005d82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6819      	ldr	r1, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2101      	movs	r1, #1
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2241      	movs	r2, #65	; 0x41
 8005da8:	2120      	movs	r1, #32
 8005daa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2240      	movs	r2, #64	; 0x40
 8005db0:	2100      	movs	r1, #0
 8005db2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	e000      	b.n	8005dba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	0018      	movs	r0, r3
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	b002      	add	sp, #8
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	46c0      	nop			; (mov r8, r8)
 8005dc4:	ffffefff 	.word	0xffffefff

08005dc8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2241      	movs	r2, #65	; 0x41
 8005dd6:	5c9b      	ldrb	r3, [r3, r2]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d139      	bne.n	8005e52 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2240      	movs	r2, #64	; 0x40
 8005de2:	5c9b      	ldrb	r3, [r3, r2]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d101      	bne.n	8005dec <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e033      	b.n	8005e54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	2101      	movs	r1, #1
 8005df2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2241      	movs	r2, #65	; 0x41
 8005df8:	2124      	movs	r1, #36	; 0x24
 8005dfa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2101      	movs	r1, #1
 8005e08:	438a      	bics	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2101      	movs	r1, #1
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2241      	movs	r2, #65	; 0x41
 8005e42:	2120      	movs	r1, #32
 8005e44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2240      	movs	r2, #64	; 0x40
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e000      	b.n	8005e54 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e52:	2302      	movs	r3, #2
  }
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	fffff0ff 	.word	0xfffff0ff

08005e60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e301      	b.n	8006476 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2201      	movs	r2, #1
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <HAL_RCC_OscConfig+0x1e>
 8005e7c:	e08d      	b.n	8005f9a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e7e:	4bc3      	ldr	r3, [pc, #780]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	220c      	movs	r2, #12
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d00e      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e8a:	4bc0      	ldr	r3, [pc, #768]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	220c      	movs	r2, #12
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d116      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x64>
 8005e96:	4bbd      	ldr	r3, [pc, #756]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	025b      	lsls	r3, r3, #9
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	025b      	lsls	r3, r3, #9
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d10d      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	4bb8      	ldr	r3, [pc, #736]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	2380      	movs	r3, #128	; 0x80
 8005eae:	029b      	lsls	r3, r3, #10
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d100      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x56>
 8005eb4:	e070      	b.n	8005f98 <HAL_RCC_OscConfig+0x138>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d000      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x60>
 8005ebe:	e06b      	b.n	8005f98 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e2d8      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <HAL_RCC_OscConfig+0x7c>
 8005ecc:	4baf      	ldr	r3, [pc, #700]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4bae      	ldr	r3, [pc, #696]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005ed2:	2180      	movs	r1, #128	; 0x80
 8005ed4:	0249      	lsls	r1, r1, #9
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e02f      	b.n	8005f3c <HAL_RCC_OscConfig+0xdc>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10c      	bne.n	8005efe <HAL_RCC_OscConfig+0x9e>
 8005ee4:	4ba9      	ldr	r3, [pc, #676]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	4ba8      	ldr	r3, [pc, #672]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005eea:	49a9      	ldr	r1, [pc, #676]	; (8006190 <HAL_RCC_OscConfig+0x330>)
 8005eec:	400a      	ands	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	4ba6      	ldr	r3, [pc, #664]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4ba5      	ldr	r3, [pc, #660]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005ef6:	49a7      	ldr	r1, [pc, #668]	; (8006194 <HAL_RCC_OscConfig+0x334>)
 8005ef8:	400a      	ands	r2, r1
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	e01e      	b.n	8005f3c <HAL_RCC_OscConfig+0xdc>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d10e      	bne.n	8005f24 <HAL_RCC_OscConfig+0xc4>
 8005f06:	4ba1      	ldr	r3, [pc, #644]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4ba0      	ldr	r3, [pc, #640]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f0c:	2180      	movs	r1, #128	; 0x80
 8005f0e:	02c9      	lsls	r1, r1, #11
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	4b9d      	ldr	r3, [pc, #628]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b9c      	ldr	r3, [pc, #624]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	0249      	lsls	r1, r1, #9
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e00b      	b.n	8005f3c <HAL_RCC_OscConfig+0xdc>
 8005f24:	4b99      	ldr	r3, [pc, #612]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b98      	ldr	r3, [pc, #608]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f2a:	4999      	ldr	r1, [pc, #612]	; (8006190 <HAL_RCC_OscConfig+0x330>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	4b96      	ldr	r3, [pc, #600]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4b95      	ldr	r3, [pc, #596]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f36:	4997      	ldr	r1, [pc, #604]	; (8006194 <HAL_RCC_OscConfig+0x334>)
 8005f38:	400a      	ands	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d014      	beq.n	8005f6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fe ffb6 	bl	8004eb4 <HAL_GetTick>
 8005f48:	0003      	movs	r3, r0
 8005f4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f4e:	f7fe ffb1 	bl	8004eb4 <HAL_GetTick>
 8005f52:	0002      	movs	r2, r0
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b64      	cmp	r3, #100	; 0x64
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e28a      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f60:	4b8a      	ldr	r3, [pc, #552]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	2380      	movs	r3, #128	; 0x80
 8005f66:	029b      	lsls	r3, r3, #10
 8005f68:	4013      	ands	r3, r2
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0xee>
 8005f6c:	e015      	b.n	8005f9a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f6e:	f7fe ffa1 	bl	8004eb4 <HAL_GetTick>
 8005f72:	0003      	movs	r3, r0
 8005f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f78:	f7fe ff9c 	bl	8004eb4 <HAL_GetTick>
 8005f7c:	0002      	movs	r2, r0
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b64      	cmp	r3, #100	; 0x64
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e275      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8a:	4b80      	ldr	r3, [pc, #512]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	2380      	movs	r3, #128	; 0x80
 8005f90:	029b      	lsls	r3, r3, #10
 8005f92:	4013      	ands	r3, r2
 8005f94:	d1f0      	bne.n	8005f78 <HAL_RCC_OscConfig+0x118>
 8005f96:	e000      	b.n	8005f9a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f98:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x146>
 8005fa4:	e069      	b.n	800607a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005fa6:	4b79      	ldr	r3, [pc, #484]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	220c      	movs	r2, #12
 8005fac:	4013      	ands	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005fb0:	4b76      	ldr	r3, [pc, #472]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	220c      	movs	r2, #12
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d11c      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x196>
 8005fbc:	4b73      	ldr	r3, [pc, #460]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	025b      	lsls	r3, r3, #9
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	d116      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc8:	4b70      	ldr	r3, [pc, #448]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2202      	movs	r2, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d005      	beq.n	8005fde <HAL_RCC_OscConfig+0x17e>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d001      	beq.n	8005fde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e24b      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fde:	4b6b      	ldr	r3, [pc, #428]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	22f8      	movs	r2, #248	; 0xf8
 8005fe4:	4393      	bics	r3, r2
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	00da      	lsls	r2, r3, #3
 8005fee:	4b67      	ldr	r3, [pc, #412]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ff4:	e041      	b.n	800607a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d024      	beq.n	8006048 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ffe:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b62      	ldr	r3, [pc, #392]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006004:	2101      	movs	r1, #1
 8006006:	430a      	orrs	r2, r1
 8006008:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600a:	f7fe ff53 	bl	8004eb4 <HAL_GetTick>
 800600e:	0003      	movs	r3, r0
 8006010:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006014:	f7fe ff4e 	bl	8004eb4 <HAL_GetTick>
 8006018:	0002      	movs	r2, r0
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e227      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006026:	4b59      	ldr	r3, [pc, #356]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2202      	movs	r2, #2
 800602c:	4013      	ands	r3, r2
 800602e:	d0f1      	beq.n	8006014 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006030:	4b56      	ldr	r3, [pc, #344]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	22f8      	movs	r2, #248	; 0xf8
 8006036:	4393      	bics	r3, r2
 8006038:	0019      	movs	r1, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	00da      	lsls	r2, r3, #3
 8006040:	4b52      	ldr	r3, [pc, #328]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006042:	430a      	orrs	r2, r1
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e018      	b.n	800607a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006048:	4b50      	ldr	r3, [pc, #320]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4b4f      	ldr	r3, [pc, #316]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 800604e:	2101      	movs	r1, #1
 8006050:	438a      	bics	r2, r1
 8006052:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7fe ff2e 	bl	8004eb4 <HAL_GetTick>
 8006058:	0003      	movs	r3, r0
 800605a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800605e:	f7fe ff29 	bl	8004eb4 <HAL_GetTick>
 8006062:	0002      	movs	r2, r0
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e202      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006070:	4b46      	ldr	r3, [pc, #280]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2202      	movs	r2, #2
 8006076:	4013      	ands	r3, r2
 8006078:	d1f1      	bne.n	800605e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2208      	movs	r2, #8
 8006080:	4013      	ands	r3, r2
 8006082:	d036      	beq.n	80060f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d019      	beq.n	80060c0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800608c:	4b3f      	ldr	r3, [pc, #252]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 800608e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006090:	4b3e      	ldr	r3, [pc, #248]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006092:	2101      	movs	r1, #1
 8006094:	430a      	orrs	r2, r1
 8006096:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006098:	f7fe ff0c 	bl	8004eb4 <HAL_GetTick>
 800609c:	0003      	movs	r3, r0
 800609e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a0:	e008      	b.n	80060b4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060a2:	f7fe ff07 	bl	8004eb4 <HAL_GetTick>
 80060a6:	0002      	movs	r2, r0
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e1e0      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060b4:	4b35      	ldr	r3, [pc, #212]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2202      	movs	r2, #2
 80060ba:	4013      	ands	r3, r2
 80060bc:	d0f1      	beq.n	80060a2 <HAL_RCC_OscConfig+0x242>
 80060be:	e018      	b.n	80060f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 80060c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c4:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 80060c6:	2101      	movs	r1, #1
 80060c8:	438a      	bics	r2, r1
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060cc:	f7fe fef2 	bl	8004eb4 <HAL_GetTick>
 80060d0:	0003      	movs	r3, r0
 80060d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060d6:	f7fe feed 	bl	8004eb4 <HAL_GetTick>
 80060da:	0002      	movs	r2, r0
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e1c6      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e8:	4b28      	ldr	r3, [pc, #160]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2202      	movs	r2, #2
 80060ee:	4013      	ands	r3, r2
 80060f0:	d1f1      	bne.n	80060d6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2204      	movs	r2, #4
 80060f8:	4013      	ands	r3, r2
 80060fa:	d100      	bne.n	80060fe <HAL_RCC_OscConfig+0x29e>
 80060fc:	e0b4      	b.n	8006268 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fe:	201f      	movs	r0, #31
 8006100:	183b      	adds	r3, r7, r0
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006106:	4b21      	ldr	r3, [pc, #132]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006108:	69da      	ldr	r2, [r3, #28]
 800610a:	2380      	movs	r3, #128	; 0x80
 800610c:	055b      	lsls	r3, r3, #21
 800610e:	4013      	ands	r3, r2
 8006110:	d110      	bne.n	8006134 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	4b1e      	ldr	r3, [pc, #120]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006118:	2180      	movs	r1, #128	; 0x80
 800611a:	0549      	lsls	r1, r1, #21
 800611c:	430a      	orrs	r2, r1
 800611e:	61da      	str	r2, [r3, #28]
 8006120:	4b1a      	ldr	r3, [pc, #104]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	055b      	lsls	r3, r3, #21
 8006128:	4013      	ands	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800612e:	183b      	adds	r3, r7, r0
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006134:	4b18      	ldr	r3, [pc, #96]	; (8006198 <HAL_RCC_OscConfig+0x338>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4013      	ands	r3, r2
 800613e:	d11a      	bne.n	8006176 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006140:	4b15      	ldr	r3, [pc, #84]	; (8006198 <HAL_RCC_OscConfig+0x338>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <HAL_RCC_OscConfig+0x338>)
 8006146:	2180      	movs	r1, #128	; 0x80
 8006148:	0049      	lsls	r1, r1, #1
 800614a:	430a      	orrs	r2, r1
 800614c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800614e:	f7fe feb1 	bl	8004eb4 <HAL_GetTick>
 8006152:	0003      	movs	r3, r0
 8006154:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006158:	f7fe feac 	bl	8004eb4 <HAL_GetTick>
 800615c:	0002      	movs	r2, r0
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b64      	cmp	r3, #100	; 0x64
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e185      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616a:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCC_OscConfig+0x338>)
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4013      	ands	r3, r2
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d10e      	bne.n	800619c <HAL_RCC_OscConfig+0x33c>
 800617e:	4b03      	ldr	r3, [pc, #12]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006180:	6a1a      	ldr	r2, [r3, #32]
 8006182:	4b02      	ldr	r3, [pc, #8]	; (800618c <HAL_RCC_OscConfig+0x32c>)
 8006184:	2101      	movs	r1, #1
 8006186:	430a      	orrs	r2, r1
 8006188:	621a      	str	r2, [r3, #32]
 800618a:	e035      	b.n	80061f8 <HAL_RCC_OscConfig+0x398>
 800618c:	40021000 	.word	0x40021000
 8006190:	fffeffff 	.word	0xfffeffff
 8006194:	fffbffff 	.word	0xfffbffff
 8006198:	40007000 	.word	0x40007000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10c      	bne.n	80061be <HAL_RCC_OscConfig+0x35e>
 80061a4:	4bb6      	ldr	r3, [pc, #728]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	4bb5      	ldr	r3, [pc, #724]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061aa:	2101      	movs	r1, #1
 80061ac:	438a      	bics	r2, r1
 80061ae:	621a      	str	r2, [r3, #32]
 80061b0:	4bb3      	ldr	r3, [pc, #716]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061b2:	6a1a      	ldr	r2, [r3, #32]
 80061b4:	4bb2      	ldr	r3, [pc, #712]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061b6:	2104      	movs	r1, #4
 80061b8:	438a      	bics	r2, r1
 80061ba:	621a      	str	r2, [r3, #32]
 80061bc:	e01c      	b.n	80061f8 <HAL_RCC_OscConfig+0x398>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b05      	cmp	r3, #5
 80061c4:	d10c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x380>
 80061c6:	4bae      	ldr	r3, [pc, #696]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061c8:	6a1a      	ldr	r2, [r3, #32]
 80061ca:	4bad      	ldr	r3, [pc, #692]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061cc:	2104      	movs	r1, #4
 80061ce:	430a      	orrs	r2, r1
 80061d0:	621a      	str	r2, [r3, #32]
 80061d2:	4bab      	ldr	r3, [pc, #684]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	4baa      	ldr	r3, [pc, #680]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061d8:	2101      	movs	r1, #1
 80061da:	430a      	orrs	r2, r1
 80061dc:	621a      	str	r2, [r3, #32]
 80061de:	e00b      	b.n	80061f8 <HAL_RCC_OscConfig+0x398>
 80061e0:	4ba7      	ldr	r3, [pc, #668]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061e2:	6a1a      	ldr	r2, [r3, #32]
 80061e4:	4ba6      	ldr	r3, [pc, #664]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061e6:	2101      	movs	r1, #1
 80061e8:	438a      	bics	r2, r1
 80061ea:	621a      	str	r2, [r3, #32]
 80061ec:	4ba4      	ldr	r3, [pc, #656]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061ee:	6a1a      	ldr	r2, [r3, #32]
 80061f0:	4ba3      	ldr	r3, [pc, #652]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80061f2:	2104      	movs	r1, #4
 80061f4:	438a      	bics	r2, r1
 80061f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d014      	beq.n	800622a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006200:	f7fe fe58 	bl	8004eb4 <HAL_GetTick>
 8006204:	0003      	movs	r3, r0
 8006206:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006208:	e009      	b.n	800621e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800620a:	f7fe fe53 	bl	8004eb4 <HAL_GetTick>
 800620e:	0002      	movs	r2, r0
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	4a9b      	ldr	r2, [pc, #620]	; (8006484 <HAL_RCC_OscConfig+0x624>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e12b      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621e:	4b98      	ldr	r3, [pc, #608]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	2202      	movs	r2, #2
 8006224:	4013      	ands	r3, r2
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x3aa>
 8006228:	e013      	b.n	8006252 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800622a:	f7fe fe43 	bl	8004eb4 <HAL_GetTick>
 800622e:	0003      	movs	r3, r0
 8006230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006232:	e009      	b.n	8006248 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fe fe3e 	bl	8004eb4 <HAL_GetTick>
 8006238:	0002      	movs	r2, r0
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	4a91      	ldr	r2, [pc, #580]	; (8006484 <HAL_RCC_OscConfig+0x624>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e116      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006248:	4b8d      	ldr	r3, [pc, #564]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	2202      	movs	r2, #2
 800624e:	4013      	ands	r3, r2
 8006250:	d1f0      	bne.n	8006234 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006252:	231f      	movs	r3, #31
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625c:	4b88      	ldr	r3, [pc, #544]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	4b87      	ldr	r3, [pc, #540]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006262:	4989      	ldr	r1, [pc, #548]	; (8006488 <HAL_RCC_OscConfig+0x628>)
 8006264:	400a      	ands	r2, r1
 8006266:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2210      	movs	r2, #16
 800626e:	4013      	ands	r3, r2
 8006270:	d063      	beq.n	800633a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d12a      	bne.n	80062d0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800627a:	4b81      	ldr	r3, [pc, #516]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800627c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800627e:	4b80      	ldr	r3, [pc, #512]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006280:	2104      	movs	r1, #4
 8006282:	430a      	orrs	r2, r1
 8006284:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006286:	4b7e      	ldr	r3, [pc, #504]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800628a:	4b7d      	ldr	r3, [pc, #500]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800628c:	2101      	movs	r1, #1
 800628e:	430a      	orrs	r2, r1
 8006290:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006292:	f7fe fe0f 	bl	8004eb4 <HAL_GetTick>
 8006296:	0003      	movs	r3, r0
 8006298:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800629c:	f7fe fe0a 	bl	8004eb4 <HAL_GetTick>
 80062a0:	0002      	movs	r2, r0
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e0e3      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80062ae:	4b74      	ldr	r3, [pc, #464]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b2:	2202      	movs	r2, #2
 80062b4:	4013      	ands	r3, r2
 80062b6:	d0f1      	beq.n	800629c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80062b8:	4b71      	ldr	r3, [pc, #452]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	22f8      	movs	r2, #248	; 0xf8
 80062be:	4393      	bics	r3, r2
 80062c0:	0019      	movs	r1, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	00da      	lsls	r2, r3, #3
 80062c8:	4b6d      	ldr	r3, [pc, #436]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062ca:	430a      	orrs	r2, r1
 80062cc:	635a      	str	r2, [r3, #52]	; 0x34
 80062ce:	e034      	b.n	800633a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	3305      	adds	r3, #5
 80062d6:	d111      	bne.n	80062fc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80062d8:	4b69      	ldr	r3, [pc, #420]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062dc:	4b68      	ldr	r3, [pc, #416]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062de:	2104      	movs	r1, #4
 80062e0:	438a      	bics	r2, r1
 80062e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80062e4:	4b66      	ldr	r3, [pc, #408]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	22f8      	movs	r2, #248	; 0xf8
 80062ea:	4393      	bics	r3, r2
 80062ec:	0019      	movs	r1, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	00da      	lsls	r2, r3, #3
 80062f4:	4b62      	ldr	r3, [pc, #392]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062f6:	430a      	orrs	r2, r1
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34
 80062fa:	e01e      	b.n	800633a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80062fc:	4b60      	ldr	r3, [pc, #384]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80062fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006300:	4b5f      	ldr	r3, [pc, #380]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006302:	2104      	movs	r1, #4
 8006304:	430a      	orrs	r2, r1
 8006306:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006308:	4b5d      	ldr	r3, [pc, #372]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800630a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800630c:	4b5c      	ldr	r3, [pc, #368]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800630e:	2101      	movs	r1, #1
 8006310:	438a      	bics	r2, r1
 8006312:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006314:	f7fe fdce 	bl	8004eb4 <HAL_GetTick>
 8006318:	0003      	movs	r3, r0
 800631a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800631e:	f7fe fdc9 	bl	8004eb4 <HAL_GetTick>
 8006322:	0002      	movs	r2, r0
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e0a2      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006330:	4b53      	ldr	r3, [pc, #332]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	2202      	movs	r2, #2
 8006336:	4013      	ands	r3, r2
 8006338:	d1f1      	bne.n	800631e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d100      	bne.n	8006344 <HAL_RCC_OscConfig+0x4e4>
 8006342:	e097      	b.n	8006474 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006344:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	220c      	movs	r2, #12
 800634a:	4013      	ands	r3, r2
 800634c:	2b08      	cmp	r3, #8
 800634e:	d100      	bne.n	8006352 <HAL_RCC_OscConfig+0x4f2>
 8006350:	e06b      	b.n	800642a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d14c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800635a:	4b49      	ldr	r3, [pc, #292]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006360:	494a      	ldr	r1, [pc, #296]	; (800648c <HAL_RCC_OscConfig+0x62c>)
 8006362:	400a      	ands	r2, r1
 8006364:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006366:	f7fe fda5 	bl	8004eb4 <HAL_GetTick>
 800636a:	0003      	movs	r3, r0
 800636c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006370:	f7fe fda0 	bl	8004eb4 <HAL_GetTick>
 8006374:	0002      	movs	r2, r0
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e079      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006382:	4b3f      	ldr	r3, [pc, #252]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	2380      	movs	r3, #128	; 0x80
 8006388:	049b      	lsls	r3, r3, #18
 800638a:	4013      	ands	r3, r2
 800638c:	d1f0      	bne.n	8006370 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800638e:	4b3c      	ldr	r3, [pc, #240]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	220f      	movs	r2, #15
 8006394:	4393      	bics	r3, r2
 8006396:	0019      	movs	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	4b38      	ldr	r3, [pc, #224]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800639e:	430a      	orrs	r2, r1
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80063a2:	4b37      	ldr	r3, [pc, #220]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4a3a      	ldr	r2, [pc, #232]	; (8006490 <HAL_RCC_OscConfig+0x630>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	0019      	movs	r1, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	431a      	orrs	r2, r3
 80063b6:	4b32      	ldr	r3, [pc, #200]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063bc:	4b30      	ldr	r3, [pc, #192]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063c2:	2180      	movs	r1, #128	; 0x80
 80063c4:	0449      	lsls	r1, r1, #17
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fe fd73 	bl	8004eb4 <HAL_GetTick>
 80063ce:	0003      	movs	r3, r0
 80063d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d4:	f7fe fd6e 	bl	8004eb4 <HAL_GetTick>
 80063d8:	0002      	movs	r2, r0
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e047      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063e6:	4b26      	ldr	r3, [pc, #152]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	2380      	movs	r3, #128	; 0x80
 80063ec:	049b      	lsls	r3, r3, #18
 80063ee:	4013      	ands	r3, r2
 80063f0:	d0f0      	beq.n	80063d4 <HAL_RCC_OscConfig+0x574>
 80063f2:	e03f      	b.n	8006474 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f4:	4b22      	ldr	r3, [pc, #136]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b21      	ldr	r3, [pc, #132]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 80063fa:	4924      	ldr	r1, [pc, #144]	; (800648c <HAL_RCC_OscConfig+0x62c>)
 80063fc:	400a      	ands	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006400:	f7fe fd58 	bl	8004eb4 <HAL_GetTick>
 8006404:	0003      	movs	r3, r0
 8006406:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640a:	f7fe fd53 	bl	8004eb4 <HAL_GetTick>
 800640e:	0002      	movs	r2, r0
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e02c      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800641c:	4b18      	ldr	r3, [pc, #96]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2380      	movs	r3, #128	; 0x80
 8006422:	049b      	lsls	r3, r3, #18
 8006424:	4013      	ands	r3, r2
 8006426:	d1f0      	bne.n	800640a <HAL_RCC_OscConfig+0x5aa>
 8006428:	e024      	b.n	8006474 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d101      	bne.n	8006436 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e01f      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800643c:	4b10      	ldr	r3, [pc, #64]	; (8006480 <HAL_RCC_OscConfig+0x620>)
 800643e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006440:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	2380      	movs	r3, #128	; 0x80
 8006446:	025b      	lsls	r3, r3, #9
 8006448:	401a      	ands	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	429a      	cmp	r2, r3
 8006450:	d10e      	bne.n	8006470 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	220f      	movs	r2, #15
 8006456:	401a      	ands	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800645c:	429a      	cmp	r2, r3
 800645e:	d107      	bne.n	8006470 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	23f0      	movs	r3, #240	; 0xf0
 8006464:	039b      	lsls	r3, r3, #14
 8006466:	401a      	ands	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800646c:	429a      	cmp	r2, r3
 800646e:	d001      	beq.n	8006474 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	0018      	movs	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	b008      	add	sp, #32
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			; (mov r8, r8)
 8006480:	40021000 	.word	0x40021000
 8006484:	00001388 	.word	0x00001388
 8006488:	efffffff 	.word	0xefffffff
 800648c:	feffffff 	.word	0xfeffffff
 8006490:	ffc2ffff 	.word	0xffc2ffff

08006494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0b3      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064a8:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2201      	movs	r2, #1
 80064ae:	4013      	ands	r3, r2
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d911      	bls.n	80064da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b6:	4b58      	ldr	r3, [pc, #352]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2201      	movs	r2, #1
 80064bc:	4393      	bics	r3, r2
 80064be:	0019      	movs	r1, r3
 80064c0:	4b55      	ldr	r3, [pc, #340]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c8:	4b53      	ldr	r3, [pc, #332]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2201      	movs	r2, #1
 80064ce:	4013      	ands	r3, r2
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d001      	beq.n	80064da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e09a      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2202      	movs	r2, #2
 80064e0:	4013      	ands	r3, r2
 80064e2:	d015      	beq.n	8006510 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2204      	movs	r2, #4
 80064ea:	4013      	ands	r3, r2
 80064ec:	d006      	beq.n	80064fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80064ee:	4b4b      	ldr	r3, [pc, #300]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	4b4a      	ldr	r3, [pc, #296]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 80064f4:	21e0      	movs	r1, #224	; 0xe0
 80064f6:	00c9      	lsls	r1, r1, #3
 80064f8:	430a      	orrs	r2, r1
 80064fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064fc:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	22f0      	movs	r2, #240	; 0xf0
 8006502:	4393      	bics	r3, r2
 8006504:	0019      	movs	r1, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	4b44      	ldr	r3, [pc, #272]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 800650c:	430a      	orrs	r2, r1
 800650e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2201      	movs	r2, #1
 8006516:	4013      	ands	r3, r2
 8006518:	d040      	beq.n	800659c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d107      	bne.n	8006532 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006522:	4b3e      	ldr	r3, [pc, #248]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	4013      	ands	r3, r2
 800652c:	d114      	bne.n	8006558 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e06e      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d107      	bne.n	800654a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800653a:	4b38      	ldr	r3, [pc, #224]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	049b      	lsls	r3, r3, #18
 8006542:	4013      	ands	r3, r2
 8006544:	d108      	bne.n	8006558 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e062      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654a:	4b34      	ldr	r3, [pc, #208]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2202      	movs	r2, #2
 8006550:	4013      	ands	r3, r2
 8006552:	d101      	bne.n	8006558 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e05b      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006558:	4b30      	ldr	r3, [pc, #192]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2203      	movs	r2, #3
 800655e:	4393      	bics	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	4b2d      	ldr	r3, [pc, #180]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800656c:	f7fe fca2 	bl	8004eb4 <HAL_GetTick>
 8006570:	0003      	movs	r3, r0
 8006572:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006574:	e009      	b.n	800658a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006576:	f7fe fc9d 	bl	8004eb4 <HAL_GetTick>
 800657a:	0002      	movs	r2, r0
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <HAL_RCC_ClockConfig+0x18c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006586:	2303      	movs	r3, #3
 8006588:	e042      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	220c      	movs	r2, #12
 8006590:	401a      	ands	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	429a      	cmp	r2, r3
 800659a:	d1ec      	bne.n	8006576 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800659c:	4b1e      	ldr	r3, [pc, #120]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2201      	movs	r2, #1
 80065a2:	4013      	ands	r3, r2
 80065a4:	683a      	ldr	r2, [r7, #0]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d211      	bcs.n	80065ce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065aa:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2201      	movs	r2, #1
 80065b0:	4393      	bics	r3, r2
 80065b2:	0019      	movs	r1, r3
 80065b4:	4b18      	ldr	r3, [pc, #96]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065bc:	4b16      	ldr	r3, [pc, #88]	; (8006618 <HAL_RCC_ClockConfig+0x184>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2201      	movs	r2, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d001      	beq.n	80065ce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e020      	b.n	8006610 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4013      	ands	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80065d8:	4b10      	ldr	r3, [pc, #64]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	4a11      	ldr	r2, [pc, #68]	; (8006624 <HAL_RCC_ClockConfig+0x190>)
 80065de:	4013      	ands	r3, r2
 80065e0:	0019      	movs	r1, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80065ec:	f000 f820 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 80065f0:	0001      	movs	r1, r0
 80065f2:	4b0a      	ldr	r3, [pc, #40]	; (800661c <HAL_RCC_ClockConfig+0x188>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	091b      	lsrs	r3, r3, #4
 80065f8:	220f      	movs	r2, #15
 80065fa:	4013      	ands	r3, r2
 80065fc:	4a0a      	ldr	r2, [pc, #40]	; (8006628 <HAL_RCC_ClockConfig+0x194>)
 80065fe:	5cd3      	ldrb	r3, [r2, r3]
 8006600:	000a      	movs	r2, r1
 8006602:	40da      	lsrs	r2, r3
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <HAL_RCC_ClockConfig+0x198>)
 8006606:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006608:	2003      	movs	r0, #3
 800660a:	f7fe fc0d 	bl	8004e28 <HAL_InitTick>
  
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b004      	add	sp, #16
 8006616:	bd80      	pop	{r7, pc}
 8006618:	40022000 	.word	0x40022000
 800661c:	40021000 	.word	0x40021000
 8006620:	00001388 	.word	0x00001388
 8006624:	fffff8ff 	.word	0xfffff8ff
 8006628:	0800c728 	.word	0x0800c728
 800662c:	20000000 	.word	0x20000000

08006630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	2300      	movs	r3, #0
 8006644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800664a:	4b20      	ldr	r3, [pc, #128]	; (80066cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	220c      	movs	r2, #12
 8006654:	4013      	ands	r3, r2
 8006656:	2b04      	cmp	r3, #4
 8006658:	d002      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x30>
 800665a:	2b08      	cmp	r3, #8
 800665c:	d003      	beq.n	8006666 <HAL_RCC_GetSysClockFreq+0x36>
 800665e:	e02c      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006660:	4b1b      	ldr	r3, [pc, #108]	; (80066d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006662:	613b      	str	r3, [r7, #16]
      break;
 8006664:	e02c      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	0c9b      	lsrs	r3, r3, #18
 800666a:	220f      	movs	r2, #15
 800666c:	4013      	ands	r3, r2
 800666e:	4a19      	ldr	r2, [pc, #100]	; (80066d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006670:	5cd3      	ldrb	r3, [r2, r3]
 8006672:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006674:	4b15      	ldr	r3, [pc, #84]	; (80066cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	220f      	movs	r2, #15
 800667a:	4013      	ands	r3, r2
 800667c:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800667e:	5cd3      	ldrb	r3, [r2, r3]
 8006680:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	025b      	lsls	r3, r3, #9
 8006688:	4013      	ands	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4810      	ldr	r0, [pc, #64]	; (80066d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006690:	f7f9 fd56 	bl	8000140 <__udivsi3>
 8006694:	0003      	movs	r3, r0
 8006696:	001a      	movs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4353      	muls	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e009      	b.n	80066b4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	000a      	movs	r2, r1
 80066a4:	0152      	lsls	r2, r2, #5
 80066a6:	1a52      	subs	r2, r2, r1
 80066a8:	0193      	lsls	r3, r2, #6
 80066aa:	1a9b      	subs	r3, r3, r2
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	185b      	adds	r3, r3, r1
 80066b0:	021b      	lsls	r3, r3, #8
 80066b2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]
      break;
 80066b8:	e002      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80066bc:	613b      	str	r3, [r7, #16]
      break;
 80066be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80066c0:	693b      	ldr	r3, [r7, #16]
}
 80066c2:	0018      	movs	r0, r3
 80066c4:	46bd      	mov	sp, r7
 80066c6:	b006      	add	sp, #24
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	40021000 	.word	0x40021000
 80066d0:	007a1200 	.word	0x007a1200
 80066d4:	0800c740 	.word	0x0800c740
 80066d8:	0800c750 	.word	0x0800c750

080066dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e0:	4b02      	ldr	r3, [pc, #8]	; (80066ec <HAL_RCC_GetHCLKFreq+0x10>)
 80066e2:	681b      	ldr	r3, [r3, #0]
}
 80066e4:	0018      	movs	r0, r3
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	20000000 	.word	0x20000000

080066f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80066f4:	f7ff fff2 	bl	80066dc <HAL_RCC_GetHCLKFreq>
 80066f8:	0001      	movs	r1, r0
 80066fa:	4b06      	ldr	r3, [pc, #24]	; (8006714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	2207      	movs	r2, #7
 8006702:	4013      	ands	r3, r2
 8006704:	4a04      	ldr	r2, [pc, #16]	; (8006718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006706:	5cd3      	ldrb	r3, [r2, r3]
 8006708:	40d9      	lsrs	r1, r3
 800670a:	000b      	movs	r3, r1
}    
 800670c:	0018      	movs	r0, r3
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	40021000 	.word	0x40021000
 8006718:	0800c738 	.word	0x0800c738

0800671c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	025b      	lsls	r3, r3, #9
 8006734:	4013      	ands	r3, r2
 8006736:	d100      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006738:	e08e      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800673a:	2017      	movs	r0, #23
 800673c:	183b      	adds	r3, r7, r0
 800673e:	2200      	movs	r2, #0
 8006740:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006742:	4b57      	ldr	r3, [pc, #348]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006744:	69da      	ldr	r2, [r3, #28]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	055b      	lsls	r3, r3, #21
 800674a:	4013      	ands	r3, r2
 800674c:	d110      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800674e:	4b54      	ldr	r3, [pc, #336]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	4b53      	ldr	r3, [pc, #332]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006754:	2180      	movs	r1, #128	; 0x80
 8006756:	0549      	lsls	r1, r1, #21
 8006758:	430a      	orrs	r2, r1
 800675a:	61da      	str	r2, [r3, #28]
 800675c:	4b50      	ldr	r3, [pc, #320]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800675e:	69da      	ldr	r2, [r3, #28]
 8006760:	2380      	movs	r3, #128	; 0x80
 8006762:	055b      	lsls	r3, r3, #21
 8006764:	4013      	ands	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]
 8006768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800676a:	183b      	adds	r3, r7, r0
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006770:	4b4c      	ldr	r3, [pc, #304]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	2380      	movs	r3, #128	; 0x80
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	4013      	ands	r3, r2
 800677a:	d11a      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800677c:	4b49      	ldr	r3, [pc, #292]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b48      	ldr	r3, [pc, #288]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	0049      	lsls	r1, r1, #1
 8006786:	430a      	orrs	r2, r1
 8006788:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800678a:	f7fe fb93 	bl	8004eb4 <HAL_GetTick>
 800678e:	0003      	movs	r3, r0
 8006790:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006792:	e008      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006794:	f7fe fb8e 	bl	8004eb4 <HAL_GetTick>
 8006798:	0002      	movs	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b64      	cmp	r3, #100	; 0x64
 80067a0:	d901      	bls.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e077      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a6:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4013      	ands	r3, r2
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067b2:	4b3b      	ldr	r3, [pc, #236]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067b4:	6a1a      	ldr	r2, [r3, #32]
 80067b6:	23c0      	movs	r3, #192	; 0xc0
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4013      	ands	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d034      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	23c0      	movs	r3, #192	; 0xc0
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4013      	ands	r3, r2
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d02c      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067d4:	4b32      	ldr	r3, [pc, #200]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80067da:	4013      	ands	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067e0:	6a1a      	ldr	r2, [r3, #32]
 80067e2:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	0249      	lsls	r1, r1, #9
 80067e8:	430a      	orrs	r2, r1
 80067ea:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067ec:	4b2c      	ldr	r3, [pc, #176]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067ee:	6a1a      	ldr	r2, [r3, #32]
 80067f0:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067f2:	492e      	ldr	r1, [pc, #184]	; (80068ac <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80067f4:	400a      	ands	r2, r1
 80067f6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067f8:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	4013      	ands	r3, r2
 8006804:	d013      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006806:	f7fe fb55 	bl	8004eb4 <HAL_GetTick>
 800680a:	0003      	movs	r3, r0
 800680c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800680e:	e009      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006810:	f7fe fb50 	bl	8004eb4 <HAL_GetTick>
 8006814:	0002      	movs	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	4a25      	ldr	r2, [pc, #148]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d901      	bls.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e038      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006824:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	2202      	movs	r2, #2
 800682a:	4013      	ands	r3, r2
 800682c:	d0f0      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006834:	4013      	ands	r3, r2
 8006836:	0019      	movs	r1, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800683e:	430a      	orrs	r2, r1
 8006840:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006842:	2317      	movs	r3, #23
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d105      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800684c:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006852:	4918      	ldr	r1, [pc, #96]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006854:	400a      	ands	r2, r1
 8006856:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2201      	movs	r2, #1
 800685e:	4013      	ands	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006862:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	2203      	movs	r2, #3
 8006868:	4393      	bics	r3, r2
 800686a:	0019      	movs	r1, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006872:	430a      	orrs	r2, r1
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2220      	movs	r2, #32
 800687c:	4013      	ands	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	2210      	movs	r2, #16
 8006886:	4393      	bics	r3, r2
 8006888:	0019      	movs	r1, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68da      	ldr	r2, [r3, #12]
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006890:	430a      	orrs	r2, r1
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	0018      	movs	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	b006      	add	sp, #24
 800689c:	bd80      	pop	{r7, pc}
 800689e:	46c0      	nop			; (mov r8, r8)
 80068a0:	40021000 	.word	0x40021000
 80068a4:	40007000 	.word	0x40007000
 80068a8:	fffffcff 	.word	0xfffffcff
 80068ac:	fffeffff 	.word	0xfffeffff
 80068b0:	00001388 	.word	0x00001388
 80068b4:	efffffff 	.word	0xefffffff

080068b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068b8:	b5b0      	push	{r4, r5, r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80068c0:	230f      	movs	r3, #15
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	2201      	movs	r2, #1
 80068c6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e081      	b.n	80069d6 <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7f5b      	ldrb	r3, [r3, #29]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d106      	bne.n	80068ea <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7fd ff63 	bl	80047b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2210      	movs	r2, #16
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b10      	cmp	r3, #16
 80068fc:	d05c      	beq.n	80069b8 <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	22ca      	movs	r2, #202	; 0xca
 8006904:	625a      	str	r2, [r3, #36]	; 0x24
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2253      	movs	r2, #83	; 0x53
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800690e:	250f      	movs	r5, #15
 8006910:	197c      	adds	r4, r7, r5
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	0018      	movs	r0, r3
 8006916:	f000 fb9d 	bl	8007054 <RTC_EnterInitMode>
 800691a:	0003      	movs	r3, r0
 800691c:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800691e:	0028      	movs	r0, r5
 8006920:	183b      	adds	r3, r7, r0
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d12c      	bne.n	8006982 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	492b      	ldr	r1, [pc, #172]	; (80069e0 <HAL_RTC_Init+0x128>)
 8006934:	400a      	ands	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6899      	ldr	r1, [r3, #8]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	68d2      	ldr	r2, [r2, #12]
 800695e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6919      	ldr	r1, [r3, #16]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	041a      	lsls	r2, r3, #16
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006974:	183c      	adds	r4, r7, r0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f000 fbae 	bl	80070da <RTC_ExitInitMode>
 800697e:	0003      	movs	r3, r0
 8006980:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006982:	230f      	movs	r3, #15
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d110      	bne.n	80069ae <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4913      	ldr	r1, [pc, #76]	; (80069e4 <HAL_RTC_Init+0x12c>)
 8006998:	400a      	ands	r2, r1
 800699a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699a      	ldr	r2, [r3, #24]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	22ff      	movs	r2, #255	; 0xff
 80069b4:	625a      	str	r2, [r3, #36]	; 0x24
 80069b6:	e003      	b.n	80069c0 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80069b8:	230f      	movs	r3, #15
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80069c0:	230f      	movs	r3, #15
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80069d0:	230f      	movs	r3, #15
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	781b      	ldrb	r3, [r3, #0]
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b004      	add	sp, #16
 80069dc:	bdb0      	pop	{r4, r5, r7, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	ff8fffbf 	.word	0xff8fffbf
 80069e4:	fffbffff 	.word	0xfffbffff

080069e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069e8:	b5b0      	push	{r4, r5, r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	7f1b      	ldrb	r3, [r3, #28]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_RTC_SetTime+0x1c>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e08e      	b.n	8006b22 <HAL_RTC_SetTime+0x13a>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d125      	bne.n	8006a62 <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2240      	movs	r2, #64	; 0x40
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d102      	bne.n	8006a28 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2200      	movs	r2, #0
 8006a26:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 fb7d 	bl	800712c <RTC_ByteToBcd2>
 8006a32:	0003      	movs	r3, r0
 8006a34:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	785b      	ldrb	r3, [r3, #1]
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f000 fb76 	bl	800712c <RTC_ByteToBcd2>
 8006a40:	0003      	movs	r3, r0
 8006a42:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a44:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	789b      	ldrb	r3, [r3, #2]
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f000 fb6e 	bl	800712c <RTC_ByteToBcd2>
 8006a50:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006a52:	0022      	movs	r2, r4
 8006a54:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e017      	b.n	8006a92 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	2240      	movs	r2, #64	; 0x40
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	d102      	bne.n	8006a74 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a80:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006a86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	78db      	ldrb	r3, [r3, #3]
 8006a8c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	22ca      	movs	r2, #202	; 0xca
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2253      	movs	r2, #83	; 0x53
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006aa2:	2513      	movs	r5, #19
 8006aa4:	197c      	adds	r4, r7, r5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f000 fad3 	bl	8007054 <RTC_EnterInitMode>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006ab2:	0028      	movs	r0, r5
 8006ab4:	183b      	adds	r3, r7, r0
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d120      	bne.n	8006afe <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	491a      	ldr	r1, [pc, #104]	; (8006b2c <HAL_RTC_SetTime+0x144>)
 8006ac4:	400a      	ands	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4917      	ldr	r1, [pc, #92]	; (8006b30 <HAL_RTC_SetTime+0x148>)
 8006ad4:	400a      	ands	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	68da      	ldr	r2, [r3, #12]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006af0:	183c      	adds	r4, r7, r0
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 faf0 	bl	80070da <RTC_ExitInitMode>
 8006afa:	0003      	movs	r3, r0
 8006afc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006afe:	2313      	movs	r3, #19
 8006b00:	18fb      	adds	r3, r7, r3
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	22ff      	movs	r2, #255	; 0xff
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	771a      	strb	r2, [r3, #28]

  return status;
 8006b1c:	2313      	movs	r3, #19
 8006b1e:	18fb      	adds	r3, r7, r3
 8006b20:	781b      	ldrb	r3, [r3, #0]
}
 8006b22:	0018      	movs	r0, r3
 8006b24:	46bd      	mov	sp, r7
 8006b26:	b006      	add	sp, #24
 8006b28:	bdb0      	pop	{r4, r5, r7, pc}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	007f7f7f 	.word	0x007f7f7f
 8006b30:	fffbffff 	.word	0xfffbffff

08006b34 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	045b      	lsls	r3, r3, #17
 8006b56:	0c5a      	lsrs	r2, r3, #17
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <HAL_RTC_GetTime+0xb8>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	0c1b      	lsrs	r3, r3, #16
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	223f      	movs	r2, #63	; 0x3f
 8006b70:	4013      	ands	r3, r2
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	227f      	movs	r2, #127	; 0x7f
 8006b80:	4013      	ands	r3, r2
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	227f      	movs	r2, #127	; 0x7f
 8006b8e:	4013      	ands	r3, r2
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	0d9b      	lsrs	r3, r3, #22
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d11a      	bne.n	8006be2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f000 fadc 	bl	800716e <RTC_Bcd2ToByte>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	001a      	movs	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f000 fad3 	bl	800716e <RTC_Bcd2ToByte>
 8006bc8:	0003      	movs	r3, r0
 8006bca:	001a      	movs	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	789b      	ldrb	r3, [r3, #2]
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 faca 	bl	800716e <RTC_Bcd2ToByte>
 8006bda:	0003      	movs	r3, r0
 8006bdc:	001a      	movs	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	0018      	movs	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b006      	add	sp, #24
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	007f7f7f 	.word	0x007f7f7f

08006bf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006bf0:	b5b0      	push	{r4, r5, r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	7f1b      	ldrb	r3, [r3, #28]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_RTC_SetDate+0x1c>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e07a      	b.n	8006d02 <HAL_RTC_SetDate+0x112>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2202      	movs	r2, #2
 8006c16:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10e      	bne.n	8006c3c <HAL_RTC_SetDate+0x4c>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	001a      	movs	r2, r3
 8006c24:	2310      	movs	r3, #16
 8006c26:	4013      	ands	r3, r2
 8006c28:	d008      	beq.n	8006c3c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	2210      	movs	r2, #16
 8006c30:	4393      	bics	r3, r2
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	330a      	adds	r3, #10
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d11c      	bne.n	8006c7c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	78db      	ldrb	r3, [r3, #3]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f000 fa70 	bl	800712c <RTC_ByteToBcd2>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	785b      	ldrb	r3, [r3, #1]
 8006c54:	0018      	movs	r0, r3
 8006c56:	f000 fa69 	bl	800712c <RTC_ByteToBcd2>
 8006c5a:	0003      	movs	r3, r0
 8006c5c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c5e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	789b      	ldrb	r3, [r3, #2]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fa61 	bl	800712c <RTC_ByteToBcd2>
 8006c6a:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006c6c:	0022      	movs	r2, r4
 8006c6e:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006c76:	4313      	orrs	r3, r2
 8006c78:	617b      	str	r3, [r7, #20]
 8006c7a:	e00e      	b.n	8006c9a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	78db      	ldrb	r3, [r3, #3]
 8006c80:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	785b      	ldrb	r3, [r3, #1]
 8006c86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c88:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006c8e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	22ca      	movs	r2, #202	; 0xca
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2253      	movs	r2, #83	; 0x53
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006caa:	2513      	movs	r5, #19
 8006cac:	197c      	adds	r4, r7, r5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 f9cf 	bl	8007054 <RTC_EnterInitMode>
 8006cb6:	0003      	movs	r3, r0
 8006cb8:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006cba:	0028      	movs	r0, r5
 8006cbc:	183b      	adds	r3, r7, r0
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10c      	bne.n	8006cde <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	4910      	ldr	r1, [pc, #64]	; (8006d0c <HAL_RTC_SetDate+0x11c>)
 8006ccc:	400a      	ands	r2, r1
 8006cce:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006cd0:	183c      	adds	r4, r7, r0
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f000 fa00 	bl	80070da <RTC_ExitInitMode>
 8006cda:	0003      	movs	r3, r0
 8006cdc:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8006cde:	2313      	movs	r3, #19
 8006ce0:	18fb      	adds	r3, r7, r3
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d102      	bne.n	8006cee <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	22ff      	movs	r2, #255	; 0xff
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]

  return status;
 8006cfc:	2313      	movs	r3, #19
 8006cfe:	18fb      	adds	r3, r7, r3
 8006d00:	781b      	ldrb	r3, [r3, #0]
}
 8006d02:	0018      	movs	r0, r3
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b006      	add	sp, #24
 8006d08:	bdb0      	pop	{r4, r5, r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	00ffff3f 	.word	0x00ffff3f

08006d10 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a21      	ldr	r2, [pc, #132]	; (8006dac <HAL_RTC_GetDate+0x9c>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	221f      	movs	r2, #31
 8006d3e:	4013      	ands	r3, r2
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	223f      	movs	r2, #63	; 0x3f
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	b2da      	uxtb	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	0b5b      	lsrs	r3, r3, #13
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2207      	movs	r2, #7
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d11a      	bne.n	8006da0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	78db      	ldrb	r3, [r3, #3]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 f9fd 	bl	800716e <RTC_Bcd2ToByte>
 8006d74:	0003      	movs	r3, r0
 8006d76:	001a      	movs	r2, r3
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f9f4 	bl	800716e <RTC_Bcd2ToByte>
 8006d86:	0003      	movs	r3, r0
 8006d88:	001a      	movs	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	789b      	ldrb	r3, [r3, #2]
 8006d92:	0018      	movs	r0, r3
 8006d94:	f000 f9eb 	bl	800716e <RTC_Bcd2ToByte>
 8006d98:	0003      	movs	r3, r0
 8006d9a:	001a      	movs	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	0018      	movs	r0, r3
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b006      	add	sp, #24
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	00ffff3f 	.word	0x00ffff3f

08006db0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b089      	sub	sp, #36	; 0x24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006dbc:	4b75      	ldr	r3, [pc, #468]	; (8006f94 <HAL_RTC_SetAlarm_IT+0x1e4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	22fa      	movs	r2, #250	; 0xfa
 8006dc2:	01d1      	lsls	r1, r2, #7
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7f9 f9bb 	bl	8000140 <__udivsi3>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	001a      	movs	r2, r3
 8006dce:	0013      	movs	r3, r2
 8006dd0:	015b      	lsls	r3, r3, #5
 8006dd2:	1a9b      	subs	r3, r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	189b      	adds	r3, r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	7f1b      	ldrb	r3, [r3, #28]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d101      	bne.n	8006df0 <HAL_RTC_SetAlarm_IT+0x40>
 8006dec:	2302      	movs	r3, #2
 8006dee:	e0cd      	b.n	8006f8c <HAL_RTC_SetAlarm_IT+0x1dc>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2201      	movs	r2, #1
 8006df4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d136      	bne.n	8006e70 <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2240      	movs	r2, #64	; 0x40
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d102      	bne.n	8006e14 <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2200      	movs	r2, #0
 8006e12:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f000 f987 	bl	800712c <RTC_ByteToBcd2>
 8006e1e:	0003      	movs	r3, r0
 8006e20:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	0018      	movs	r0, r3
 8006e28:	f000 f980 	bl	800712c <RTC_ByteToBcd2>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006e30:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	789b      	ldrb	r3, [r3, #2]
 8006e36:	0018      	movs	r0, r3
 8006e38:	f000 f978 	bl	800712c <RTC_ByteToBcd2>
 8006e3c:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006e3e:	0022      	movs	r2, r4
 8006e40:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	78db      	ldrb	r3, [r3, #3]
 8006e46:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	5c9b      	ldrb	r3, [r3, r2]
 8006e52:	0018      	movs	r0, r3
 8006e54:	f000 f96a 	bl	800712c <RTC_ByteToBcd2>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8006e5c:	0022      	movs	r2, r4
 8006e5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8006e64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	e022      	b.n	8006eb6 <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2240      	movs	r2, #64	; 0x40
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d102      	bne.n	8006e82 <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	785b      	ldrb	r3, [r3, #1]
 8006e8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006e8e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8006e94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	78db      	ldrb	r3, [r3, #3]
 8006e9a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8006e9c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2120      	movs	r1, #32
 8006ea2:	5c5b      	ldrb	r3, [r3, r1]
 8006ea4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8006ea6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8006eac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	22ca      	movs	r2, #202	; 0xca
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2253      	movs	r2, #83	; 0x53
 8006ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	492e      	ldr	r1, [pc, #184]	; (8006f98 <HAL_RTC_SetAlarm_IT+0x1e8>)
 8006ede:	400a      	ands	r2, r1
 8006ee0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	22ff      	movs	r2, #255	; 0xff
 8006eea:	401a      	ands	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	492a      	ldr	r1, [pc, #168]	; (8006f9c <HAL_RTC_SetAlarm_IT+0x1ec>)
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	22ff      	movs	r2, #255	; 0xff
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e038      	b.n	8006f8c <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	4013      	ands	r3, r2
 8006f24:	d0e7      	beq.n	8006ef6 <HAL_RTC_SetAlarm_IT+0x146>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69fa      	ldr	r2, [r7, #28]
 8006f2c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	689a      	ldr	r2, [r3, #8]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	0049      	lsls	r1, r1, #1
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2180      	movs	r1, #128	; 0x80
 8006f54:	0149      	lsls	r1, r1, #5
 8006f56:	430a      	orrs	r2, r1
 8006f58:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006f5a:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8006f60:	2180      	movs	r1, #128	; 0x80
 8006f62:	0289      	lsls	r1, r1, #10
 8006f64:	430a      	orrs	r2, r1
 8006f66:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006f68:	4b0d      	ldr	r3, [pc, #52]	; (8006fa0 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8006f6e:	2180      	movs	r1, #128	; 0x80
 8006f70:	0289      	lsls	r1, r1, #10
 8006f72:	430a      	orrs	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	22ff      	movs	r2, #255	; 0xff
 8006f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b009      	add	sp, #36	; 0x24
 8006f92:	bd90      	pop	{r4, r7, pc}
 8006f94:	20000000 	.word	0x20000000
 8006f98:	fffffeff 	.word	0xfffffeff
 8006f9c:	fffffe7f 	.word	0xfffffe7f
 8006fa0:	40010400 	.word	0x40010400

08006fa4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006fac:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <HAL_RTC_AlarmIRQHandler+0x58>)
 8006fae:	2280      	movs	r2, #128	; 0x80
 8006fb0:	0292      	lsls	r2, r2, #10
 8006fb2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	2380      	movs	r3, #128	; 0x80
 8006fbc:	015b      	lsls	r3, r3, #5
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	d014      	beq.n	8006fec <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4013      	ands	r3, r2
 8006fce:	d00d      	beq.n	8006fec <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	22ff      	movs	r2, #255	; 0xff
 8006fd8:	401a      	ands	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4908      	ldr	r1, [pc, #32]	; (8007000 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7fd faf2 	bl	80045d0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	775a      	strb	r2, [r3, #29]
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b002      	add	sp, #8
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	40010400 	.word	0x40010400
 8007000:	fffffe7f 	.word	0xfffffe7f

08007004 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a0e      	ldr	r2, [pc, #56]	; (8007050 <HAL_RTC_WaitForSynchro+0x4c>)
 8007016:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007018:	f7fd ff4c 	bl	8004eb4 <HAL_GetTick>
 800701c:	0003      	movs	r3, r0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007020:	e00a      	b.n	8007038 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007022:	f7fd ff47 	bl	8004eb4 <HAL_GetTick>
 8007026:	0002      	movs	r2, r0
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	23fa      	movs	r3, #250	; 0xfa
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	429a      	cmp	r2, r3
 8007032:	d901      	bls.n	8007038 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e006      	b.n	8007046 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	4013      	ands	r3, r2
 8007042:	d0ee      	beq.n	8007022 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	0018      	movs	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	b004      	add	sp, #16
 800704c:	bd80      	pop	{r7, pc}
 800704e:	46c0      	nop			; (mov r8, r8)
 8007050:	00017959 	.word	0x00017959

08007054 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007060:	230f      	movs	r3, #15
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	2240      	movs	r2, #64	; 0x40
 8007070:	4013      	ands	r3, r2
 8007072:	d12b      	bne.n	80070cc <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2180      	movs	r1, #128	; 0x80
 8007080:	430a      	orrs	r2, r1
 8007082:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007084:	f7fd ff16 	bl	8004eb4 <HAL_GetTick>
 8007088:	0003      	movs	r3, r0
 800708a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800708c:	e013      	b.n	80070b6 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800708e:	f7fd ff11 	bl	8004eb4 <HAL_GetTick>
 8007092:	0002      	movs	r2, r0
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	200f      	movs	r0, #15
 800709a:	183b      	adds	r3, r7, r0
 800709c:	1839      	adds	r1, r7, r0
 800709e:	7809      	ldrb	r1, [r1, #0]
 80070a0:	7019      	strb	r1, [r3, #0]
 80070a2:	23fa      	movs	r3, #250	; 0xfa
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d905      	bls.n	80070b6 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2204      	movs	r2, #4
 80070ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80070b0:	183b      	adds	r3, r7, r0
 80070b2:	2201      	movs	r2, #1
 80070b4:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	2240      	movs	r2, #64	; 0x40
 80070be:	4013      	ands	r3, r2
 80070c0:	d104      	bne.n	80070cc <RTC_EnterInitMode+0x78>
 80070c2:	230f      	movs	r3, #15
 80070c4:	18fb      	adds	r3, r7, r3
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d1e0      	bne.n	800708e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80070cc:	230f      	movs	r3, #15
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	781b      	ldrb	r3, [r3, #0]
}
 80070d2:	0018      	movs	r0, r3
 80070d4:	46bd      	mov	sp, r7
 80070d6:	b004      	add	sp, #16
 80070d8:	bd80      	pop	{r7, pc}

080070da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070da:	b590      	push	{r4, r7, lr}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e2:	240f      	movs	r4, #15
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2180      	movs	r1, #128	; 0x80
 80070f6:	438a      	bics	r2, r1
 80070f8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2220      	movs	r2, #32
 8007102:	4013      	ands	r3, r2
 8007104:	d10b      	bne.n	800711e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff ff7b 	bl	8007004 <HAL_RTC_WaitForSynchro>
 800710e:	1e03      	subs	r3, r0, #0
 8007110:	d005      	beq.n	800711e <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2204      	movs	r2, #4
 8007116:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007118:	193b      	adds	r3, r7, r4
 800711a:	2201      	movs	r2, #1
 800711c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800711e:	230f      	movs	r3, #15
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	781b      	ldrb	r3, [r3, #0]
}
 8007124:	0018      	movs	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	b005      	add	sp, #20
 800712a:	bd90      	pop	{r4, r7, pc}

0800712c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	0002      	movs	r2, r0
 8007134:	1dfb      	adds	r3, r7, #7
 8007136:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800713c:	e007      	b.n	800714e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007144:	1dfb      	adds	r3, r7, #7
 8007146:	1dfa      	adds	r2, r7, #7
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	3a0a      	subs	r2, #10
 800714c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800714e:	1dfb      	adds	r3, r7, #7
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b09      	cmp	r3, #9
 8007154:	d8f3      	bhi.n	800713e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	b2da      	uxtb	r2, r3
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	4313      	orrs	r3, r2
 8007164:	b2db      	uxtb	r3, r3
}
 8007166:	0018      	movs	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	b004      	add	sp, #16
 800716c:	bd80      	pop	{r7, pc}

0800716e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	0002      	movs	r2, r0
 8007176:	1dfb      	adds	r3, r7, #7
 8007178:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800717e:	1dfb      	adds	r3, r7, #7
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	091b      	lsrs	r3, r3, #4
 8007184:	b2db      	uxtb	r3, r3
 8007186:	001a      	movs	r2, r3
 8007188:	0013      	movs	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	189b      	adds	r3, r3, r2
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	1dfb      	adds	r3, r7, #7
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	210f      	movs	r1, #15
 800719c:	400b      	ands	r3, r1
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	18d3      	adds	r3, r2, r3
 80071a2:	b2db      	uxtb	r3, r3
}
 80071a4:	0018      	movs	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	b004      	add	sp, #16
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0a8      	b.n	8007310 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	2382      	movs	r3, #130	; 0x82
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d009      	beq.n	80071e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	61da      	str	r2, [r3, #28]
 80071d8:	e005      	b.n	80071e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	225d      	movs	r2, #93	; 0x5d
 80071f0:	5c9b      	ldrb	r3, [r3, r2]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	225c      	movs	r2, #92	; 0x5c
 80071fc:	2100      	movs	r1, #0
 80071fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	0018      	movs	r0, r3
 8007204:	f7fd faf4 	bl	80047f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	225d      	movs	r2, #93	; 0x5d
 800720c:	2102      	movs	r1, #2
 800720e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2140      	movs	r1, #64	; 0x40
 800721c:	438a      	bics	r2, r1
 800721e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	23e0      	movs	r3, #224	; 0xe0
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	429a      	cmp	r2, r3
 800722a:	d902      	bls.n	8007232 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e002      	b.n	8007238 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	015b      	lsls	r3, r3, #5
 8007236:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	23f0      	movs	r3, #240	; 0xf0
 800723e:	011b      	lsls	r3, r3, #4
 8007240:	429a      	cmp	r2, r3
 8007242:	d008      	beq.n	8007256 <HAL_SPI_Init+0xaa>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	23e0      	movs	r3, #224	; 0xe0
 800724a:	00db      	lsls	r3, r3, #3
 800724c:	429a      	cmp	r2, r3
 800724e:	d002      	beq.n	8007256 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685a      	ldr	r2, [r3, #4]
 800725a:	2382      	movs	r3, #130	; 0x82
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	401a      	ands	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6899      	ldr	r1, [r3, #8]
 8007264:	2384      	movs	r3, #132	; 0x84
 8007266:	021b      	lsls	r3, r3, #8
 8007268:	400b      	ands	r3, r1
 800726a:	431a      	orrs	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	2102      	movs	r1, #2
 8007272:	400b      	ands	r3, r1
 8007274:	431a      	orrs	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	2101      	movs	r1, #1
 800727c:	400b      	ands	r3, r1
 800727e:	431a      	orrs	r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6999      	ldr	r1, [r3, #24]
 8007284:	2380      	movs	r3, #128	; 0x80
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	400b      	ands	r3, r1
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	2138      	movs	r1, #56	; 0x38
 8007292:	400b      	ands	r3, r1
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	400b      	ands	r3, r1
 800729e:	431a      	orrs	r2, r3
 80072a0:	0011      	movs	r1, r2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072a6:	2380      	movs	r3, #128	; 0x80
 80072a8:	019b      	lsls	r3, r3, #6
 80072aa:	401a      	ands	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	0c1b      	lsrs	r3, r3, #16
 80072ba:	2204      	movs	r2, #4
 80072bc:	401a      	ands	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2110      	movs	r1, #16
 80072c4:	400b      	ands	r3, r1
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	2108      	movs	r1, #8
 80072ce:	400b      	ands	r3, r1
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68d9      	ldr	r1, [r3, #12]
 80072d6:	23f0      	movs	r3, #240	; 0xf0
 80072d8:	011b      	lsls	r3, r3, #4
 80072da:	400b      	ands	r3, r1
 80072dc:	431a      	orrs	r2, r3
 80072de:	0011      	movs	r1, r2
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	2380      	movs	r3, #128	; 0x80
 80072e4:	015b      	lsls	r3, r3, #5
 80072e6:	401a      	ands	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	69da      	ldr	r2, [r3, #28]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4907      	ldr	r1, [pc, #28]	; (8007318 <HAL_SPI_Init+0x16c>)
 80072fc:	400a      	ands	r2, r1
 80072fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	225d      	movs	r2, #93	; 0x5d
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}
 8007318:	fffff7ff 	.word	0xfffff7ff

0800731c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b089      	sub	sp, #36	; 0x24
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	1dbb      	adds	r3, r7, #6
 800732a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800732c:	2117      	movs	r1, #23
 800732e:	187b      	adds	r3, r7, r1
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	225d      	movs	r2, #93	; 0x5d
 8007338:	5c9b      	ldrb	r3, [r3, r2]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d003      	beq.n	8007348 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8007340:	187b      	adds	r3, r7, r1
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
    goto error;
 8007346:	e12b      	b.n	80075a0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	2382      	movs	r3, #130	; 0x82
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	429a      	cmp	r2, r3
 8007352:	d113      	bne.n	800737c <HAL_SPI_Receive+0x60>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10f      	bne.n	800737c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	225d      	movs	r2, #93	; 0x5d
 8007360:	2104      	movs	r1, #4
 8007362:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007364:	1dbb      	adds	r3, r7, #6
 8007366:	881c      	ldrh	r4, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	0023      	movs	r3, r4
 8007374:	f000 f924 	bl	80075c0 <HAL_SPI_TransmitReceive>
 8007378:	0003      	movs	r3, r0
 800737a:	e118      	b.n	80075ae <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	225c      	movs	r2, #92	; 0x5c
 8007380:	5c9b      	ldrb	r3, [r3, r2]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_SPI_Receive+0x6e>
 8007386:	2302      	movs	r3, #2
 8007388:	e111      	b.n	80075ae <HAL_SPI_Receive+0x292>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	225c      	movs	r2, #92	; 0x5c
 800738e:	2101      	movs	r1, #1
 8007390:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007392:	f7fd fd8f 	bl	8004eb4 <HAL_GetTick>
 8007396:	0003      	movs	r3, r0
 8007398:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_SPI_Receive+0x8c>
 80073a0:	1dbb      	adds	r3, r7, #6
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80073a8:	2317      	movs	r3, #23
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80073b0:	e0f6      	b.n	80075a0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	225d      	movs	r2, #93	; 0x5d
 80073b6:	2104      	movs	r1, #4
 80073b8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1dba      	adds	r2, r7, #6
 80073ca:	2144      	movs	r1, #68	; 0x44
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	1dba      	adds	r2, r7, #6
 80073d4:	2146      	movs	r1, #70	; 0x46
 80073d6:	8812      	ldrh	r2, [r2, #0]
 80073d8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	23e0      	movs	r3, #224	; 0xe0
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	429a      	cmp	r2, r3
 8007402:	d908      	bls.n	8007416 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	496a      	ldr	r1, [pc, #424]	; (80075b8 <HAL_SPI_Receive+0x29c>)
 8007410:	400a      	ands	r2, r1
 8007412:	605a      	str	r2, [r3, #4]
 8007414:	e008      	b.n	8007428 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2180      	movs	r1, #128	; 0x80
 8007422:	0149      	lsls	r1, r1, #5
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	2380      	movs	r3, #128	; 0x80
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	429a      	cmp	r2, r3
 8007432:	d10f      	bne.n	8007454 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2140      	movs	r1, #64	; 0x40
 8007440:	438a      	bics	r2, r1
 8007442:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	495b      	ldr	r1, [pc, #364]	; (80075bc <HAL_SPI_Receive+0x2a0>)
 8007450:	400a      	ands	r2, r1
 8007452:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2240      	movs	r2, #64	; 0x40
 800745c:	4013      	ands	r3, r2
 800745e:	2b40      	cmp	r3, #64	; 0x40
 8007460:	d007      	beq.n	8007472 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2140      	movs	r1, #64	; 0x40
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68da      	ldr	r2, [r3, #12]
 8007476:	23e0      	movs	r3, #224	; 0xe0
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	429a      	cmp	r2, r3
 800747c:	d900      	bls.n	8007480 <HAL_SPI_Receive+0x164>
 800747e:	e071      	b.n	8007564 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007480:	e035      	b.n	80074ee <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2201      	movs	r2, #1
 800748a:	4013      	ands	r3, r2
 800748c:	2b01      	cmp	r3, #1
 800748e:	d117      	bne.n	80074c0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	001a      	movs	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2246      	movs	r2, #70	; 0x46
 80074b0:	5a9b      	ldrh	r3, [r3, r2]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b299      	uxth	r1, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2246      	movs	r2, #70	; 0x46
 80074bc:	5299      	strh	r1, [r3, r2]
 80074be:	e016      	b.n	80074ee <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c0:	f7fd fcf8 	bl	8004eb4 <HAL_GetTick>
 80074c4:	0002      	movs	r2, r0
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d802      	bhi.n	80074d6 <HAL_SPI_Receive+0x1ba>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	d102      	bne.n	80074dc <HAL_SPI_Receive+0x1c0>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d108      	bne.n	80074ee <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80074dc:	2317      	movs	r3, #23
 80074de:	18fb      	adds	r3, r7, r3
 80074e0:	2203      	movs	r2, #3
 80074e2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	225d      	movs	r2, #93	; 0x5d
 80074e8:	2101      	movs	r1, #1
 80074ea:	5499      	strb	r1, [r3, r2]
          goto error;
 80074ec:	e058      	b.n	80075a0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2246      	movs	r2, #70	; 0x46
 80074f2:	5a9b      	ldrh	r3, [r3, r2]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1c3      	bne.n	8007482 <HAL_SPI_Receive+0x166>
 80074fa:	e039      	b.n	8007570 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2201      	movs	r2, #1
 8007504:	4013      	ands	r3, r2
 8007506:	2b01      	cmp	r3, #1
 8007508:	d115      	bne.n	8007536 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	b292      	uxth	r2, r2
 8007516:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	1c9a      	adds	r2, r3, #2
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2246      	movs	r2, #70	; 0x46
 8007526:	5a9b      	ldrh	r3, [r3, r2]
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b299      	uxth	r1, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2246      	movs	r2, #70	; 0x46
 8007532:	5299      	strh	r1, [r3, r2]
 8007534:	e016      	b.n	8007564 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007536:	f7fd fcbd 	bl	8004eb4 <HAL_GetTick>
 800753a:	0002      	movs	r2, r0
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	429a      	cmp	r2, r3
 8007544:	d802      	bhi.n	800754c <HAL_SPI_Receive+0x230>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	d102      	bne.n	8007552 <HAL_SPI_Receive+0x236>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d108      	bne.n	8007564 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8007552:	2317      	movs	r3, #23
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	2203      	movs	r2, #3
 8007558:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	225d      	movs	r2, #93	; 0x5d
 800755e:	2101      	movs	r1, #1
 8007560:	5499      	strb	r1, [r3, r2]
          goto error;
 8007562:	e01d      	b.n	80075a0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2246      	movs	r2, #70	; 0x46
 8007568:	5a9b      	ldrh	r3, [r3, r2]
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1c5      	bne.n	80074fc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	0018      	movs	r0, r3
 8007578:	f000 fb34 	bl	8007be4 <SPI_EndRxTransaction>
 800757c:	1e03      	subs	r3, r0, #0
 800757e:	d002      	beq.n	8007586 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2220      	movs	r2, #32
 8007584:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800758e:	2317      	movs	r3, #23
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	2201      	movs	r2, #1
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e003      	b.n	80075a0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	225d      	movs	r2, #93	; 0x5d
 800759c:	2101      	movs	r1, #1
 800759e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	225c      	movs	r2, #92	; 0x5c
 80075a4:	2100      	movs	r1, #0
 80075a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80075a8:	2317      	movs	r3, #23
 80075aa:	18fb      	adds	r3, r7, r3
 80075ac:	781b      	ldrb	r3, [r3, #0]
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b007      	add	sp, #28
 80075b4:	bd90      	pop	{r4, r7, pc}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	ffffefff 	.word	0xffffefff
 80075bc:	ffffbfff 	.word	0xffffbfff

080075c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	; 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	001a      	movs	r2, r3
 80075ce:	1cbb      	adds	r3, r7, #2
 80075d0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075d2:	2301      	movs	r3, #1
 80075d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80075d6:	2323      	movs	r3, #35	; 0x23
 80075d8:	18fb      	adds	r3, r7, r3
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	225c      	movs	r2, #92	; 0x5c
 80075e2:	5c9b      	ldrb	r3, [r3, r2]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x2c>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e1c4      	b.n	8007976 <HAL_SPI_TransmitReceive+0x3b6>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	225c      	movs	r2, #92	; 0x5c
 80075f0:	2101      	movs	r1, #1
 80075f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075f4:	f7fd fc5e 	bl	8004eb4 <HAL_GetTick>
 80075f8:	0003      	movs	r3, r0
 80075fa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075fc:	201b      	movs	r0, #27
 80075fe:	183b      	adds	r3, r7, r0
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	215d      	movs	r1, #93	; 0x5d
 8007604:	5c52      	ldrb	r2, [r2, r1]
 8007606:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800760e:	2312      	movs	r3, #18
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	1cba      	adds	r2, r7, #2
 8007614:	8812      	ldrh	r2, [r2, #0]
 8007616:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007618:	183b      	adds	r3, r7, r0
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d011      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x84>
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	2382      	movs	r3, #130	; 0x82
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	429a      	cmp	r2, r3
 8007628:	d107      	bne.n	800763a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d103      	bne.n	800763a <HAL_SPI_TransmitReceive+0x7a>
 8007632:	183b      	adds	r3, r7, r0
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	2b04      	cmp	r3, #4
 8007638:	d004      	beq.n	8007644 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800763a:	2323      	movs	r3, #35	; 0x23
 800763c:	18fb      	adds	r3, r7, r3
 800763e:	2202      	movs	r2, #2
 8007640:	701a      	strb	r2, [r3, #0]
    goto error;
 8007642:	e191      	b.n	8007968 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d006      	beq.n	8007658 <HAL_SPI_TransmitReceive+0x98>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_SPI_TransmitReceive+0x98>
 8007650:	1cbb      	adds	r3, r7, #2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007658:	2323      	movs	r3, #35	; 0x23
 800765a:	18fb      	adds	r3, r7, r3
 800765c:	2201      	movs	r2, #1
 800765e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007660:	e182      	b.n	8007968 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	225d      	movs	r2, #93	; 0x5d
 8007666:	5c9b      	ldrb	r3, [r3, r2]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b04      	cmp	r3, #4
 800766c:	d003      	beq.n	8007676 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	225d      	movs	r2, #93	; 0x5d
 8007672:	2105      	movs	r1, #5
 8007674:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1cba      	adds	r2, r7, #2
 8007686:	2146      	movs	r1, #70	; 0x46
 8007688:	8812      	ldrh	r2, [r2, #0]
 800768a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1cba      	adds	r2, r7, #2
 8007690:	2144      	movs	r1, #68	; 0x44
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	1cba      	adds	r2, r7, #2
 80076a0:	8812      	ldrh	r2, [r2, #0]
 80076a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	1cba      	adds	r2, r7, #2
 80076a8:	8812      	ldrh	r2, [r2, #0]
 80076aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	23e0      	movs	r3, #224	; 0xe0
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d908      	bls.n	80076d6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	49ac      	ldr	r1, [pc, #688]	; (8007980 <HAL_SPI_TransmitReceive+0x3c0>)
 80076d0:	400a      	ands	r2, r1
 80076d2:	605a      	str	r2, [r3, #4]
 80076d4:	e008      	b.n	80076e8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2180      	movs	r1, #128	; 0x80
 80076e2:	0149      	lsls	r1, r1, #5
 80076e4:	430a      	orrs	r2, r1
 80076e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2240      	movs	r2, #64	; 0x40
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b40      	cmp	r3, #64	; 0x40
 80076f4:	d007      	beq.n	8007706 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2140      	movs	r1, #64	; 0x40
 8007702:	430a      	orrs	r2, r1
 8007704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	23e0      	movs	r3, #224	; 0xe0
 800770c:	00db      	lsls	r3, r3, #3
 800770e:	429a      	cmp	r2, r3
 8007710:	d800      	bhi.n	8007714 <HAL_SPI_TransmitReceive+0x154>
 8007712:	e083      	b.n	800781c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x168>
 800771c:	2312      	movs	r3, #18
 800771e:	18fb      	adds	r3, r7, r3
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d000      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x168>
 8007726:	e06d      	b.n	8007804 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	1c9a      	adds	r2, r3, #2
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800774c:	e05a      	b.n	8007804 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	2202      	movs	r2, #2
 8007756:	4013      	ands	r3, r2
 8007758:	2b02      	cmp	r3, #2
 800775a:	d11b      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x1d4>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d016      	beq.n	8007794 <HAL_SPI_TransmitReceive+0x1d4>
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b01      	cmp	r3, #1
 800776a:	d113      	bne.n	8007794 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	881a      	ldrh	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	1c9a      	adds	r2, r3, #2
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	2201      	movs	r2, #1
 800779c:	4013      	ands	r3, r2
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d11c      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x21c>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2246      	movs	r2, #70	; 0x46
 80077a6:	5a9b      	ldrh	r3, [r3, r2]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d016      	beq.n	80077dc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	b292      	uxth	r2, r2
 80077ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	1c9a      	adds	r2, r3, #2
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2246      	movs	r2, #70	; 0x46
 80077ca:	5a9b      	ldrh	r3, [r3, r2]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b299      	uxth	r1, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2246      	movs	r2, #70	; 0x46
 80077d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077d8:	2301      	movs	r3, #1
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077dc:	f7fd fb6a 	bl	8004eb4 <HAL_GetTick>
 80077e0:	0002      	movs	r2, r0
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d80b      	bhi.n	8007804 <HAL_SPI_TransmitReceive+0x244>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	3301      	adds	r3, #1
 80077f0:	d008      	beq.n	8007804 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80077f2:	2323      	movs	r3, #35	; 0x23
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	2203      	movs	r2, #3
 80077f8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	225d      	movs	r2, #93	; 0x5d
 80077fe:	2101      	movs	r1, #1
 8007800:	5499      	strb	r1, [r3, r2]
        goto error;
 8007802:	e0b1      	b.n	8007968 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d19f      	bne.n	800774e <HAL_SPI_TransmitReceive+0x18e>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2246      	movs	r2, #70	; 0x46
 8007812:	5a9b      	ldrh	r3, [r3, r2]
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d199      	bne.n	800774e <HAL_SPI_TransmitReceive+0x18e>
 800781a:	e089      	b.n	8007930 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x270>
 8007824:	2312      	movs	r3, #18
 8007826:	18fb      	adds	r3, r7, r3
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d000      	beq.n	8007830 <HAL_SPI_TransmitReceive+0x270>
 800782e:	e074      	b.n	800791a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	7812      	ldrb	r2, [r2, #0]
 800783c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007856:	e060      	b.n	800791a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2202      	movs	r2, #2
 8007860:	4013      	ands	r3, r2
 8007862:	2b02      	cmp	r3, #2
 8007864:	d11c      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x2e0>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d017      	beq.n	80078a0 <HAL_SPI_TransmitReceive+0x2e0>
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	2b01      	cmp	r3, #1
 8007874:	d114      	bne.n	80078a0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2201      	movs	r2, #1
 80078a8:	4013      	ands	r3, r2
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d11e      	bne.n	80078ec <HAL_SPI_TransmitReceive+0x32c>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2246      	movs	r2, #70	; 0x46
 80078b2:	5a9b      	ldrh	r3, [r3, r2]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	330c      	adds	r3, #12
 80078c0:	001a      	movs	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2246      	movs	r2, #70	; 0x46
 80078da:	5a9b      	ldrh	r3, [r3, r2]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b299      	uxth	r1, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2246      	movs	r2, #70	; 0x46
 80078e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078e8:	2301      	movs	r3, #1
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078ec:	f7fd fae2 	bl	8004eb4 <HAL_GetTick>
 80078f0:	0002      	movs	r2, r0
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d802      	bhi.n	8007902 <HAL_SPI_TransmitReceive+0x342>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	3301      	adds	r3, #1
 8007900:	d102      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x348>
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d108      	bne.n	800791a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007908:	2323      	movs	r3, #35	; 0x23
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	2203      	movs	r2, #3
 800790e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	225d      	movs	r2, #93	; 0x5d
 8007914:	2101      	movs	r1, #1
 8007916:	5499      	strb	r1, [r3, r2]
        goto error;
 8007918:	e026      	b.n	8007968 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d199      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x298>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2246      	movs	r2, #70	; 0x46
 8007928:	5a9b      	ldrh	r3, [r3, r2]
 800792a:	b29b      	uxth	r3, r3
 800792c:	2b00      	cmp	r3, #0
 800792e:	d193      	bne.n	8007858 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	0018      	movs	r0, r3
 8007938:	f000 f9b2 	bl	8007ca0 <SPI_EndRxTxTransaction>
 800793c:	1e03      	subs	r3, r0, #0
 800793e:	d006      	beq.n	800794e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8007940:	2323      	movs	r3, #35	; 0x23
 8007942:	18fb      	adds	r3, r7, r3
 8007944:	2201      	movs	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007952:	2b00      	cmp	r3, #0
 8007954:	d004      	beq.n	8007960 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8007956:	2323      	movs	r3, #35	; 0x23
 8007958:	18fb      	adds	r3, r7, r3
 800795a:	2201      	movs	r2, #1
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e003      	b.n	8007968 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	225d      	movs	r2, #93	; 0x5d
 8007964:	2101      	movs	r1, #1
 8007966:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	225c      	movs	r2, #92	; 0x5c
 800796c:	2100      	movs	r1, #0
 800796e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007970:	2323      	movs	r3, #35	; 0x23
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	781b      	ldrb	r3, [r3, #0]
}
 8007976:	0018      	movs	r0, r3
 8007978:	46bd      	mov	sp, r7
 800797a:	b00a      	add	sp, #40	; 0x28
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	ffffefff 	.word	0xffffefff

08007984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	1dfb      	adds	r3, r7, #7
 8007992:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007994:	f7fd fa8e 	bl	8004eb4 <HAL_GetTick>
 8007998:	0002      	movs	r2, r0
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	18d3      	adds	r3, r2, r3
 80079a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079a4:	f7fd fa86 	bl	8004eb4 <HAL_GetTick>
 80079a8:	0003      	movs	r3, r0
 80079aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079ac:	4b3a      	ldr	r3, [pc, #232]	; (8007a98 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	015b      	lsls	r3, r3, #5
 80079b2:	0d1b      	lsrs	r3, r3, #20
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	4353      	muls	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ba:	e058      	b.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	3301      	adds	r3, #1
 80079c0:	d055      	beq.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079c2:	f7fd fa77 	bl	8004eb4 <HAL_GetTick>
 80079c6:	0002      	movs	r2, r0
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d902      	bls.n	80079d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d142      	bne.n	8007a5e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	21e0      	movs	r1, #224	; 0xe0
 80079e4:	438a      	bics	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	2382      	movs	r3, #130	; 0x82
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d113      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x98>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	2380      	movs	r3, #128	; 0x80
 80079fa:	021b      	lsls	r3, r3, #8
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d005      	beq.n	8007a0c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	2380      	movs	r3, #128	; 0x80
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d107      	bne.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2140      	movs	r1, #64	; 0x40
 8007a18:	438a      	bics	r2, r1
 8007a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	019b      	lsls	r3, r3, #6
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d110      	bne.n	8007a4a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	491a      	ldr	r1, [pc, #104]	; (8007a9c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007a34:	400a      	ands	r2, r1
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2180      	movs	r1, #128	; 0x80
 8007a44:	0189      	lsls	r1, r1, #6
 8007a46:	430a      	orrs	r2, r1
 8007a48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	225d      	movs	r2, #93	; 0x5d
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	225c      	movs	r2, #92	; 0x5c
 8007a56:	2100      	movs	r1, #0
 8007a58:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e017      	b.n	8007a8e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	4013      	ands	r3, r2
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	425a      	negs	r2, r3
 8007a7e:	4153      	adcs	r3, r2
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	001a      	movs	r2, r3
 8007a84:	1dfb      	adds	r3, r7, #7
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d197      	bne.n	80079bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	0018      	movs	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b008      	add	sp, #32
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	20000000 	.word	0x20000000
 8007a9c:	ffffdfff 	.word	0xffffdfff

08007aa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08a      	sub	sp, #40	; 0x28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007aae:	2317      	movs	r3, #23
 8007ab0:	18fb      	adds	r3, r7, r3
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ab6:	f7fd f9fd 	bl	8004eb4 <HAL_GetTick>
 8007aba:	0002      	movs	r2, r0
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	1a9b      	subs	r3, r3, r2
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	18d3      	adds	r3, r2, r3
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007ac6:	f7fd f9f5 	bl	8004eb4 <HAL_GetTick>
 8007aca:	0003      	movs	r3, r0
 8007acc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ad6:	4b41      	ldr	r3, [pc, #260]	; (8007bdc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	0013      	movs	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	189b      	adds	r3, r3, r2
 8007ae0:	00da      	lsls	r2, r3, #3
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	0d1b      	lsrs	r3, r3, #20
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae8:	4353      	muls	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007aec:	e068      	b.n	8007bc0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	23c0      	movs	r3, #192	; 0xc0
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d10a      	bne.n	8007b0e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d107      	bne.n	8007b0e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	2117      	movs	r1, #23
 8007b06:	187b      	adds	r3, r7, r1
 8007b08:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b0a:	187b      	adds	r3, r7, r1
 8007b0c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	3301      	adds	r3, #1
 8007b12:	d055      	beq.n	8007bc0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b14:	f7fd f9ce 	bl	8004eb4 <HAL_GetTick>
 8007b18:	0002      	movs	r2, r0
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d902      	bls.n	8007b2a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d142      	bne.n	8007bb0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	21e0      	movs	r1, #224	; 0xe0
 8007b36:	438a      	bics	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685a      	ldr	r2, [r3, #4]
 8007b3e:	2382      	movs	r3, #130	; 0x82
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d113      	bne.n	8007b6e <SPI_WaitFifoStateUntilTimeout+0xce>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689a      	ldr	r2, [r3, #8]
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d005      	beq.n	8007b5e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d107      	bne.n	8007b6e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2140      	movs	r1, #64	; 0x40
 8007b6a:	438a      	bics	r2, r1
 8007b6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b72:	2380      	movs	r3, #128	; 0x80
 8007b74:	019b      	lsls	r3, r3, #6
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d110      	bne.n	8007b9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4916      	ldr	r1, [pc, #88]	; (8007be0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007b86:	400a      	ands	r2, r1
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	0189      	lsls	r1, r1, #6
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	225d      	movs	r2, #93	; 0x5d
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	225c      	movs	r2, #92	; 0x5c
 8007ba8:	2100      	movs	r1, #0
 8007baa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e010      	b.n	8007bd2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d18e      	bne.n	8007aee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b00a      	add	sp, #40	; 0x28
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	20000000 	.word	0x20000000
 8007be0:	ffffdfff 	.word	0xffffdfff

08007be4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af02      	add	r7, sp, #8
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	2382      	movs	r3, #130	; 0x82
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d113      	bne.n	8007c24 <SPI_EndRxTransaction+0x40>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	2380      	movs	r3, #128	; 0x80
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d005      	beq.n	8007c14 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689a      	ldr	r2, [r3, #8]
 8007c0c:	2380      	movs	r3, #128	; 0x80
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d107      	bne.n	8007c24 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2140      	movs	r1, #64	; 0x40
 8007c20:	438a      	bics	r2, r1
 8007c22:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	0013      	movs	r3, r2
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2180      	movs	r1, #128	; 0x80
 8007c32:	f7ff fea7 	bl	8007984 <SPI_WaitFlagStateUntilTimeout>
 8007c36:	1e03      	subs	r3, r0, #0
 8007c38:	d007      	beq.n	8007c4a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3e:	2220      	movs	r2, #32
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e026      	b.n	8007c98 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	2382      	movs	r3, #130	; 0x82
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d11f      	bne.n	8007c96 <SPI_EndRxTransaction+0xb2>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	2380      	movs	r3, #128	; 0x80
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d005      	beq.n	8007c6e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	2380      	movs	r3, #128	; 0x80
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d113      	bne.n	8007c96 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	23c0      	movs	r3, #192	; 0xc0
 8007c72:	00d9      	lsls	r1, r3, #3
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	0013      	movs	r3, r2
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f7ff ff0f 	bl	8007aa0 <SPI_WaitFifoStateUntilTimeout>
 8007c82:	1e03      	subs	r3, r0, #0
 8007c84:	d007      	beq.n	8007c96 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e000      	b.n	8007c98 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	0018      	movs	r0, r3
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b004      	add	sp, #16
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	23c0      	movs	r3, #192	; 0xc0
 8007cb0:	0159      	lsls	r1, r3, #5
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	0013      	movs	r3, r2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f7ff fef0 	bl	8007aa0 <SPI_WaitFifoStateUntilTimeout>
 8007cc0:	1e03      	subs	r3, r0, #0
 8007cc2:	d007      	beq.n	8007cd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc8:	2220      	movs	r2, #32
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e027      	b.n	8007d24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	0013      	movs	r3, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2180      	movs	r1, #128	; 0x80
 8007ce2:	f7ff fe4f 	bl	8007984 <SPI_WaitFlagStateUntilTimeout>
 8007ce6:	1e03      	subs	r3, r0, #0
 8007ce8:	d007      	beq.n	8007cfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cee:	2220      	movs	r2, #32
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e014      	b.n	8007d24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	23c0      	movs	r3, #192	; 0xc0
 8007cfe:	00d9      	lsls	r1, r3, #3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	0013      	movs	r3, r2
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f7ff fec9 	bl	8007aa0 <SPI_WaitFifoStateUntilTimeout>
 8007d0e:	1e03      	subs	r3, r0, #0
 8007d10:	d007      	beq.n	8007d22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d16:	2220      	movs	r2, #32
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e000      	b.n	8007d24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	0018      	movs	r0, r3
 8007d26:	46bd      	mov	sp, r7
 8007d28:	b004      	add	sp, #16
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e042      	b.n	8007dc4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	223d      	movs	r2, #61	; 0x3d
 8007d42:	5c9b      	ldrb	r3, [r3, r2]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d107      	bne.n	8007d5a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	223c      	movs	r2, #60	; 0x3c
 8007d4e:	2100      	movs	r1, #0
 8007d50:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	0018      	movs	r0, r3
 8007d56:	f7fc fd99 	bl	800488c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	223d      	movs	r2, #61	; 0x3d
 8007d5e:	2102      	movs	r1, #2
 8007d60:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	0019      	movs	r1, r3
 8007d6c:	0010      	movs	r0, r2
 8007d6e:	f000 fb0f 	bl	8008390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2246      	movs	r2, #70	; 0x46
 8007d76:	2101      	movs	r1, #1
 8007d78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	223e      	movs	r2, #62	; 0x3e
 8007d7e:	2101      	movs	r1, #1
 8007d80:	5499      	strb	r1, [r3, r2]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	223f      	movs	r2, #63	; 0x3f
 8007d86:	2101      	movs	r1, #1
 8007d88:	5499      	strb	r1, [r3, r2]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2240      	movs	r2, #64	; 0x40
 8007d8e:	2101      	movs	r1, #1
 8007d90:	5499      	strb	r1, [r3, r2]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2241      	movs	r2, #65	; 0x41
 8007d96:	2101      	movs	r1, #1
 8007d98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2242      	movs	r2, #66	; 0x42
 8007d9e:	2101      	movs	r1, #1
 8007da0:	5499      	strb	r1, [r3, r2]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2243      	movs	r2, #67	; 0x43
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2244      	movs	r2, #68	; 0x44
 8007dae:	2101      	movs	r1, #1
 8007db0:	5499      	strb	r1, [r3, r2]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2245      	movs	r2, #69	; 0x45
 8007db6:	2101      	movs	r1, #1
 8007db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	223d      	movs	r2, #61	; 0x3d
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b002      	add	sp, #8
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd6:	230f      	movs	r3, #15
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <HAL_TIM_IC_Start_IT+0x22>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	223e      	movs	r2, #62	; 0x3e
 8007de8:	5c9b      	ldrb	r3, [r3, r2]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	e013      	b.n	8007e16 <HAL_TIM_IC_Start_IT+0x4a>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d104      	bne.n	8007dfe <HAL_TIM_IC_Start_IT+0x32>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	223f      	movs	r2, #63	; 0x3f
 8007df8:	5c9b      	ldrb	r3, [r3, r2]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e00b      	b.n	8007e16 <HAL_TIM_IC_Start_IT+0x4a>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b08      	cmp	r3, #8
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_IC_Start_IT+0x42>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2240      	movs	r2, #64	; 0x40
 8007e08:	5c9b      	ldrb	r3, [r3, r2]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e003      	b.n	8007e16 <HAL_TIM_IC_Start_IT+0x4a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2241      	movs	r2, #65	; 0x41
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	220e      	movs	r2, #14
 8007e18:	18ba      	adds	r2, r7, r2
 8007e1a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <HAL_TIM_IC_Start_IT+0x60>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2242      	movs	r2, #66	; 0x42
 8007e26:	5c9b      	ldrb	r3, [r3, r2]
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	e013      	b.n	8007e54 <HAL_TIM_IC_Start_IT+0x88>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	d104      	bne.n	8007e3c <HAL_TIM_IC_Start_IT+0x70>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2243      	movs	r2, #67	; 0x43
 8007e36:	5c9b      	ldrb	r3, [r3, r2]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	e00b      	b.n	8007e54 <HAL_TIM_IC_Start_IT+0x88>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	d104      	bne.n	8007e4c <HAL_TIM_IC_Start_IT+0x80>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2244      	movs	r2, #68	; 0x44
 8007e46:	5c9b      	ldrb	r3, [r3, r2]
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	e003      	b.n	8007e54 <HAL_TIM_IC_Start_IT+0x88>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2245      	movs	r2, #69	; 0x45
 8007e50:	5c9b      	ldrb	r3, [r3, r2]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	210d      	movs	r1, #13
 8007e56:	187a      	adds	r2, r7, r1
 8007e58:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e5a:	230e      	movs	r3, #14
 8007e5c:	18fb      	adds	r3, r7, r3
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d103      	bne.n	8007e6c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d001      	beq.n	8007e70 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0ab      	b.n	8007fc8 <HAL_TIM_IC_Start_IT+0x1fc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <HAL_TIM_IC_Start_IT+0xb4>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	223e      	movs	r2, #62	; 0x3e
 8007e7a:	2102      	movs	r1, #2
 8007e7c:	5499      	strb	r1, [r3, r2]
 8007e7e:	e013      	b.n	8007ea8 <HAL_TIM_IC_Start_IT+0xdc>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d104      	bne.n	8007e90 <HAL_TIM_IC_Start_IT+0xc4>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	223f      	movs	r2, #63	; 0x3f
 8007e8a:	2102      	movs	r1, #2
 8007e8c:	5499      	strb	r1, [r3, r2]
 8007e8e:	e00b      	b.n	8007ea8 <HAL_TIM_IC_Start_IT+0xdc>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d104      	bne.n	8007ea0 <HAL_TIM_IC_Start_IT+0xd4>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2240      	movs	r2, #64	; 0x40
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	5499      	strb	r1, [r3, r2]
 8007e9e:	e003      	b.n	8007ea8 <HAL_TIM_IC_Start_IT+0xdc>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2241      	movs	r2, #65	; 0x41
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d104      	bne.n	8007eb8 <HAL_TIM_IC_Start_IT+0xec>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2242      	movs	r2, #66	; 0x42
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	5499      	strb	r1, [r3, r2]
 8007eb6:	e013      	b.n	8007ee0 <HAL_TIM_IC_Start_IT+0x114>
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d104      	bne.n	8007ec8 <HAL_TIM_IC_Start_IT+0xfc>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2243      	movs	r2, #67	; 0x43
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	5499      	strb	r1, [r3, r2]
 8007ec6:	e00b      	b.n	8007ee0 <HAL_TIM_IC_Start_IT+0x114>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d104      	bne.n	8007ed8 <HAL_TIM_IC_Start_IT+0x10c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2244      	movs	r2, #68	; 0x44
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	5499      	strb	r1, [r3, r2]
 8007ed6:	e003      	b.n	8007ee0 <HAL_TIM_IC_Start_IT+0x114>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2245      	movs	r2, #69	; 0x45
 8007edc:	2102      	movs	r1, #2
 8007ede:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b0c      	cmp	r3, #12
 8007ee4:	d02a      	beq.n	8007f3c <HAL_TIM_IC_Start_IT+0x170>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b0c      	cmp	r3, #12
 8007eea:	d830      	bhi.n	8007f4e <HAL_TIM_IC_Start_IT+0x182>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b08      	cmp	r3, #8
 8007ef0:	d01b      	beq.n	8007f2a <HAL_TIM_IC_Start_IT+0x15e>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d82a      	bhi.n	8007f4e <HAL_TIM_IC_Start_IT+0x182>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_TIM_IC_Start_IT+0x13a>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b04      	cmp	r3, #4
 8007f02:	d009      	beq.n	8007f18 <HAL_TIM_IC_Start_IT+0x14c>
 8007f04:	e023      	b.n	8007f4e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2102      	movs	r1, #2
 8007f12:	430a      	orrs	r2, r1
 8007f14:	60da      	str	r2, [r3, #12]
      break;
 8007f16:	e01f      	b.n	8007f58 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2104      	movs	r1, #4
 8007f24:	430a      	orrs	r2, r1
 8007f26:	60da      	str	r2, [r3, #12]
      break;
 8007f28:	e016      	b.n	8007f58 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2108      	movs	r1, #8
 8007f36:	430a      	orrs	r2, r1
 8007f38:	60da      	str	r2, [r3, #12]
      break;
 8007f3a:	e00d      	b.n	8007f58 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2110      	movs	r1, #16
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	60da      	str	r2, [r3, #12]
      break;
 8007f4c:	e004      	b.n	8007f58 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8007f4e:	230f      	movs	r3, #15
 8007f50:	18fb      	adds	r3, r7, r3
 8007f52:	2201      	movs	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
      break;
 8007f56:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8007f58:	230f      	movs	r3, #15
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d12f      	bne.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f000 fba6 	bl	80086bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a16      	ldr	r2, [pc, #88]	; (8007fd0 <HAL_TIM_IC_Start_IT+0x204>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d009      	beq.n	8007f8e <HAL_TIM_IC_Start_IT+0x1c2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <HAL_TIM_IC_Start_IT+0x208>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d004      	beq.n	8007f8e <HAL_TIM_IC_Start_IT+0x1c2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <HAL_TIM_IC_Start_IT+0x20c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d111      	bne.n	8007fb2 <HAL_TIM_IC_Start_IT+0x1e6>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2207      	movs	r2, #7
 8007f96:	4013      	ands	r3, r2
 8007f98:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	2b06      	cmp	r3, #6
 8007f9e:	d010      	beq.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
      {
        __HAL_TIM_ENABLE(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2101      	movs	r1, #1
 8007fac:	430a      	orrs	r2, r1
 8007fae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	e007      	b.n	8007fc2 <HAL_TIM_IC_Start_IT+0x1f6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007fc2:	230f      	movs	r3, #15
 8007fc4:	18fb      	adds	r3, r7, r3
 8007fc6:	781b      	ldrb	r3, [r3, #0]
}
 8007fc8:	0018      	movs	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b004      	add	sp, #16
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40014000 	.word	0x40014000

08007fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2202      	movs	r2, #2
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d124      	bne.n	800803c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d11d      	bne.n	800803c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2203      	movs	r2, #3
 8008006:	4252      	negs	r2, r2
 8008008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	2203      	movs	r2, #3
 8008018:	4013      	ands	r3, r2
 800801a:	d004      	beq.n	8008026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	0018      	movs	r0, r3
 8008020:	f7fc fae6 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 8008024:	e007      	b.n	8008036 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	0018      	movs	r0, r3
 800802a:	f000 f999 	bl	8008360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	0018      	movs	r0, r3
 8008032:	f000 f99d 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	2204      	movs	r2, #4
 8008044:	4013      	ands	r3, r2
 8008046:	2b04      	cmp	r3, #4
 8008048:	d125      	bne.n	8008096 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2204      	movs	r2, #4
 8008052:	4013      	ands	r3, r2
 8008054:	2b04      	cmp	r3, #4
 8008056:	d11e      	bne.n	8008096 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2205      	movs	r2, #5
 800805e:	4252      	negs	r2, r2
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	23c0      	movs	r3, #192	; 0xc0
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4013      	ands	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	0018      	movs	r0, r3
 800807a:	f7fc fab9 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 800807e:	e007      	b.n	8008090 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	0018      	movs	r0, r3
 8008084:	f000 f96c 	bl	8008360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	0018      	movs	r0, r3
 800808c:	f000 f970 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	2208      	movs	r2, #8
 800809e:	4013      	ands	r3, r2
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d124      	bne.n	80080ee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	2208      	movs	r2, #8
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b08      	cmp	r3, #8
 80080b0:	d11d      	bne.n	80080ee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2209      	movs	r2, #9
 80080b8:	4252      	negs	r2, r2
 80080ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2204      	movs	r2, #4
 80080c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	2203      	movs	r2, #3
 80080ca:	4013      	ands	r3, r2
 80080cc:	d004      	beq.n	80080d8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7fc fa8d 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 80080d6:	e007      	b.n	80080e8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	0018      	movs	r0, r3
 80080dc:	f000 f940 	bl	8008360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	0018      	movs	r0, r3
 80080e4:	f000 f944 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2210      	movs	r2, #16
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	d125      	bne.n	8008148 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	2210      	movs	r2, #16
 8008104:	4013      	ands	r3, r2
 8008106:	2b10      	cmp	r3, #16
 8008108:	d11e      	bne.n	8008148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2211      	movs	r2, #17
 8008110:	4252      	negs	r2, r2
 8008112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2208      	movs	r2, #8
 8008118:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	23c0      	movs	r3, #192	; 0xc0
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4013      	ands	r3, r2
 8008126:	d004      	beq.n	8008132 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	0018      	movs	r0, r3
 800812c:	f7fc fa60 	bl	80045f0 <HAL_TIM_IC_CaptureCallback>
 8008130:	e007      	b.n	8008142 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0018      	movs	r0, r3
 8008136:	f000 f913 	bl	8008360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	0018      	movs	r0, r3
 800813e:	f000 f917 	bl	8008370 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2201      	movs	r2, #1
 8008150:	4013      	ands	r3, r2
 8008152:	2b01      	cmp	r3, #1
 8008154:	d10f      	bne.n	8008176 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	4013      	ands	r3, r2
 8008160:	2b01      	cmp	r3, #1
 8008162:	d108      	bne.n	8008176 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2202      	movs	r2, #2
 800816a:	4252      	negs	r2, r2
 800816c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	0018      	movs	r0, r3
 8008172:	f000 f8ed 	bl	8008350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	2280      	movs	r2, #128	; 0x80
 800817e:	4013      	ands	r3, r2
 8008180:	2b80      	cmp	r3, #128	; 0x80
 8008182:	d10f      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	2280      	movs	r2, #128	; 0x80
 800818c:	4013      	ands	r3, r2
 800818e:	2b80      	cmp	r3, #128	; 0x80
 8008190:	d108      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2281      	movs	r2, #129	; 0x81
 8008198:	4252      	negs	r2, r2
 800819a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 fb10 	bl	80087c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2240      	movs	r2, #64	; 0x40
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b40      	cmp	r3, #64	; 0x40
 80081b0:	d10f      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	2240      	movs	r2, #64	; 0x40
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b40      	cmp	r3, #64	; 0x40
 80081be:	d108      	bne.n	80081d2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2241      	movs	r2, #65	; 0x41
 80081c6:	4252      	negs	r2, r2
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	0018      	movs	r0, r3
 80081ce:	f000 f8d7 	bl	8008380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2220      	movs	r2, #32
 80081da:	4013      	ands	r3, r2
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d10f      	bne.n	8008200 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	2220      	movs	r2, #32
 80081e8:	4013      	ands	r3, r2
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d108      	bne.n	8008200 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2221      	movs	r2, #33	; 0x21
 80081f4:	4252      	negs	r2, r2
 80081f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	0018      	movs	r0, r3
 80081fc:	f000 fada 	bl	80087b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008200:	46c0      	nop			; (mov r8, r8)
 8008202:	46bd      	mov	sp, r7
 8008204:	b002      	add	sp, #8
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008214:	2317      	movs	r3, #23
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	2200      	movs	r2, #0
 800821a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	223c      	movs	r2, #60	; 0x3c
 8008220:	5c9b      	ldrb	r3, [r3, r2]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_TIM_IC_ConfigChannel+0x22>
 8008226:	2302      	movs	r3, #2
 8008228:	e08c      	b.n	8008344 <HAL_TIM_IC_ConfigChannel+0x13c>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	223c      	movs	r2, #60	; 0x3c
 800822e:	2101      	movs	r1, #1
 8008230:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d11b      	bne.n	8008270 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008248:	f000 f918 	bl	800847c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	210c      	movs	r1, #12
 8008258:	438a      	bics	r2, r1
 800825a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6999      	ldr	r1, [r3, #24]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	619a      	str	r2, [r3, #24]
 800826e:	e062      	b.n	8008336 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b04      	cmp	r3, #4
 8008274:	d11c      	bne.n	80082b0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008286:	f000 f951 	bl	800852c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	699a      	ldr	r2, [r3, #24]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	492d      	ldr	r1, [pc, #180]	; (800834c <HAL_TIM_IC_ConfigChannel+0x144>)
 8008296:	400a      	ands	r2, r1
 8008298:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6999      	ldr	r1, [r3, #24]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	021a      	lsls	r2, r3, #8
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	619a      	str	r2, [r3, #24]
 80082ae:	e042      	b.n	8008336 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b08      	cmp	r3, #8
 80082b4:	d11b      	bne.n	80082ee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80082c6:	f000 f973 	bl	80085b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69da      	ldr	r2, [r3, #28]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	210c      	movs	r1, #12
 80082d6:	438a      	bics	r2, r1
 80082d8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69d9      	ldr	r1, [r3, #28]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	61da      	str	r2, [r3, #28]
 80082ec:	e023      	b.n	8008336 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b0c      	cmp	r3, #12
 80082f2:	d11c      	bne.n	800832e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008304:	f000 f994 	bl	8008630 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	69da      	ldr	r2, [r3, #28]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	490e      	ldr	r1, [pc, #56]	; (800834c <HAL_TIM_IC_ConfigChannel+0x144>)
 8008314:	400a      	ands	r2, r1
 8008316:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	69d9      	ldr	r1, [r3, #28]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	021a      	lsls	r2, r3, #8
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	61da      	str	r2, [r3, #28]
 800832c:	e003      	b.n	8008336 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800832e:	2317      	movs	r3, #23
 8008330:	18fb      	adds	r3, r7, r3
 8008332:	2201      	movs	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	223c      	movs	r2, #60	; 0x3c
 800833a:	2100      	movs	r1, #0
 800833c:	5499      	strb	r1, [r3, r2]

  return status;
 800833e:	2317      	movs	r3, #23
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	781b      	ldrb	r3, [r3, #0]
}
 8008344:	0018      	movs	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	b006      	add	sp, #24
 800834a:	bd80      	pop	{r7, pc}
 800834c:	fffff3ff 	.word	0xfffff3ff

08008350 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008358:	46c0      	nop			; (mov r8, r8)
 800835a:	46bd      	mov	sp, r7
 800835c:	b002      	add	sp, #8
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	b002      	add	sp, #8
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008378:	46c0      	nop			; (mov r8, r8)
 800837a:	46bd      	mov	sp, r7
 800837c:	b002      	add	sp, #8
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008388:	46c0      	nop			; (mov r8, r8)
 800838a:	46bd      	mov	sp, r7
 800838c:	b002      	add	sp, #8
 800838e:	bd80      	pop	{r7, pc}

08008390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a2f      	ldr	r2, [pc, #188]	; (8008460 <TIM_Base_SetConfig+0xd0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_Base_SetConfig+0x20>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a2e      	ldr	r2, [pc, #184]	; (8008464 <TIM_Base_SetConfig+0xd4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d108      	bne.n	80083c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2270      	movs	r2, #112	; 0x70
 80083b4:	4393      	bics	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a26      	ldr	r2, [pc, #152]	; (8008460 <TIM_Base_SetConfig+0xd0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <TIM_Base_SetConfig+0x62>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a25      	ldr	r2, [pc, #148]	; (8008464 <TIM_Base_SetConfig+0xd4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d00f      	beq.n	80083f2 <TIM_Base_SetConfig+0x62>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a24      	ldr	r2, [pc, #144]	; (8008468 <TIM_Base_SetConfig+0xd8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00b      	beq.n	80083f2 <TIM_Base_SetConfig+0x62>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a23      	ldr	r2, [pc, #140]	; (800846c <TIM_Base_SetConfig+0xdc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d007      	beq.n	80083f2 <TIM_Base_SetConfig+0x62>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a22      	ldr	r2, [pc, #136]	; (8008470 <TIM_Base_SetConfig+0xe0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_Base_SetConfig+0x62>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a21      	ldr	r2, [pc, #132]	; (8008474 <TIM_Base_SetConfig+0xe4>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d108      	bne.n	8008404 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a20      	ldr	r2, [pc, #128]	; (8008478 <TIM_Base_SetConfig+0xe8>)
 80083f6:	4013      	ands	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4313      	orrs	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2280      	movs	r2, #128	; 0x80
 8008408:	4393      	bics	r3, r2
 800840a:	001a      	movs	r2, r3
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a0c      	ldr	r2, [pc, #48]	; (8008460 <TIM_Base_SetConfig+0xd0>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00b      	beq.n	800844a <TIM_Base_SetConfig+0xba>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a0d      	ldr	r2, [pc, #52]	; (800846c <TIM_Base_SetConfig+0xdc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d007      	beq.n	800844a <TIM_Base_SetConfig+0xba>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <TIM_Base_SetConfig+0xe0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d003      	beq.n	800844a <TIM_Base_SetConfig+0xba>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a0b      	ldr	r2, [pc, #44]	; (8008474 <TIM_Base_SetConfig+0xe4>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d103      	bne.n	8008452 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2201      	movs	r2, #1
 8008456:	615a      	str	r2, [r3, #20]
}
 8008458:	46c0      	nop			; (mov r8, r8)
 800845a:	46bd      	mov	sp, r7
 800845c:	b004      	add	sp, #16
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40012c00 	.word	0x40012c00
 8008464:	40000400 	.word	0x40000400
 8008468:	40002000 	.word	0x40002000
 800846c:	40014000 	.word	0x40014000
 8008470:	40014400 	.word	0x40014400
 8008474:	40014800 	.word	0x40014800
 8008478:	fffffcff 	.word	0xfffffcff

0800847c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	2201      	movs	r2, #1
 8008490:	4393      	bics	r3, r2
 8008492:	001a      	movs	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4a1e      	ldr	r2, [pc, #120]	; (8008520 <TIM_TI1_SetConfig+0xa4>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d007      	beq.n	80084bc <TIM_TI1_SetConfig+0x40>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <TIM_TI1_SetConfig+0xa8>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_TI1_SetConfig+0x40>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	4a1c      	ldr	r2, [pc, #112]	; (8008528 <TIM_TI1_SetConfig+0xac>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d101      	bne.n	80084c0 <TIM_TI1_SetConfig+0x44>
 80084bc:	2301      	movs	r3, #1
 80084be:	e000      	b.n	80084c2 <TIM_TI1_SetConfig+0x46>
 80084c0:	2300      	movs	r3, #0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d008      	beq.n	80084d8 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2203      	movs	r2, #3
 80084ca:	4393      	bics	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e003      	b.n	80084e0 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2201      	movs	r2, #1
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	22f0      	movs	r2, #240	; 0xf0
 80084e4:	4393      	bics	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	011b      	lsls	r3, r3, #4
 80084ec:	22ff      	movs	r2, #255	; 0xff
 80084ee:	4013      	ands	r3, r2
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	220a      	movs	r2, #10
 80084fa:	4393      	bics	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	220a      	movs	r2, #10
 8008502:	4013      	ands	r3, r2
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	46bd      	mov	sp, r7
 800851a:	b006      	add	sp, #24
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	40012c00 	.word	0x40012c00
 8008524:	40000400 	.word	0x40000400
 8008528:	40014000 	.word	0x40014000

0800852c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	2210      	movs	r2, #16
 8008540:	4393      	bics	r3, r2
 8008542:	001a      	movs	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <TIM_TI2_SetConfig+0x7c>)
 8008558:	4013      	ands	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	4313      	orrs	r3, r2
 8008564:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	4a10      	ldr	r2, [pc, #64]	; (80085ac <TIM_TI2_SetConfig+0x80>)
 800856a:	4013      	ands	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	041b      	lsls	r3, r3, #16
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	22a0      	movs	r2, #160	; 0xa0
 8008580:	4393      	bics	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	22a0      	movs	r2, #160	; 0xa0
 800858a:	4013      	ands	r3, r2
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	46bd      	mov	sp, r7
 80085a2:	b006      	add	sp, #24
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	46c0      	nop			; (mov r8, r8)
 80085a8:	fffffcff 	.word	0xfffffcff
 80085ac:	ffff0fff 	.word	0xffff0fff

080085b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
 80085bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	4a19      	ldr	r2, [pc, #100]	; (8008628 <TIM_TI3_SetConfig+0x78>)
 80085c4:	401a      	ands	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2203      	movs	r2, #3
 80085da:	4393      	bics	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	22f0      	movs	r2, #240	; 0xf0
 80085ea:	4393      	bics	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	22ff      	movs	r2, #255	; 0xff
 80085f4:	4013      	ands	r3, r2
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	4a0b      	ldr	r2, [pc, #44]	; (800862c <TIM_TI3_SetConfig+0x7c>)
 8008600:	4013      	ands	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	021a      	lsls	r2, r3, #8
 8008608:	23a0      	movs	r3, #160	; 0xa0
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	4013      	ands	r3, r2
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4313      	orrs	r3, r2
 8008612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	621a      	str	r2, [r3, #32]
}
 8008620:	46c0      	nop			; (mov r8, r8)
 8008622:	46bd      	mov	sp, r7
 8008624:	b006      	add	sp, #24
 8008626:	bd80      	pop	{r7, pc}
 8008628:	fffffeff 	.word	0xfffffeff
 800862c:	fffff5ff 	.word	0xfffff5ff

08008630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <TIM_TI4_SetConfig+0x7c>)
 8008644:	401a      	ands	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <TIM_TI4_SetConfig+0x80>)
 800865a:	4013      	ands	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	4a12      	ldr	r2, [pc, #72]	; (80086b4 <TIM_TI4_SetConfig+0x84>)
 800866c:	4013      	ands	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	031b      	lsls	r3, r3, #12
 8008674:	041b      	lsls	r3, r3, #16
 8008676:	0c1b      	lsrs	r3, r3, #16
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	4a0d      	ldr	r2, [pc, #52]	; (80086b8 <TIM_TI4_SetConfig+0x88>)
 8008682:	4013      	ands	r3, r2
 8008684:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	031a      	lsls	r2, r3, #12
 800868a:	23a0      	movs	r3, #160	; 0xa0
 800868c:	021b      	lsls	r3, r3, #8
 800868e:	4013      	ands	r3, r2
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4313      	orrs	r3, r2
 8008694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	46bd      	mov	sp, r7
 80086a6:	b006      	add	sp, #24
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	ffffefff 	.word	0xffffefff
 80086b0:	fffffcff 	.word	0xfffffcff
 80086b4:	ffff0fff 	.word	0xffff0fff
 80086b8:	ffff5fff 	.word	0xffff5fff

080086bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	221f      	movs	r2, #31
 80086cc:	4013      	ands	r3, r2
 80086ce:	2201      	movs	r2, #1
 80086d0:	409a      	lsls	r2, r3
 80086d2:	0013      	movs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	43d2      	mvns	r2, r2
 80086de:	401a      	ands	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a1a      	ldr	r2, [r3, #32]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	211f      	movs	r1, #31
 80086ec:	400b      	ands	r3, r1
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4099      	lsls	r1, r3
 80086f2:	000b      	movs	r3, r1
 80086f4:	431a      	orrs	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b006      	add	sp, #24
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	223c      	movs	r2, #60	; 0x3c
 8008712:	5c9b      	ldrb	r3, [r3, r2]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008718:	2302      	movs	r3, #2
 800871a:	e041      	b.n	80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	223c      	movs	r2, #60	; 0x3c
 8008720:	2101      	movs	r1, #1
 8008722:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	223d      	movs	r2, #61	; 0x3d
 8008728:	2102      	movs	r1, #2
 800872a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2270      	movs	r2, #112	; 0x70
 8008740:	4393      	bics	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a13      	ldr	r2, [pc, #76]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d009      	beq.n	8008774 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a11      	ldr	r2, [pc, #68]	; (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d004      	beq.n	8008774 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a10      	ldr	r2, [pc, #64]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d10c      	bne.n	800878e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2280      	movs	r2, #128	; 0x80
 8008778:	4393      	bics	r3, r2
 800877a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	4313      	orrs	r3, r2
 8008784:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	223d      	movs	r2, #61	; 0x3d
 8008792:	2101      	movs	r1, #1
 8008794:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	223c      	movs	r2, #60	; 0x3c
 800879a:	2100      	movs	r1, #0
 800879c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	0018      	movs	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	b004      	add	sp, #16
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	40000400 	.word	0x40000400
 80087b0:	40014000 	.word	0x40014000

080087b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087bc:	46c0      	nop			; (mov r8, r8)
 80087be:	46bd      	mov	sp, r7
 80087c0:	b002      	add	sp, #8
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087cc:	46c0      	nop			; (mov r8, r8)
 80087ce:	46bd      	mov	sp, r7
 80087d0:	b002      	add	sp, #8
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e044      	b.n	8008870 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2278      	movs	r2, #120	; 0x78
 80087f2:	2100      	movs	r1, #0
 80087f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7fc f89b 	bl	8004934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2224      	movs	r2, #36	; 0x24
 8008802:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2101      	movs	r1, #1
 8008810:	438a      	bics	r2, r1
 8008812:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	0018      	movs	r0, r3
 8008818:	f000 fc88 	bl	800912c <UART_SetConfig>
 800881c:	0003      	movs	r3, r0
 800881e:	2b01      	cmp	r3, #1
 8008820:	d101      	bne.n	8008826 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e024      	b.n	8008870 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	0018      	movs	r0, r3
 8008832:	f000 fdbb 	bl	80093ac <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	490d      	ldr	r1, [pc, #52]	; (8008878 <HAL_UART_Init+0xa4>)
 8008842:	400a      	ands	r2, r1
 8008844:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2108      	movs	r1, #8
 8008852:	438a      	bics	r2, r1
 8008854:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2101      	movs	r1, #1
 8008862:	430a      	orrs	r2, r1
 8008864:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	0018      	movs	r0, r3
 800886a:	f000 fe53 	bl	8009514 <UART_CheckIdleState>
 800886e:	0003      	movs	r3, r0
}
 8008870:	0018      	movs	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	b002      	add	sp, #8
 8008876:	bd80      	pop	{r7, pc}
 8008878:	fffff7ff 	.word	0xfffff7ff

0800887c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08a      	sub	sp, #40	; 0x28
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	1dbb      	adds	r3, r7, #6
 800888a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008890:	2b20      	cmp	r3, #32
 8008892:	d000      	beq.n	8008896 <HAL_UART_Transmit+0x1a>
 8008894:	e08d      	b.n	80089b2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d003      	beq.n	80088a4 <HAL_UART_Transmit+0x28>
 800889c:	1dbb      	adds	r3, r7, #6
 800889e:	881b      	ldrh	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e085      	b.n	80089b4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	015b      	lsls	r3, r3, #5
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d109      	bne.n	80088c8 <HAL_UART_Transmit+0x4c>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d105      	bne.n	80088c8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2201      	movs	r2, #1
 80088c0:	4013      	ands	r3, r2
 80088c2:	d001      	beq.n	80088c8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e075      	b.n	80089b4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2284      	movs	r2, #132	; 0x84
 80088cc:	2100      	movs	r1, #0
 80088ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2221      	movs	r2, #33	; 0x21
 80088d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088d6:	f7fc faed 	bl	8004eb4 <HAL_GetTick>
 80088da:	0003      	movs	r3, r0
 80088dc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	1dba      	adds	r2, r7, #6
 80088e2:	2150      	movs	r1, #80	; 0x50
 80088e4:	8812      	ldrh	r2, [r2, #0]
 80088e6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	1dba      	adds	r2, r7, #6
 80088ec:	2152      	movs	r1, #82	; 0x52
 80088ee:	8812      	ldrh	r2, [r2, #0]
 80088f0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	2380      	movs	r3, #128	; 0x80
 80088f8:	015b      	lsls	r3, r3, #5
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d108      	bne.n	8008910 <HAL_UART_Transmit+0x94>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008906:	2300      	movs	r3, #0
 8008908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	61bb      	str	r3, [r7, #24]
 800890e:	e003      	b.n	8008918 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008918:	e030      	b.n	800897c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	0013      	movs	r3, r2
 8008924:	2200      	movs	r2, #0
 8008926:	2180      	movs	r1, #128	; 0x80
 8008928:	f000 fe9c 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 800892c:	1e03      	subs	r3, r0, #0
 800892e:	d004      	beq.n	800893a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e03c      	b.n	80089b4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	881a      	ldrh	r2, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	05d2      	lsls	r2, r2, #23
 800894a:	0dd2      	lsrs	r2, r2, #23
 800894c:	b292      	uxth	r2, r2
 800894e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	3302      	adds	r3, #2
 8008954:	61bb      	str	r3, [r7, #24]
 8008956:	e008      	b.n	800896a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	b292      	uxth	r2, r2
 8008962:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	3301      	adds	r3, #1
 8008968:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2252      	movs	r2, #82	; 0x52
 800896e:	5a9b      	ldrh	r3, [r3, r2]
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b299      	uxth	r1, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2252      	movs	r2, #82	; 0x52
 800897a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2252      	movs	r2, #82	; 0x52
 8008980:	5a9b      	ldrh	r3, [r3, r2]
 8008982:	b29b      	uxth	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1c8      	bne.n	800891a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	0013      	movs	r3, r2
 8008992:	2200      	movs	r2, #0
 8008994:	2140      	movs	r1, #64	; 0x40
 8008996:	f000 fe65 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 800899a:	1e03      	subs	r3, r0, #0
 800899c:	d004      	beq.n	80089a8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2220      	movs	r2, #32
 80089a2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e005      	b.n	80089b4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e000      	b.n	80089b4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	0018      	movs	r0, r3
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b008      	add	sp, #32
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	; 0x28
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	603b      	str	r3, [r7, #0]
 80089c8:	1dbb      	adds	r3, r7, #6
 80089ca:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2280      	movs	r2, #128	; 0x80
 80089d0:	589b      	ldr	r3, [r3, r2]
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d000      	beq.n	80089d8 <HAL_UART_Receive+0x1c>
 80089d6:	e0bd      	b.n	8008b54 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_UART_Receive+0x2a>
 80089de:	1dbb      	adds	r3, r7, #6
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e0b5      	b.n	8008b56 <HAL_UART_Receive+0x19a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	2380      	movs	r3, #128	; 0x80
 80089f0:	015b      	lsls	r3, r3, #5
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d109      	bne.n	8008a0a <HAL_UART_Receive+0x4e>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d105      	bne.n	8008a0a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2201      	movs	r2, #1
 8008a02:	4013      	ands	r3, r2
 8008a04:	d001      	beq.n	8008a0a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e0a5      	b.n	8008b56 <HAL_UART_Receive+0x19a>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2284      	movs	r2, #132	; 0x84
 8008a0e:	2100      	movs	r1, #0
 8008a10:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2280      	movs	r2, #128	; 0x80
 8008a16:	2122      	movs	r1, #34	; 0x22
 8008a18:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a20:	f7fc fa48 	bl	8004eb4 <HAL_GetTick>
 8008a24:	0003      	movs	r3, r0
 8008a26:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	1dba      	adds	r2, r7, #6
 8008a2c:	2158      	movs	r1, #88	; 0x58
 8008a2e:	8812      	ldrh	r2, [r2, #0]
 8008a30:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	1dba      	adds	r2, r7, #6
 8008a36:	215a      	movs	r1, #90	; 0x5a
 8008a38:	8812      	ldrh	r2, [r2, #0]
 8008a3a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	015b      	lsls	r3, r3, #5
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d10d      	bne.n	8008a64 <HAL_UART_Receive+0xa8>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d104      	bne.n	8008a5a <HAL_UART_Receive+0x9e>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	225c      	movs	r2, #92	; 0x5c
 8008a54:	4942      	ldr	r1, [pc, #264]	; (8008b60 <HAL_UART_Receive+0x1a4>)
 8008a56:	5299      	strh	r1, [r3, r2]
 8008a58:	e01a      	b.n	8008a90 <HAL_UART_Receive+0xd4>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	225c      	movs	r2, #92	; 0x5c
 8008a5e:	21ff      	movs	r1, #255	; 0xff
 8008a60:	5299      	strh	r1, [r3, r2]
 8008a62:	e015      	b.n	8008a90 <HAL_UART_Receive+0xd4>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d10d      	bne.n	8008a88 <HAL_UART_Receive+0xcc>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <HAL_UART_Receive+0xc2>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	225c      	movs	r2, #92	; 0x5c
 8008a78:	21ff      	movs	r1, #255	; 0xff
 8008a7a:	5299      	strh	r1, [r3, r2]
 8008a7c:	e008      	b.n	8008a90 <HAL_UART_Receive+0xd4>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	225c      	movs	r2, #92	; 0x5c
 8008a82:	217f      	movs	r1, #127	; 0x7f
 8008a84:	5299      	strh	r1, [r3, r2]
 8008a86:	e003      	b.n	8008a90 <HAL_UART_Receive+0xd4>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	225c      	movs	r2, #92	; 0x5c
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8008a90:	2312      	movs	r3, #18
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	215c      	movs	r1, #92	; 0x5c
 8008a98:	5a52      	ldrh	r2, [r2, r1]
 8008a9a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689a      	ldr	r2, [r3, #8]
 8008aa0:	2380      	movs	r3, #128	; 0x80
 8008aa2:	015b      	lsls	r3, r3, #5
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d108      	bne.n	8008aba <HAL_UART_Receive+0xfe>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <HAL_UART_Receive+0xfe>
    {
      pdata8bits  = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	61bb      	str	r3, [r7, #24]
 8008ab8:	e003      	b.n	8008ac2 <HAL_UART_Receive+0x106>
    }
    else
    {
      pdata8bits  = pData;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008ac2:	e03b      	b.n	8008b3c <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	0013      	movs	r3, r2
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2120      	movs	r1, #32
 8008ad2:	f000 fdc7 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 8008ad6:	1e03      	subs	r3, r0, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_UART_Receive+0x12a>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2280      	movs	r2, #128	; 0x80
 8008ade:	2120      	movs	r1, #32
 8008ae0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	e037      	b.n	8008b56 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10e      	bne.n	8008b0a <HAL_UART_Receive+0x14e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	2212      	movs	r2, #18
 8008af6:	18ba      	adds	r2, r7, r2
 8008af8:	8812      	ldrh	r2, [r2, #0]
 8008afa:	4013      	ands	r3, r2
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	3302      	adds	r3, #2
 8008b06:	61bb      	str	r3, [r7, #24]
 8008b08:	e00f      	b.n	8008b2a <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2212      	movs	r2, #18
 8008b16:	18ba      	adds	r2, r7, r2
 8008b18:	8812      	ldrh	r2, [r2, #0]
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	3301      	adds	r3, #1
 8008b28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	225a      	movs	r2, #90	; 0x5a
 8008b2e:	5a9b      	ldrh	r3, [r3, r2]
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	3b01      	subs	r3, #1
 8008b34:	b299      	uxth	r1, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	225a      	movs	r2, #90	; 0x5a
 8008b3a:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	225a      	movs	r2, #90	; 0x5a
 8008b40:	5a9b      	ldrh	r3, [r3, r2]
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1bd      	bne.n	8008ac4 <HAL_UART_Receive+0x108>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	2120      	movs	r1, #32
 8008b4e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	e000      	b.n	8008b56 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
  }
}
 8008b56:	0018      	movs	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	b008      	add	sp, #32
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	46c0      	nop			; (mov r8, r8)
 8008b60:	000001ff 	.word	0x000001ff

08008b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b64:	b590      	push	{r4, r7, lr}
 8008b66:	b0ab      	sub	sp, #172	; 0xac
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	22a4      	movs	r2, #164	; 0xa4
 8008b74:	18b9      	adds	r1, r7, r2
 8008b76:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	20a0      	movs	r0, #160	; 0xa0
 8008b80:	1839      	adds	r1, r7, r0
 8008b82:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	219c      	movs	r1, #156	; 0x9c
 8008b8c:	1879      	adds	r1, r7, r1
 8008b8e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b90:	0011      	movs	r1, r2
 8008b92:	18bb      	adds	r3, r7, r2
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a99      	ldr	r2, [pc, #612]	; (8008dfc <HAL_UART_IRQHandler+0x298>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	2298      	movs	r2, #152	; 0x98
 8008b9c:	18bc      	adds	r4, r7, r2
 8008b9e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008ba0:	18bb      	adds	r3, r7, r2
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d114      	bne.n	8008bd2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ba8:	187b      	adds	r3, r7, r1
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2220      	movs	r2, #32
 8008bae:	4013      	ands	r3, r2
 8008bb0:	d00f      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bb2:	183b      	adds	r3, r7, r0
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	4013      	ands	r3, r2
 8008bba:	d00a      	beq.n	8008bd2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d100      	bne.n	8008bc6 <HAL_UART_IRQHandler+0x62>
 8008bc4:	e286      	b.n	80090d4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	0010      	movs	r0, r2
 8008bce:	4798      	blx	r3
      }
      return;
 8008bd0:	e280      	b.n	80090d4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bd2:	2398      	movs	r3, #152	; 0x98
 8008bd4:	18fb      	adds	r3, r7, r3
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d100      	bne.n	8008bde <HAL_UART_IRQHandler+0x7a>
 8008bdc:	e114      	b.n	8008e08 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008bde:	239c      	movs	r3, #156	; 0x9c
 8008be0:	18fb      	adds	r3, r7, r3
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2201      	movs	r2, #1
 8008be6:	4013      	ands	r3, r2
 8008be8:	d106      	bne.n	8008bf8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008bea:	23a0      	movs	r3, #160	; 0xa0
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a83      	ldr	r2, [pc, #524]	; (8008e00 <HAL_UART_IRQHandler+0x29c>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	d100      	bne.n	8008bf8 <HAL_UART_IRQHandler+0x94>
 8008bf6:	e107      	b.n	8008e08 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008bf8:	23a4      	movs	r3, #164	; 0xa4
 8008bfa:	18fb      	adds	r3, r7, r3
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	4013      	ands	r3, r2
 8008c02:	d012      	beq.n	8008c2a <HAL_UART_IRQHandler+0xc6>
 8008c04:	23a0      	movs	r3, #160	; 0xa0
 8008c06:	18fb      	adds	r3, r7, r3
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	2380      	movs	r3, #128	; 0x80
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	4013      	ands	r3, r2
 8008c10:	d00b      	beq.n	8008c2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2201      	movs	r2, #1
 8008c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2284      	movs	r2, #132	; 0x84
 8008c1e:	589b      	ldr	r3, [r3, r2]
 8008c20:	2201      	movs	r2, #1
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2184      	movs	r1, #132	; 0x84
 8008c28:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c2a:	23a4      	movs	r3, #164	; 0xa4
 8008c2c:	18fb      	adds	r3, r7, r3
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2202      	movs	r2, #2
 8008c32:	4013      	ands	r3, r2
 8008c34:	d011      	beq.n	8008c5a <HAL_UART_IRQHandler+0xf6>
 8008c36:	239c      	movs	r3, #156	; 0x9c
 8008c38:	18fb      	adds	r3, r7, r3
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4013      	ands	r3, r2
 8008c40:	d00b      	beq.n	8008c5a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2202      	movs	r2, #2
 8008c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2284      	movs	r2, #132	; 0x84
 8008c4e:	589b      	ldr	r3, [r3, r2]
 8008c50:	2204      	movs	r2, #4
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2184      	movs	r1, #132	; 0x84
 8008c58:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c5a:	23a4      	movs	r3, #164	; 0xa4
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2204      	movs	r2, #4
 8008c62:	4013      	ands	r3, r2
 8008c64:	d011      	beq.n	8008c8a <HAL_UART_IRQHandler+0x126>
 8008c66:	239c      	movs	r3, #156	; 0x9c
 8008c68:	18fb      	adds	r3, r7, r3
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4013      	ands	r3, r2
 8008c70:	d00b      	beq.n	8008c8a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2204      	movs	r2, #4
 8008c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2284      	movs	r2, #132	; 0x84
 8008c7e:	589b      	ldr	r3, [r3, r2]
 8008c80:	2202      	movs	r2, #2
 8008c82:	431a      	orrs	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2184      	movs	r1, #132	; 0x84
 8008c88:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c8a:	23a4      	movs	r3, #164	; 0xa4
 8008c8c:	18fb      	adds	r3, r7, r3
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2208      	movs	r2, #8
 8008c92:	4013      	ands	r3, r2
 8008c94:	d017      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c96:	23a0      	movs	r3, #160	; 0xa0
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	d105      	bne.n	8008cae <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ca2:	239c      	movs	r3, #156	; 0x9c
 8008ca4:	18fb      	adds	r3, r7, r3
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cac:	d00b      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2284      	movs	r2, #132	; 0x84
 8008cba:	589b      	ldr	r3, [r3, r2]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2184      	movs	r1, #132	; 0x84
 8008cc4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cc6:	23a4      	movs	r3, #164	; 0xa4
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	2380      	movs	r3, #128	; 0x80
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	d013      	beq.n	8008cfc <HAL_UART_IRQHandler+0x198>
 8008cd4:	23a0      	movs	r3, #160	; 0xa0
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	04db      	lsls	r3, r3, #19
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d00c      	beq.n	8008cfc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2280      	movs	r2, #128	; 0x80
 8008ce8:	0112      	lsls	r2, r2, #4
 8008cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2284      	movs	r2, #132	; 0x84
 8008cf0:	589b      	ldr	r3, [r3, r2]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2184      	movs	r1, #132	; 0x84
 8008cfa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2284      	movs	r2, #132	; 0x84
 8008d00:	589b      	ldr	r3, [r3, r2]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d100      	bne.n	8008d08 <HAL_UART_IRQHandler+0x1a4>
 8008d06:	e1e7      	b.n	80090d8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d08:	23a4      	movs	r3, #164	; 0xa4
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2220      	movs	r2, #32
 8008d10:	4013      	ands	r3, r2
 8008d12:	d00e      	beq.n	8008d32 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d14:	23a0      	movs	r3, #160	; 0xa0
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2220      	movs	r2, #32
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d008      	beq.n	8008d32 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	0010      	movs	r0, r2
 8008d30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2284      	movs	r2, #132	; 0x84
 8008d36:	589b      	ldr	r3, [r3, r2]
 8008d38:	2194      	movs	r1, #148	; 0x94
 8008d3a:	187a      	adds	r2, r7, r1
 8008d3c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	2240      	movs	r2, #64	; 0x40
 8008d46:	4013      	ands	r3, r2
 8008d48:	2b40      	cmp	r3, #64	; 0x40
 8008d4a:	d004      	beq.n	8008d56 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d4c:	187b      	adds	r3, r7, r1
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2228      	movs	r2, #40	; 0x28
 8008d52:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d54:	d047      	beq.n	8008de6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 fced 	bl	8009738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	2240      	movs	r2, #64	; 0x40
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d137      	bne.n	8008ddc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008d70:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d74:	2090      	movs	r0, #144	; 0x90
 8008d76:	183a      	adds	r2, r7, r0
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d80:	f383 8810 	msr	PRIMASK, r3
}
 8008d84:	46c0      	nop			; (mov r8, r8)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2140      	movs	r1, #64	; 0x40
 8008d92:	438a      	bics	r2, r1
 8008d94:	609a      	str	r2, [r3, #8]
 8008d96:	183b      	adds	r3, r7, r0
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d9e:	f383 8810 	msr	PRIMASK, r3
}
 8008da2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d012      	beq.n	8008dd2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db0:	4a14      	ldr	r2, [pc, #80]	; (8008e04 <HAL_UART_IRQHandler+0x2a0>)
 8008db2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db8:	0018      	movs	r0, r3
 8008dba:	f7fc f9bf 	bl	800513c <HAL_DMA_Abort_IT>
 8008dbe:	1e03      	subs	r3, r0, #0
 8008dc0:	d01a      	beq.n	8008df8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dcc:	0018      	movs	r0, r3
 8008dce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd0:	e012      	b.n	8008df8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f000 f995 	bl	8009104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dda:	e00d      	b.n	8008df8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	0018      	movs	r0, r3
 8008de0:	f000 f990 	bl	8009104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	e008      	b.n	8008df8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	0018      	movs	r0, r3
 8008dea:	f000 f98b 	bl	8009104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2284      	movs	r2, #132	; 0x84
 8008df2:	2100      	movs	r1, #0
 8008df4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008df6:	e16f      	b.n	80090d8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008df8:	46c0      	nop			; (mov r8, r8)
    return;
 8008dfa:	e16d      	b.n	80090d8 <HAL_UART_IRQHandler+0x574>
 8008dfc:	0000080f 	.word	0x0000080f
 8008e00:	04000120 	.word	0x04000120
 8008e04:	08009801 	.word	0x08009801

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d000      	beq.n	8008e12 <HAL_UART_IRQHandler+0x2ae>
 8008e10:	e139      	b.n	8009086 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e12:	23a4      	movs	r3, #164	; 0xa4
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2210      	movs	r2, #16
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	d100      	bne.n	8008e20 <HAL_UART_IRQHandler+0x2bc>
 8008e1e:	e132      	b.n	8009086 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e20:	23a0      	movs	r3, #160	; 0xa0
 8008e22:	18fb      	adds	r3, r7, r3
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2210      	movs	r2, #16
 8008e28:	4013      	ands	r3, r2
 8008e2a:	d100      	bne.n	8008e2e <HAL_UART_IRQHandler+0x2ca>
 8008e2c:	e12b      	b.n	8009086 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2210      	movs	r2, #16
 8008e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	2240      	movs	r2, #64	; 0x40
 8008e3e:	4013      	ands	r3, r2
 8008e40:	2b40      	cmp	r3, #64	; 0x40
 8008e42:	d000      	beq.n	8008e46 <HAL_UART_IRQHandler+0x2e2>
 8008e44:	e09f      	b.n	8008f86 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	217e      	movs	r1, #126	; 0x7e
 8008e50:	187b      	adds	r3, r7, r1
 8008e52:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008e54:	187b      	adds	r3, r7, r1
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d100      	bne.n	8008e5e <HAL_UART_IRQHandler+0x2fa>
 8008e5c:	e13e      	b.n	80090dc <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2258      	movs	r2, #88	; 0x58
 8008e62:	5a9b      	ldrh	r3, [r3, r2]
 8008e64:	187a      	adds	r2, r7, r1
 8008e66:	8812      	ldrh	r2, [r2, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d300      	bcc.n	8008e6e <HAL_UART_IRQHandler+0x30a>
 8008e6c:	e136      	b.n	80090dc <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	187a      	adds	r2, r7, r1
 8008e72:	215a      	movs	r1, #90	; 0x5a
 8008e74:	8812      	ldrh	r2, [r2, #0]
 8008e76:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d06f      	beq.n	8008f62 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e82:	f3ef 8310 	mrs	r3, PRIMASK
 8008e86:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e92:	f383 8810 	msr	PRIMASK, r3
}
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4992      	ldr	r1, [pc, #584]	; (80090ec <HAL_UART_IRQHandler+0x588>)
 8008ea4:	400a      	ands	r2, r1
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eaa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	f383 8810 	msr	PRIMASK, r3
}
 8008eb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebc:	677b      	str	r3, [r7, #116]	; 0x74
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec4:	f383 8810 	msr	PRIMASK, r3
}
 8008ec8:	46c0      	nop			; (mov r8, r8)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	438a      	bics	r2, r1
 8008ed8:	609a      	str	r2, [r3, #8]
 8008eda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008edc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee0:	f383 8810 	msr	PRIMASK, r3
}
 8008ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8008eea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eee:	673b      	str	r3, [r7, #112]	; 0x70
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ef6:	f383 8810 	msr	PRIMASK, r3
}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2140      	movs	r1, #64	; 0x40
 8008f08:	438a      	bics	r2, r1
 8008f0a:	609a      	str	r2, [r3, #8]
 8008f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f0e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f12:	f383 8810 	msr	PRIMASK, r3
}
 8008f16:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2280      	movs	r2, #128	; 0x80
 8008f1c:	2120      	movs	r1, #32
 8008f1e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f26:	f3ef 8310 	mrs	r3, PRIMASK
 8008f2a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f30:	2301      	movs	r3, #1
 8008f32:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f36:	f383 8810 	msr	PRIMASK, r3
}
 8008f3a:	46c0      	nop			; (mov r8, r8)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2110      	movs	r1, #16
 8008f48:	438a      	bics	r2, r1
 8008f4a:	601a      	str	r2, [r3, #0]
 8008f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f52:	f383 8810 	msr	PRIMASK, r3
}
 8008f56:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5c:	0018      	movs	r0, r3
 8008f5e:	f7fc f8b5 	bl	80050cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2202      	movs	r2, #2
 8008f66:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2258      	movs	r2, #88	; 0x58
 8008f6c:	5a9a      	ldrh	r2, [r3, r2]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	215a      	movs	r1, #90	; 0x5a
 8008f72:	5a5b      	ldrh	r3, [r3, r1]
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	0011      	movs	r1, r2
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f000 f8c8 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f84:	e0aa      	b.n	80090dc <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2258      	movs	r2, #88	; 0x58
 8008f8a:	5a99      	ldrh	r1, [r3, r2]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	225a      	movs	r2, #90	; 0x5a
 8008f90:	5a9b      	ldrh	r3, [r3, r2]
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	208e      	movs	r0, #142	; 0x8e
 8008f96:	183b      	adds	r3, r7, r0
 8008f98:	1a8a      	subs	r2, r1, r2
 8008f9a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	225a      	movs	r2, #90	; 0x5a
 8008fa0:	5a9b      	ldrh	r3, [r3, r2]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d100      	bne.n	8008faa <HAL_UART_IRQHandler+0x446>
 8008fa8:	e09a      	b.n	80090e0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8008faa:	183b      	adds	r3, r7, r0
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d100      	bne.n	8008fb4 <HAL_UART_IRQHandler+0x450>
 8008fb2:	e095      	b.n	80090e0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fbc:	2488      	movs	r4, #136	; 0x88
 8008fbe:	193a      	adds	r2, r7, r4
 8008fc0:	6013      	str	r3, [r2, #0]
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f383 8810 	msr	PRIMASK, r3
}
 8008fcc:	46c0      	nop			; (mov r8, r8)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4945      	ldr	r1, [pc, #276]	; (80090f0 <HAL_UART_IRQHandler+0x58c>)
 8008fda:	400a      	ands	r2, r1
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	193b      	adds	r3, r7, r4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f383 8810 	msr	PRIMASK, r3
}
 8008fea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fec:	f3ef 8310 	mrs	r3, PRIMASK
 8008ff0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ff2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff4:	2484      	movs	r4, #132	; 0x84
 8008ff6:	193a      	adds	r2, r7, r4
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f383 8810 	msr	PRIMASK, r3
}
 8009004:	46c0      	nop			; (mov r8, r8)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2101      	movs	r1, #1
 8009012:	438a      	bics	r2, r1
 8009014:	609a      	str	r2, [r3, #8]
 8009016:	193b      	adds	r3, r7, r4
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901c:	6a3b      	ldr	r3, [r7, #32]
 800901e:	f383 8810 	msr	PRIMASK, r3
}
 8009022:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2280      	movs	r2, #128	; 0x80
 8009028:	2120      	movs	r1, #32
 800902a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009038:	f3ef 8310 	mrs	r3, PRIMASK
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009040:	2480      	movs	r4, #128	; 0x80
 8009042:	193a      	adds	r2, r7, r4
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	2301      	movs	r3, #1
 8009048:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	f383 8810 	msr	PRIMASK, r3
}
 8009050:	46c0      	nop			; (mov r8, r8)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2110      	movs	r1, #16
 800905e:	438a      	bics	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	193b      	adds	r3, r7, r4
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	f383 8810 	msr	PRIMASK, r3
}
 800906e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009076:	183b      	adds	r3, r7, r0
 8009078:	881a      	ldrh	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	0011      	movs	r1, r2
 800907e:	0018      	movs	r0, r3
 8009080:	f000 f848 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009084:	e02c      	b.n	80090e0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009086:	23a4      	movs	r3, #164	; 0xa4
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2280      	movs	r2, #128	; 0x80
 800908e:	4013      	ands	r3, r2
 8009090:	d00f      	beq.n	80090b2 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009092:	23a0      	movs	r3, #160	; 0xa0
 8009094:	18fb      	adds	r3, r7, r3
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2280      	movs	r2, #128	; 0x80
 800909a:	4013      	ands	r3, r2
 800909c:	d009      	beq.n	80090b2 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01e      	beq.n	80090e4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	0010      	movs	r0, r2
 80090ae:	4798      	blx	r3
    }
    return;
 80090b0:	e018      	b.n	80090e4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80090b2:	23a4      	movs	r3, #164	; 0xa4
 80090b4:	18fb      	adds	r3, r7, r3
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2240      	movs	r2, #64	; 0x40
 80090ba:	4013      	ands	r3, r2
 80090bc:	d013      	beq.n	80090e6 <HAL_UART_IRQHandler+0x582>
 80090be:	23a0      	movs	r3, #160	; 0xa0
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2240      	movs	r2, #64	; 0x40
 80090c6:	4013      	ands	r3, r2
 80090c8:	d00d      	beq.n	80090e6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	0018      	movs	r0, r3
 80090ce:	f000 fbae 	bl	800982e <UART_EndTransmit_IT>
    return;
 80090d2:	e008      	b.n	80090e6 <HAL_UART_IRQHandler+0x582>
      return;
 80090d4:	46c0      	nop			; (mov r8, r8)
 80090d6:	e006      	b.n	80090e6 <HAL_UART_IRQHandler+0x582>
    return;
 80090d8:	46c0      	nop			; (mov r8, r8)
 80090da:	e004      	b.n	80090e6 <HAL_UART_IRQHandler+0x582>
      return;
 80090dc:	46c0      	nop			; (mov r8, r8)
 80090de:	e002      	b.n	80090e6 <HAL_UART_IRQHandler+0x582>
      return;
 80090e0:	46c0      	nop			; (mov r8, r8)
 80090e2:	e000      	b.n	80090e6 <HAL_UART_IRQHandler+0x582>
    return;
 80090e4:	46c0      	nop			; (mov r8, r8)
  }

}
 80090e6:	46bd      	mov	sp, r7
 80090e8:	b02b      	add	sp, #172	; 0xac
 80090ea:	bd90      	pop	{r4, r7, pc}
 80090ec:	fffffeff 	.word	0xfffffeff
 80090f0:	fffffedf 	.word	0xfffffedf

080090f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090fc:	46c0      	nop			; (mov r8, r8)
 80090fe:	46bd      	mov	sp, r7
 8009100:	b002      	add	sp, #8
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800910c:	46c0      	nop			; (mov r8, r8)
 800910e:	46bd      	mov	sp, r7
 8009110:	b002      	add	sp, #8
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	000a      	movs	r2, r1
 800911e:	1cbb      	adds	r3, r7, #2
 8009120:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	46bd      	mov	sp, r7
 8009126:	b002      	add	sp, #8
 8009128:	bd80      	pop	{r7, pc}
	...

0800912c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009134:	231e      	movs	r3, #30
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	431a      	orrs	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a8d      	ldr	r2, [pc, #564]	; (8009390 <UART_SetConfig+0x264>)
 800915c:	4013      	ands	r3, r2
 800915e:	0019      	movs	r1, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	430a      	orrs	r2, r1
 8009168:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a88      	ldr	r2, [pc, #544]	; (8009394 <UART_SetConfig+0x268>)
 8009172:	4013      	ands	r3, r2
 8009174:	0019      	movs	r1, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	699b      	ldr	r3, [r3, #24]
 8009186:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	4313      	orrs	r3, r2
 8009190:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	4a7f      	ldr	r2, [pc, #508]	; (8009398 <UART_SetConfig+0x26c>)
 800919a:	4013      	ands	r3, r2
 800919c:	0019      	movs	r1, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	430a      	orrs	r2, r1
 80091a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a7b      	ldr	r2, [pc, #492]	; (800939c <UART_SetConfig+0x270>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d127      	bne.n	8009202 <UART_SetConfig+0xd6>
 80091b2:	4b7b      	ldr	r3, [pc, #492]	; (80093a0 <UART_SetConfig+0x274>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	2203      	movs	r2, #3
 80091b8:	4013      	ands	r3, r2
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d00d      	beq.n	80091da <UART_SetConfig+0xae>
 80091be:	d81b      	bhi.n	80091f8 <UART_SetConfig+0xcc>
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d014      	beq.n	80091ee <UART_SetConfig+0xc2>
 80091c4:	d818      	bhi.n	80091f8 <UART_SetConfig+0xcc>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <UART_SetConfig+0xa4>
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d00a      	beq.n	80091e4 <UART_SetConfig+0xb8>
 80091ce:	e013      	b.n	80091f8 <UART_SetConfig+0xcc>
 80091d0:	231f      	movs	r3, #31
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	e021      	b.n	800921e <UART_SetConfig+0xf2>
 80091da:	231f      	movs	r3, #31
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	2202      	movs	r2, #2
 80091e0:	701a      	strb	r2, [r3, #0]
 80091e2:	e01c      	b.n	800921e <UART_SetConfig+0xf2>
 80091e4:	231f      	movs	r3, #31
 80091e6:	18fb      	adds	r3, r7, r3
 80091e8:	2204      	movs	r2, #4
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e017      	b.n	800921e <UART_SetConfig+0xf2>
 80091ee:	231f      	movs	r3, #31
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	2208      	movs	r2, #8
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e012      	b.n	800921e <UART_SetConfig+0xf2>
 80091f8:	231f      	movs	r3, #31
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	2210      	movs	r2, #16
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e00d      	b.n	800921e <UART_SetConfig+0xf2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a67      	ldr	r2, [pc, #412]	; (80093a4 <UART_SetConfig+0x278>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d104      	bne.n	8009216 <UART_SetConfig+0xea>
 800920c:	231f      	movs	r3, #31
 800920e:	18fb      	adds	r3, r7, r3
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e003      	b.n	800921e <UART_SetConfig+0xf2>
 8009216:	231f      	movs	r3, #31
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	2210      	movs	r2, #16
 800921c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	69da      	ldr	r2, [r3, #28]
 8009222:	2380      	movs	r3, #128	; 0x80
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	429a      	cmp	r2, r3
 8009228:	d15c      	bne.n	80092e4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800922a:	231f      	movs	r3, #31
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b08      	cmp	r3, #8
 8009232:	d015      	beq.n	8009260 <UART_SetConfig+0x134>
 8009234:	dc18      	bgt.n	8009268 <UART_SetConfig+0x13c>
 8009236:	2b04      	cmp	r3, #4
 8009238:	d00d      	beq.n	8009256 <UART_SetConfig+0x12a>
 800923a:	dc15      	bgt.n	8009268 <UART_SetConfig+0x13c>
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <UART_SetConfig+0x11a>
 8009240:	2b02      	cmp	r3, #2
 8009242:	d005      	beq.n	8009250 <UART_SetConfig+0x124>
 8009244:	e010      	b.n	8009268 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009246:	f7fd fa53 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 800924a:	0003      	movs	r3, r0
 800924c:	61bb      	str	r3, [r7, #24]
        break;
 800924e:	e012      	b.n	8009276 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009250:	4b55      	ldr	r3, [pc, #340]	; (80093a8 <UART_SetConfig+0x27c>)
 8009252:	61bb      	str	r3, [r7, #24]
        break;
 8009254:	e00f      	b.n	8009276 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009256:	f7fd f9eb 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 800925a:	0003      	movs	r3, r0
 800925c:	61bb      	str	r3, [r7, #24]
        break;
 800925e:	e00a      	b.n	8009276 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009260:	2380      	movs	r3, #128	; 0x80
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	61bb      	str	r3, [r7, #24]
        break;
 8009266:	e006      	b.n	8009276 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800926c:	231e      	movs	r3, #30
 800926e:	18fb      	adds	r3, r7, r3
 8009270:	2201      	movs	r2, #1
 8009272:	701a      	strb	r2, [r3, #0]
        break;
 8009274:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d100      	bne.n	800927e <UART_SetConfig+0x152>
 800927c:	e07a      	b.n	8009374 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	005a      	lsls	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	085b      	lsrs	r3, r3, #1
 8009288:	18d2      	adds	r2, r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	0019      	movs	r1, r3
 8009290:	0010      	movs	r0, r2
 8009292:	f7f6 ff55 	bl	8000140 <__udivsi3>
 8009296:	0003      	movs	r3, r0
 8009298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b0f      	cmp	r3, #15
 800929e:	d91c      	bls.n	80092da <UART_SetConfig+0x1ae>
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	025b      	lsls	r3, r3, #9
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d217      	bcs.n	80092da <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	200e      	movs	r0, #14
 80092b0:	183b      	adds	r3, r7, r0
 80092b2:	210f      	movs	r1, #15
 80092b4:	438a      	bics	r2, r1
 80092b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2207      	movs	r2, #7
 80092c0:	4013      	ands	r3, r2
 80092c2:	b299      	uxth	r1, r3
 80092c4:	183b      	adds	r3, r7, r0
 80092c6:	183a      	adds	r2, r7, r0
 80092c8:	8812      	ldrh	r2, [r2, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	183a      	adds	r2, r7, r0
 80092d4:	8812      	ldrh	r2, [r2, #0]
 80092d6:	60da      	str	r2, [r3, #12]
 80092d8:	e04c      	b.n	8009374 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80092da:	231e      	movs	r3, #30
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	2201      	movs	r2, #1
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e047      	b.n	8009374 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092e4:	231f      	movs	r3, #31
 80092e6:	18fb      	adds	r3, r7, r3
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	2b08      	cmp	r3, #8
 80092ec:	d015      	beq.n	800931a <UART_SetConfig+0x1ee>
 80092ee:	dc18      	bgt.n	8009322 <UART_SetConfig+0x1f6>
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d00d      	beq.n	8009310 <UART_SetConfig+0x1e4>
 80092f4:	dc15      	bgt.n	8009322 <UART_SetConfig+0x1f6>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d002      	beq.n	8009300 <UART_SetConfig+0x1d4>
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d005      	beq.n	800930a <UART_SetConfig+0x1de>
 80092fe:	e010      	b.n	8009322 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009300:	f7fd f9f6 	bl	80066f0 <HAL_RCC_GetPCLK1Freq>
 8009304:	0003      	movs	r3, r0
 8009306:	61bb      	str	r3, [r7, #24]
        break;
 8009308:	e012      	b.n	8009330 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800930a:	4b27      	ldr	r3, [pc, #156]	; (80093a8 <UART_SetConfig+0x27c>)
 800930c:	61bb      	str	r3, [r7, #24]
        break;
 800930e:	e00f      	b.n	8009330 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009310:	f7fd f98e 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 8009314:	0003      	movs	r3, r0
 8009316:	61bb      	str	r3, [r7, #24]
        break;
 8009318:	e00a      	b.n	8009330 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800931a:	2380      	movs	r3, #128	; 0x80
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	61bb      	str	r3, [r7, #24]
        break;
 8009320:	e006      	b.n	8009330 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8009322:	2300      	movs	r3, #0
 8009324:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009326:	231e      	movs	r3, #30
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	2201      	movs	r2, #1
 800932c:	701a      	strb	r2, [r3, #0]
        break;
 800932e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d01e      	beq.n	8009374 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	085a      	lsrs	r2, r3, #1
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	18d2      	adds	r2, r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	0019      	movs	r1, r3
 8009346:	0010      	movs	r0, r2
 8009348:	f7f6 fefa 	bl	8000140 <__udivsi3>
 800934c:	0003      	movs	r3, r0
 800934e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2b0f      	cmp	r3, #15
 8009354:	d90a      	bls.n	800936c <UART_SetConfig+0x240>
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	2380      	movs	r3, #128	; 0x80
 800935a:	025b      	lsls	r3, r3, #9
 800935c:	429a      	cmp	r2, r3
 800935e:	d205      	bcs.n	800936c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	b29a      	uxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60da      	str	r2, [r3, #12]
 800936a:	e003      	b.n	8009374 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800936c:	231e      	movs	r3, #30
 800936e:	18fb      	adds	r3, r7, r3
 8009370:	2201      	movs	r2, #1
 8009372:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009380:	231e      	movs	r3, #30
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	781b      	ldrb	r3, [r3, #0]
}
 8009386:	0018      	movs	r0, r3
 8009388:	46bd      	mov	sp, r7
 800938a:	b008      	add	sp, #32
 800938c:	bd80      	pop	{r7, pc}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	ffff69f3 	.word	0xffff69f3
 8009394:	ffffcfff 	.word	0xffffcfff
 8009398:	fffff4ff 	.word	0xfffff4ff
 800939c:	40013800 	.word	0x40013800
 80093a0:	40021000 	.word	0x40021000
 80093a4:	40004400 	.word	0x40004400
 80093a8:	007a1200 	.word	0x007a1200

080093ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	2201      	movs	r2, #1
 80093ba:	4013      	ands	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	4a4a      	ldr	r2, [pc, #296]	; (80094f0 <UART_AdvFeatureConfig+0x144>)
 80093c6:	4013      	ands	r3, r2
 80093c8:	0019      	movs	r1, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	2202      	movs	r2, #2
 80093dc:	4013      	ands	r3, r2
 80093de:	d00b      	beq.n	80093f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4a43      	ldr	r2, [pc, #268]	; (80094f4 <UART_AdvFeatureConfig+0x148>)
 80093e8:	4013      	ands	r3, r2
 80093ea:	0019      	movs	r1, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	2204      	movs	r2, #4
 80093fe:	4013      	ands	r3, r2
 8009400:	d00b      	beq.n	800941a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	4a3b      	ldr	r2, [pc, #236]	; (80094f8 <UART_AdvFeatureConfig+0x14c>)
 800940a:	4013      	ands	r3, r2
 800940c:	0019      	movs	r1, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941e:	2208      	movs	r2, #8
 8009420:	4013      	ands	r3, r2
 8009422:	d00b      	beq.n	800943c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	4a34      	ldr	r2, [pc, #208]	; (80094fc <UART_AdvFeatureConfig+0x150>)
 800942c:	4013      	ands	r3, r2
 800942e:	0019      	movs	r1, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2210      	movs	r2, #16
 8009442:	4013      	ands	r3, r2
 8009444:	d00b      	beq.n	800945e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	4a2c      	ldr	r2, [pc, #176]	; (8009500 <UART_AdvFeatureConfig+0x154>)
 800944e:	4013      	ands	r3, r2
 8009450:	0019      	movs	r1, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	2220      	movs	r2, #32
 8009464:	4013      	ands	r3, r2
 8009466:	d00b      	beq.n	8009480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	4a25      	ldr	r2, [pc, #148]	; (8009504 <UART_AdvFeatureConfig+0x158>)
 8009470:	4013      	ands	r3, r2
 8009472:	0019      	movs	r1, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	2240      	movs	r2, #64	; 0x40
 8009486:	4013      	ands	r3, r2
 8009488:	d01d      	beq.n	80094c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4a1d      	ldr	r2, [pc, #116]	; (8009508 <UART_AdvFeatureConfig+0x15c>)
 8009492:	4013      	ands	r3, r2
 8009494:	0019      	movs	r1, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a6:	2380      	movs	r3, #128	; 0x80
 80094a8:	035b      	lsls	r3, r3, #13
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d10b      	bne.n	80094c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4a15      	ldr	r2, [pc, #84]	; (800950c <UART_AdvFeatureConfig+0x160>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	0019      	movs	r1, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2280      	movs	r2, #128	; 0x80
 80094cc:	4013      	ands	r3, r2
 80094ce:	d00b      	beq.n	80094e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	4a0e      	ldr	r2, [pc, #56]	; (8009510 <UART_AdvFeatureConfig+0x164>)
 80094d8:	4013      	ands	r3, r2
 80094da:	0019      	movs	r1, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	605a      	str	r2, [r3, #4]
  }
}
 80094e8:	46c0      	nop			; (mov r8, r8)
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b002      	add	sp, #8
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	fffdffff 	.word	0xfffdffff
 80094f4:	fffeffff 	.word	0xfffeffff
 80094f8:	fffbffff 	.word	0xfffbffff
 80094fc:	ffff7fff 	.word	0xffff7fff
 8009500:	ffffefff 	.word	0xffffefff
 8009504:	ffffdfff 	.word	0xffffdfff
 8009508:	ffefffff 	.word	0xffefffff
 800950c:	ff9fffff 	.word	0xff9fffff
 8009510:	fff7ffff 	.word	0xfff7ffff

08009514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b092      	sub	sp, #72	; 0x48
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2284      	movs	r2, #132	; 0x84
 8009520:	2100      	movs	r1, #0
 8009522:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009524:	f7fb fcc6 	bl	8004eb4 <HAL_GetTick>
 8009528:	0003      	movs	r3, r0
 800952a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2208      	movs	r2, #8
 8009534:	4013      	ands	r3, r2
 8009536:	2b08      	cmp	r3, #8
 8009538:	d12c      	bne.n	8009594 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800953a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800953c:	2280      	movs	r2, #128	; 0x80
 800953e:	0391      	lsls	r1, r2, #14
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	4a46      	ldr	r2, [pc, #280]	; (800965c <UART_CheckIdleState+0x148>)
 8009544:	9200      	str	r2, [sp, #0]
 8009546:	2200      	movs	r2, #0
 8009548:	f000 f88c 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 800954c:	1e03      	subs	r3, r0, #0
 800954e:	d021      	beq.n	8009594 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009550:	f3ef 8310 	mrs	r3, PRIMASK
 8009554:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009558:	63bb      	str	r3, [r7, #56]	; 0x38
 800955a:	2301      	movs	r3, #1
 800955c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800955e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009560:	f383 8810 	msr	PRIMASK, r3
}
 8009564:	46c0      	nop			; (mov r8, r8)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2180      	movs	r1, #128	; 0x80
 8009572:	438a      	bics	r2, r1
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800957a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957c:	f383 8810 	msr	PRIMASK, r3
}
 8009580:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2278      	movs	r2, #120	; 0x78
 800958c:	2100      	movs	r1, #0
 800958e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e05f      	b.n	8009654 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2204      	movs	r2, #4
 800959c:	4013      	ands	r3, r2
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d146      	bne.n	8009630 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a4:	2280      	movs	r2, #128	; 0x80
 80095a6:	03d1      	lsls	r1, r2, #15
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4a2c      	ldr	r2, [pc, #176]	; (800965c <UART_CheckIdleState+0x148>)
 80095ac:	9200      	str	r2, [sp, #0]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f000 f858 	bl	8009664 <UART_WaitOnFlagUntilTimeout>
 80095b4:	1e03      	subs	r3, r0, #0
 80095b6:	d03b      	beq.n	8009630 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b8:	f3ef 8310 	mrs	r3, PRIMASK
 80095bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80095be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095c0:	637b      	str	r3, [r7, #52]	; 0x34
 80095c2:	2301      	movs	r3, #1
 80095c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f383 8810 	msr	PRIMASK, r3
}
 80095cc:	46c0      	nop			; (mov r8, r8)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4921      	ldr	r1, [pc, #132]	; (8009660 <UART_CheckIdleState+0x14c>)
 80095da:	400a      	ands	r2, r1
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f383 8810 	msr	PRIMASK, r3
}
 80095e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ea:	f3ef 8310 	mrs	r3, PRIMASK
 80095ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80095f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095f2:	633b      	str	r3, [r7, #48]	; 0x30
 80095f4:	2301      	movs	r3, #1
 80095f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f383 8810 	msr	PRIMASK, r3
}
 80095fe:	46c0      	nop			; (mov r8, r8)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	689a      	ldr	r2, [r3, #8]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2101      	movs	r1, #1
 800960c:	438a      	bics	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	f383 8810 	msr	PRIMASK, r3
}
 800961a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2280      	movs	r2, #128	; 0x80
 8009620:	2120      	movs	r1, #32
 8009622:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2278      	movs	r2, #120	; 0x78
 8009628:	2100      	movs	r1, #0
 800962a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e011      	b.n	8009654 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2280      	movs	r2, #128	; 0x80
 800963a:	2120      	movs	r1, #32
 800963c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2278      	movs	r2, #120	; 0x78
 800964e:	2100      	movs	r1, #0
 8009650:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	0018      	movs	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	b010      	add	sp, #64	; 0x40
 800965a:	bd80      	pop	{r7, pc}
 800965c:	01ffffff 	.word	0x01ffffff
 8009660:	fffffedf 	.word	0xfffffedf

08009664 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	1dfb      	adds	r3, r7, #7
 8009672:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009674:	e04b      	b.n	800970e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	3301      	adds	r3, #1
 800967a:	d048      	beq.n	800970e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800967c:	f7fb fc1a 	bl	8004eb4 <HAL_GetTick>
 8009680:	0002      	movs	r2, r0
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	429a      	cmp	r2, r3
 800968a:	d302      	bcc.n	8009692 <UART_WaitOnFlagUntilTimeout+0x2e>
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e04b      	b.n	800972e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2204      	movs	r2, #4
 800969e:	4013      	ands	r3, r2
 80096a0:	d035      	beq.n	800970e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	2208      	movs	r2, #8
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d111      	bne.n	80096d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2208      	movs	r2, #8
 80096b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	0018      	movs	r0, r3
 80096bc:	f000 f83c 	bl	8009738 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2284      	movs	r2, #132	; 0x84
 80096c4:	2108      	movs	r1, #8
 80096c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2278      	movs	r2, #120	; 0x78
 80096cc:	2100      	movs	r1, #0
 80096ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e02c      	b.n	800972e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	69da      	ldr	r2, [r3, #28]
 80096da:	2380      	movs	r3, #128	; 0x80
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	401a      	ands	r2, r3
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	011b      	lsls	r3, r3, #4
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d112      	bne.n	800970e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2280      	movs	r2, #128	; 0x80
 80096ee:	0112      	lsls	r2, r2, #4
 80096f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	0018      	movs	r0, r3
 80096f6:	f000 f81f 	bl	8009738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2284      	movs	r2, #132	; 0x84
 80096fe:	2120      	movs	r1, #32
 8009700:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2278      	movs	r2, #120	; 0x78
 8009706:	2100      	movs	r1, #0
 8009708:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800970a:	2303      	movs	r3, #3
 800970c:	e00f      	b.n	800972e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	4013      	ands	r3, r2
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	425a      	negs	r2, r3
 800971e:	4153      	adcs	r3, r2
 8009720:	b2db      	uxtb	r3, r3
 8009722:	001a      	movs	r2, r3
 8009724:	1dfb      	adds	r3, r7, #7
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	429a      	cmp	r2, r3
 800972a:	d0a4      	beq.n	8009676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	0018      	movs	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	b004      	add	sp, #16
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08e      	sub	sp, #56	; 0x38
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009740:	f3ef 8310 	mrs	r3, PRIMASK
 8009744:	617b      	str	r3, [r7, #20]
  return(result);
 8009746:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
 800974a:	2301      	movs	r3, #1
 800974c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	f383 8810 	msr	PRIMASK, r3
}
 8009754:	46c0      	nop			; (mov r8, r8)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4926      	ldr	r1, [pc, #152]	; (80097fc <UART_EndRxTransfer+0xc4>)
 8009762:	400a      	ands	r2, r1
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	f383 8810 	msr	PRIMASK, r3
}
 8009770:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009772:	f3ef 8310 	mrs	r3, PRIMASK
 8009776:	623b      	str	r3, [r7, #32]
  return(result);
 8009778:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800977a:	633b      	str	r3, [r7, #48]	; 0x30
 800977c:	2301      	movs	r3, #1
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	f383 8810 	msr	PRIMASK, r3
}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2101      	movs	r1, #1
 8009794:	438a      	bics	r2, r1
 8009796:	609a      	str	r2, [r3, #8]
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	f383 8810 	msr	PRIMASK, r3
}
 80097a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d118      	bne.n	80097de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ac:	f3ef 8310 	mrs	r3, PRIMASK
 80097b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80097b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097b6:	2301      	movs	r3, #1
 80097b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f383 8810 	msr	PRIMASK, r3
}
 80097c0:	46c0      	nop			; (mov r8, r8)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2110      	movs	r1, #16
 80097ce:	438a      	bics	r2, r1
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f383 8810 	msr	PRIMASK, r3
}
 80097dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2280      	movs	r2, #128	; 0x80
 80097e2:	2120      	movs	r1, #32
 80097e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	46bd      	mov	sp, r7
 80097f6:	b00e      	add	sp, #56	; 0x38
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	fffffedf 	.word	0xfffffedf

08009800 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	225a      	movs	r2, #90	; 0x5a
 8009812:	2100      	movs	r1, #0
 8009814:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2252      	movs	r2, #82	; 0x52
 800981a:	2100      	movs	r1, #0
 800981c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	0018      	movs	r0, r3
 8009822:	f7ff fc6f 	bl	8009104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009826:	46c0      	nop			; (mov r8, r8)
 8009828:	46bd      	mov	sp, r7
 800982a:	b004      	add	sp, #16
 800982c:	bd80      	pop	{r7, pc}

0800982e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b086      	sub	sp, #24
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009836:	f3ef 8310 	mrs	r3, PRIMASK
 800983a:	60bb      	str	r3, [r7, #8]
  return(result);
 800983c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	2301      	movs	r3, #1
 8009842:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f383 8810 	msr	PRIMASK, r3
}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2140      	movs	r1, #64	; 0x40
 8009858:	438a      	bics	r2, r1
 800985a:	601a      	str	r2, [r3, #0]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f383 8810 	msr	PRIMASK, r3
}
 8009866:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	0018      	movs	r0, r3
 8009878:	f7ff fc3c 	bl	80090f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800987c:	46c0      	nop			; (mov r8, r8)
 800987e:	46bd      	mov	sp, r7
 8009880:	b006      	add	sp, #24
 8009882:	bd80      	pop	{r7, pc}

08009884 <arm_mean_f32>:
 8009884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009886:	4647      	mov	r7, r8
 8009888:	4690      	mov	r8, r2
 800988a:	b480      	push	{r7}
 800988c:	1e0f      	subs	r7, r1, #0
 800988e:	d016      	beq.n	80098be <arm_mean_f32+0x3a>
 8009890:	0005      	movs	r5, r0
 8009892:	000c      	movs	r4, r1
 8009894:	2600      	movs	r6, #0
 8009896:	1c30      	adds	r0, r6, #0
 8009898:	cd02      	ldmia	r5!, {r1}
 800989a:	f7f6 fe05 	bl	80004a8 <__aeabi_fadd>
 800989e:	3c01      	subs	r4, #1
 80098a0:	1c06      	adds	r6, r0, #0
 80098a2:	2c00      	cmp	r4, #0
 80098a4:	d1f7      	bne.n	8009896 <arm_mean_f32+0x12>
 80098a6:	0038      	movs	r0, r7
 80098a8:	f7f7 fbf8 	bl	800109c <__aeabi_ui2f>
 80098ac:	1c01      	adds	r1, r0, #0
 80098ae:	1c30      	adds	r0, r6, #0
 80098b0:	f7f6 ff9a 	bl	80007e8 <__aeabi_fdiv>
 80098b4:	4643      	mov	r3, r8
 80098b6:	6018      	str	r0, [r3, #0]
 80098b8:	bc04      	pop	{r2}
 80098ba:	4690      	mov	r8, r2
 80098bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098be:	2600      	movs	r6, #0
 80098c0:	e7f1      	b.n	80098a6 <arm_mean_f32+0x22>
 80098c2:	46c0      	nop			; (mov r8, r8)

080098c4 <exit>:
 80098c4:	4b07      	ldr	r3, [pc, #28]	; (80098e4 <exit+0x20>)
 80098c6:	b510      	push	{r4, lr}
 80098c8:	0004      	movs	r4, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <exit+0x10>
 80098ce:	2100      	movs	r1, #0
 80098d0:	e000      	b.n	80098d4 <exit+0x10>
 80098d2:	bf00      	nop
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <exit+0x24>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d000      	beq.n	80098de <exit+0x1a>
 80098dc:	4798      	blx	r3
 80098de:	0020      	movs	r0, r4
 80098e0:	f7fb f8f6 	bl	8004ad0 <_exit>
 80098e4:	00000000 	.word	0x00000000
 80098e8:	20000a5c 	.word	0x20000a5c

080098ec <malloc>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	4b03      	ldr	r3, [pc, #12]	; (80098fc <malloc+0x10>)
 80098f0:	0001      	movs	r1, r0
 80098f2:	6818      	ldr	r0, [r3, #0]
 80098f4:	f000 f826 	bl	8009944 <_malloc_r>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	200001f4 	.word	0x200001f4

08009900 <sbrk_aligned>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	4e0f      	ldr	r6, [pc, #60]	; (8009940 <sbrk_aligned+0x40>)
 8009904:	000d      	movs	r5, r1
 8009906:	6831      	ldr	r1, [r6, #0]
 8009908:	0004      	movs	r4, r0
 800990a:	2900      	cmp	r1, #0
 800990c:	d102      	bne.n	8009914 <sbrk_aligned+0x14>
 800990e:	f000 fff1 	bl	800a8f4 <_sbrk_r>
 8009912:	6030      	str	r0, [r6, #0]
 8009914:	0029      	movs	r1, r5
 8009916:	0020      	movs	r0, r4
 8009918:	f000 ffec 	bl	800a8f4 <_sbrk_r>
 800991c:	1c43      	adds	r3, r0, #1
 800991e:	d00a      	beq.n	8009936 <sbrk_aligned+0x36>
 8009920:	2303      	movs	r3, #3
 8009922:	1cc5      	adds	r5, r0, #3
 8009924:	439d      	bics	r5, r3
 8009926:	42a8      	cmp	r0, r5
 8009928:	d007      	beq.n	800993a <sbrk_aligned+0x3a>
 800992a:	1a29      	subs	r1, r5, r0
 800992c:	0020      	movs	r0, r4
 800992e:	f000 ffe1 	bl	800a8f4 <_sbrk_r>
 8009932:	3001      	adds	r0, #1
 8009934:	d101      	bne.n	800993a <sbrk_aligned+0x3a>
 8009936:	2501      	movs	r5, #1
 8009938:	426d      	negs	r5, r5
 800993a:	0028      	movs	r0, r5
 800993c:	bd70      	pop	{r4, r5, r6, pc}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	20000920 	.word	0x20000920

08009944 <_malloc_r>:
 8009944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009946:	2203      	movs	r2, #3
 8009948:	1ccb      	adds	r3, r1, #3
 800994a:	4393      	bics	r3, r2
 800994c:	3308      	adds	r3, #8
 800994e:	0006      	movs	r6, r0
 8009950:	001f      	movs	r7, r3
 8009952:	2b0c      	cmp	r3, #12
 8009954:	d238      	bcs.n	80099c8 <_malloc_r+0x84>
 8009956:	270c      	movs	r7, #12
 8009958:	42b9      	cmp	r1, r7
 800995a:	d837      	bhi.n	80099cc <_malloc_r+0x88>
 800995c:	0030      	movs	r0, r6
 800995e:	f000 f873 	bl	8009a48 <__malloc_lock>
 8009962:	4b38      	ldr	r3, [pc, #224]	; (8009a44 <_malloc_r+0x100>)
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	001c      	movs	r4, r3
 800996a:	2c00      	cmp	r4, #0
 800996c:	d133      	bne.n	80099d6 <_malloc_r+0x92>
 800996e:	0039      	movs	r1, r7
 8009970:	0030      	movs	r0, r6
 8009972:	f7ff ffc5 	bl	8009900 <sbrk_aligned>
 8009976:	0004      	movs	r4, r0
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d15e      	bne.n	8009a3a <_malloc_r+0xf6>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	681c      	ldr	r4, [r3, #0]
 8009980:	0025      	movs	r5, r4
 8009982:	2d00      	cmp	r5, #0
 8009984:	d14e      	bne.n	8009a24 <_malloc_r+0xe0>
 8009986:	2c00      	cmp	r4, #0
 8009988:	d051      	beq.n	8009a2e <_malloc_r+0xea>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	0029      	movs	r1, r5
 800998e:	18e3      	adds	r3, r4, r3
 8009990:	0030      	movs	r0, r6
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	f000 ffae 	bl	800a8f4 <_sbrk_r>
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	4283      	cmp	r3, r0
 800999c:	d147      	bne.n	8009a2e <_malloc_r+0xea>
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	0030      	movs	r0, r6
 80099a2:	1aff      	subs	r7, r7, r3
 80099a4:	0039      	movs	r1, r7
 80099a6:	f7ff ffab 	bl	8009900 <sbrk_aligned>
 80099aa:	3001      	adds	r0, #1
 80099ac:	d03f      	beq.n	8009a2e <_malloc_r+0xea>
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	19db      	adds	r3, r3, r7
 80099b2:	6023      	str	r3, [r4, #0]
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d040      	beq.n	8009a3e <_malloc_r+0xfa>
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	42a2      	cmp	r2, r4
 80099c0:	d133      	bne.n	8009a2a <_malloc_r+0xe6>
 80099c2:	2200      	movs	r2, #0
 80099c4:	605a      	str	r2, [r3, #4]
 80099c6:	e014      	b.n	80099f2 <_malloc_r+0xae>
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	dac5      	bge.n	8009958 <_malloc_r+0x14>
 80099cc:	230c      	movs	r3, #12
 80099ce:	2500      	movs	r5, #0
 80099d0:	6033      	str	r3, [r6, #0]
 80099d2:	0028      	movs	r0, r5
 80099d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099d6:	6821      	ldr	r1, [r4, #0]
 80099d8:	1bc9      	subs	r1, r1, r7
 80099da:	d420      	bmi.n	8009a1e <_malloc_r+0xda>
 80099dc:	290b      	cmp	r1, #11
 80099de:	d918      	bls.n	8009a12 <_malloc_r+0xce>
 80099e0:	19e2      	adds	r2, r4, r7
 80099e2:	6027      	str	r7, [r4, #0]
 80099e4:	42a3      	cmp	r3, r4
 80099e6:	d112      	bne.n	8009a0e <_malloc_r+0xca>
 80099e8:	9b00      	ldr	r3, [sp, #0]
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	6863      	ldr	r3, [r4, #4]
 80099ee:	6011      	str	r1, [r2, #0]
 80099f0:	6053      	str	r3, [r2, #4]
 80099f2:	0030      	movs	r0, r6
 80099f4:	0025      	movs	r5, r4
 80099f6:	f000 f82f 	bl	8009a58 <__malloc_unlock>
 80099fa:	2207      	movs	r2, #7
 80099fc:	350b      	adds	r5, #11
 80099fe:	1d23      	adds	r3, r4, #4
 8009a00:	4395      	bics	r5, r2
 8009a02:	1aea      	subs	r2, r5, r3
 8009a04:	429d      	cmp	r5, r3
 8009a06:	d0e4      	beq.n	80099d2 <_malloc_r+0x8e>
 8009a08:	1b5b      	subs	r3, r3, r5
 8009a0a:	50a3      	str	r3, [r4, r2]
 8009a0c:	e7e1      	b.n	80099d2 <_malloc_r+0x8e>
 8009a0e:	605a      	str	r2, [r3, #4]
 8009a10:	e7ec      	b.n	80099ec <_malloc_r+0xa8>
 8009a12:	6862      	ldr	r2, [r4, #4]
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d1d5      	bne.n	80099c4 <_malloc_r+0x80>
 8009a18:	9b00      	ldr	r3, [sp, #0]
 8009a1a:	601a      	str	r2, [r3, #0]
 8009a1c:	e7e9      	b.n	80099f2 <_malloc_r+0xae>
 8009a1e:	0023      	movs	r3, r4
 8009a20:	6864      	ldr	r4, [r4, #4]
 8009a22:	e7a2      	b.n	800996a <_malloc_r+0x26>
 8009a24:	002c      	movs	r4, r5
 8009a26:	686d      	ldr	r5, [r5, #4]
 8009a28:	e7ab      	b.n	8009982 <_malloc_r+0x3e>
 8009a2a:	0013      	movs	r3, r2
 8009a2c:	e7c4      	b.n	80099b8 <_malloc_r+0x74>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	0030      	movs	r0, r6
 8009a32:	6033      	str	r3, [r6, #0]
 8009a34:	f000 f810 	bl	8009a58 <__malloc_unlock>
 8009a38:	e7cb      	b.n	80099d2 <_malloc_r+0x8e>
 8009a3a:	6027      	str	r7, [r4, #0]
 8009a3c:	e7d9      	b.n	80099f2 <_malloc_r+0xae>
 8009a3e:	605b      	str	r3, [r3, #4]
 8009a40:	deff      	udf	#255	; 0xff
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	2000091c 	.word	0x2000091c

08009a48 <__malloc_lock>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4802      	ldr	r0, [pc, #8]	; (8009a54 <__malloc_lock+0xc>)
 8009a4c:	f000 ffa3 	bl	800a996 <__retarget_lock_acquire_recursive>
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	46c0      	nop			; (mov r8, r8)
 8009a54:	20000a64 	.word	0x20000a64

08009a58 <__malloc_unlock>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4802      	ldr	r0, [pc, #8]	; (8009a64 <__malloc_unlock+0xc>)
 8009a5c:	f000 ff9c 	bl	800a998 <__retarget_lock_release_recursive>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	20000a64 	.word	0x20000a64

08009a68 <__cvt>:
 8009a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6a:	001e      	movs	r6, r3
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	0014      	movs	r4, r2
 8009a70:	b08b      	sub	sp, #44	; 0x2c
 8009a72:	429e      	cmp	r6, r3
 8009a74:	da04      	bge.n	8009a80 <__cvt+0x18>
 8009a76:	2180      	movs	r1, #128	; 0x80
 8009a78:	0609      	lsls	r1, r1, #24
 8009a7a:	1873      	adds	r3, r6, r1
 8009a7c:	001e      	movs	r6, r3
 8009a7e:	232d      	movs	r3, #45	; 0x2d
 8009a80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a84:	7013      	strb	r3, [r2, #0]
 8009a86:	2320      	movs	r3, #32
 8009a88:	2203      	movs	r2, #3
 8009a8a:	439f      	bics	r7, r3
 8009a8c:	2f46      	cmp	r7, #70	; 0x46
 8009a8e:	d007      	beq.n	8009aa0 <__cvt+0x38>
 8009a90:	003b      	movs	r3, r7
 8009a92:	3b45      	subs	r3, #69	; 0x45
 8009a94:	4259      	negs	r1, r3
 8009a96:	414b      	adcs	r3, r1
 8009a98:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009a9a:	3a01      	subs	r2, #1
 8009a9c:	18cb      	adds	r3, r1, r3
 8009a9e:	9310      	str	r3, [sp, #64]	; 0x40
 8009aa0:	ab09      	add	r3, sp, #36	; 0x24
 8009aa2:	9304      	str	r3, [sp, #16]
 8009aa4:	ab08      	add	r3, sp, #32
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009aaa:	9200      	str	r2, [sp, #0]
 8009aac:	9302      	str	r3, [sp, #8]
 8009aae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ab0:	0022      	movs	r2, r4
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	0033      	movs	r3, r6
 8009ab6:	f001 f813 	bl	800aae0 <_dtoa_r>
 8009aba:	0005      	movs	r5, r0
 8009abc:	2f47      	cmp	r7, #71	; 0x47
 8009abe:	d102      	bne.n	8009ac6 <__cvt+0x5e>
 8009ac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ac2:	07db      	lsls	r3, r3, #31
 8009ac4:	d528      	bpl.n	8009b18 <__cvt+0xb0>
 8009ac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ac8:	18eb      	adds	r3, r5, r3
 8009aca:	9307      	str	r3, [sp, #28]
 8009acc:	2f46      	cmp	r7, #70	; 0x46
 8009ace:	d114      	bne.n	8009afa <__cvt+0x92>
 8009ad0:	782b      	ldrb	r3, [r5, #0]
 8009ad2:	2b30      	cmp	r3, #48	; 0x30
 8009ad4:	d10c      	bne.n	8009af0 <__cvt+0x88>
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	0020      	movs	r0, r4
 8009adc:	0031      	movs	r1, r6
 8009ade:	f7f6 fcb5 	bl	800044c <__aeabi_dcmpeq>
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	d104      	bne.n	8009af0 <__cvt+0x88>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009af2:	9a07      	ldr	r2, [sp, #28]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	18d3      	adds	r3, r2, r3
 8009af8:	9307      	str	r3, [sp, #28]
 8009afa:	2200      	movs	r2, #0
 8009afc:	2300      	movs	r3, #0
 8009afe:	0020      	movs	r0, r4
 8009b00:	0031      	movs	r1, r6
 8009b02:	f7f6 fca3 	bl	800044c <__aeabi_dcmpeq>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d001      	beq.n	8009b0e <__cvt+0xa6>
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0e:	2230      	movs	r2, #48	; 0x30
 8009b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b12:	9907      	ldr	r1, [sp, #28]
 8009b14:	428b      	cmp	r3, r1
 8009b16:	d306      	bcc.n	8009b26 <__cvt+0xbe>
 8009b18:	0028      	movs	r0, r5
 8009b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b1e:	1b5b      	subs	r3, r3, r5
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	b00b      	add	sp, #44	; 0x2c
 8009b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b26:	1c59      	adds	r1, r3, #1
 8009b28:	9109      	str	r1, [sp, #36]	; 0x24
 8009b2a:	701a      	strb	r2, [r3, #0]
 8009b2c:	e7f0      	b.n	8009b10 <__cvt+0xa8>

08009b2e <__exponent>:
 8009b2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b30:	1c83      	adds	r3, r0, #2
 8009b32:	b087      	sub	sp, #28
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	0005      	movs	r5, r0
 8009b38:	000c      	movs	r4, r1
 8009b3a:	232b      	movs	r3, #43	; 0x2b
 8009b3c:	7002      	strb	r2, [r0, #0]
 8009b3e:	2900      	cmp	r1, #0
 8009b40:	da01      	bge.n	8009b46 <__exponent+0x18>
 8009b42:	424c      	negs	r4, r1
 8009b44:	3302      	adds	r3, #2
 8009b46:	706b      	strb	r3, [r5, #1]
 8009b48:	2c09      	cmp	r4, #9
 8009b4a:	dd2f      	ble.n	8009bac <__exponent+0x7e>
 8009b4c:	270a      	movs	r7, #10
 8009b4e:	ab04      	add	r3, sp, #16
 8009b50:	1dde      	adds	r6, r3, #7
 8009b52:	0020      	movs	r0, r4
 8009b54:	0039      	movs	r1, r7
 8009b56:	9601      	str	r6, [sp, #4]
 8009b58:	f7f6 fc62 	bl	8000420 <__aeabi_idivmod>
 8009b5c:	3e01      	subs	r6, #1
 8009b5e:	3130      	adds	r1, #48	; 0x30
 8009b60:	0020      	movs	r0, r4
 8009b62:	7031      	strb	r1, [r6, #0]
 8009b64:	0039      	movs	r1, r7
 8009b66:	9402      	str	r4, [sp, #8]
 8009b68:	f7f6 fb74 	bl	8000254 <__divsi3>
 8009b6c:	9b02      	ldr	r3, [sp, #8]
 8009b6e:	0004      	movs	r4, r0
 8009b70:	2b63      	cmp	r3, #99	; 0x63
 8009b72:	dcee      	bgt.n	8009b52 <__exponent+0x24>
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	3430      	adds	r4, #48	; 0x30
 8009b78:	1e9a      	subs	r2, r3, #2
 8009b7a:	0013      	movs	r3, r2
 8009b7c:	9903      	ldr	r1, [sp, #12]
 8009b7e:	7014      	strb	r4, [r2, #0]
 8009b80:	a804      	add	r0, sp, #16
 8009b82:	3007      	adds	r0, #7
 8009b84:	4298      	cmp	r0, r3
 8009b86:	d80c      	bhi.n	8009ba2 <__exponent+0x74>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	4282      	cmp	r2, r0
 8009b8c:	d804      	bhi.n	8009b98 <__exponent+0x6a>
 8009b8e:	aa04      	add	r2, sp, #16
 8009b90:	3309      	adds	r3, #9
 8009b92:	189b      	adds	r3, r3, r2
 8009b94:	9a01      	ldr	r2, [sp, #4]
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	9a03      	ldr	r2, [sp, #12]
 8009b9a:	18d3      	adds	r3, r2, r3
 8009b9c:	1b58      	subs	r0, r3, r5
 8009b9e:	b007      	add	sp, #28
 8009ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba2:	7818      	ldrb	r0, [r3, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	7008      	strb	r0, [r1, #0]
 8009ba8:	3101      	adds	r1, #1
 8009baa:	e7e9      	b.n	8009b80 <__exponent+0x52>
 8009bac:	2330      	movs	r3, #48	; 0x30
 8009bae:	3430      	adds	r4, #48	; 0x30
 8009bb0:	70ab      	strb	r3, [r5, #2]
 8009bb2:	70ec      	strb	r4, [r5, #3]
 8009bb4:	1d2b      	adds	r3, r5, #4
 8009bb6:	e7f1      	b.n	8009b9c <__exponent+0x6e>

08009bb8 <_printf_float>:
 8009bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bba:	b095      	sub	sp, #84	; 0x54
 8009bbc:	000c      	movs	r4, r1
 8009bbe:	9208      	str	r2, [sp, #32]
 8009bc0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc4:	0007      	movs	r7, r0
 8009bc6:	f000 fe57 	bl	800a878 <_localeconv_r>
 8009bca:	6803      	ldr	r3, [r0, #0]
 8009bcc:	0018      	movs	r0, r3
 8009bce:	930c      	str	r3, [sp, #48]	; 0x30
 8009bd0:	f7f6 fa9a 	bl	8000108 <strlen>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	9312      	str	r3, [sp, #72]	; 0x48
 8009bd8:	7e23      	ldrb	r3, [r4, #24]
 8009bda:	2207      	movs	r2, #7
 8009bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	900d      	str	r0, [sp, #52]	; 0x34
 8009be2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009be6:	682b      	ldr	r3, [r5, #0]
 8009be8:	05c9      	lsls	r1, r1, #23
 8009bea:	d547      	bpl.n	8009c7c <_printf_float+0xc4>
 8009bec:	189b      	adds	r3, r3, r2
 8009bee:	4393      	bics	r3, r2
 8009bf0:	001a      	movs	r2, r3
 8009bf2:	3208      	adds	r2, #8
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	681e      	ldr	r6, [r3, #0]
 8009bf8:	685d      	ldr	r5, [r3, #4]
 8009bfa:	0032      	movs	r2, r6
 8009bfc:	002b      	movs	r3, r5
 8009bfe:	64a2      	str	r2, [r4, #72]	; 0x48
 8009c00:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009c02:	2201      	movs	r2, #1
 8009c04:	006b      	lsls	r3, r5, #1
 8009c06:	085b      	lsrs	r3, r3, #1
 8009c08:	930e      	str	r3, [sp, #56]	; 0x38
 8009c0a:	0030      	movs	r0, r6
 8009c0c:	4bab      	ldr	r3, [pc, #684]	; (8009ebc <_printf_float+0x304>)
 8009c0e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c10:	4252      	negs	r2, r2
 8009c12:	f7f9 f829 	bl	8002c68 <__aeabi_dcmpun>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d132      	bne.n	8009c80 <_printf_float+0xc8>
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	0030      	movs	r0, r6
 8009c1e:	4ba7      	ldr	r3, [pc, #668]	; (8009ebc <_printf_float+0x304>)
 8009c20:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009c22:	4252      	negs	r2, r2
 8009c24:	f7f6 fc22 	bl	800046c <__aeabi_dcmple>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d129      	bne.n	8009c80 <_printf_float+0xc8>
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	2300      	movs	r3, #0
 8009c30:	0030      	movs	r0, r6
 8009c32:	0029      	movs	r1, r5
 8009c34:	f7f6 fc10 	bl	8000458 <__aeabi_dcmplt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d003      	beq.n	8009c44 <_printf_float+0x8c>
 8009c3c:	0023      	movs	r3, r4
 8009c3e:	222d      	movs	r2, #45	; 0x2d
 8009c40:	3343      	adds	r3, #67	; 0x43
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c46:	4d9e      	ldr	r5, [pc, #632]	; (8009ec0 <_printf_float+0x308>)
 8009c48:	2b47      	cmp	r3, #71	; 0x47
 8009c4a:	d900      	bls.n	8009c4e <_printf_float+0x96>
 8009c4c:	4d9d      	ldr	r5, [pc, #628]	; (8009ec4 <_printf_float+0x30c>)
 8009c4e:	2303      	movs	r3, #3
 8009c50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	3301      	adds	r3, #1
 8009c56:	439a      	bics	r2, r3
 8009c58:	2300      	movs	r3, #0
 8009c5a:	6022      	str	r2, [r4, #0]
 8009c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c60:	0021      	movs	r1, r4
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	0038      	movs	r0, r7
 8009c66:	9b08      	ldr	r3, [sp, #32]
 8009c68:	aa13      	add	r2, sp, #76	; 0x4c
 8009c6a:	f000 f9fb 	bl	800a064 <_printf_common>
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d000      	beq.n	8009c74 <_printf_float+0xbc>
 8009c72:	e0a3      	b.n	8009dbc <_printf_float+0x204>
 8009c74:	2001      	movs	r0, #1
 8009c76:	4240      	negs	r0, r0
 8009c78:	b015      	add	sp, #84	; 0x54
 8009c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7c:	3307      	adds	r3, #7
 8009c7e:	e7b6      	b.n	8009bee <_printf_float+0x36>
 8009c80:	0032      	movs	r2, r6
 8009c82:	002b      	movs	r3, r5
 8009c84:	0030      	movs	r0, r6
 8009c86:	0029      	movs	r1, r5
 8009c88:	f7f8 ffee 	bl	8002c68 <__aeabi_dcmpun>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d00b      	beq.n	8009ca8 <_printf_float+0xf0>
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	da03      	bge.n	8009c9c <_printf_float+0xe4>
 8009c94:	0023      	movs	r3, r4
 8009c96:	222d      	movs	r2, #45	; 0x2d
 8009c98:	3343      	adds	r3, #67	; 0x43
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9e:	4d8a      	ldr	r5, [pc, #552]	; (8009ec8 <_printf_float+0x310>)
 8009ca0:	2b47      	cmp	r3, #71	; 0x47
 8009ca2:	d9d4      	bls.n	8009c4e <_printf_float+0x96>
 8009ca4:	4d89      	ldr	r5, [pc, #548]	; (8009ecc <_printf_float+0x314>)
 8009ca6:	e7d2      	b.n	8009c4e <_printf_float+0x96>
 8009ca8:	2220      	movs	r2, #32
 8009caa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009cac:	6863      	ldr	r3, [r4, #4]
 8009cae:	4391      	bics	r1, r2
 8009cb0:	910e      	str	r1, [sp, #56]	; 0x38
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	d14a      	bne.n	8009d4c <_printf_float+0x194>
 8009cb6:	3307      	adds	r3, #7
 8009cb8:	6063      	str	r3, [r4, #4]
 8009cba:	2380      	movs	r3, #128	; 0x80
 8009cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	9206      	str	r2, [sp, #24]
 8009cc6:	aa12      	add	r2, sp, #72	; 0x48
 8009cc8:	9205      	str	r2, [sp, #20]
 8009cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	9204      	str	r2, [sp, #16]
 8009cd0:	aa11      	add	r2, sp, #68	; 0x44
 8009cd2:	9203      	str	r2, [sp, #12]
 8009cd4:	2223      	movs	r2, #35	; 0x23
 8009cd6:	a908      	add	r1, sp, #32
 8009cd8:	9301      	str	r3, [sp, #4]
 8009cda:	6863      	ldr	r3, [r4, #4]
 8009cdc:	1852      	adds	r2, r2, r1
 8009cde:	9202      	str	r2, [sp, #8]
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	0032      	movs	r2, r6
 8009ce4:	002b      	movs	r3, r5
 8009ce6:	0038      	movs	r0, r7
 8009ce8:	f7ff febe 	bl	8009a68 <__cvt>
 8009cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cee:	0005      	movs	r5, r0
 8009cf0:	2b47      	cmp	r3, #71	; 0x47
 8009cf2:	d109      	bne.n	8009d08 <_printf_float+0x150>
 8009cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cf6:	1cda      	adds	r2, r3, #3
 8009cf8:	db02      	blt.n	8009d00 <_printf_float+0x148>
 8009cfa:	6862      	ldr	r2, [r4, #4]
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	dd49      	ble.n	8009d94 <_printf_float+0x1dc>
 8009d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d02:	3b02      	subs	r3, #2
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	930a      	str	r3, [sp, #40]	; 0x28
 8009d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d0c:	2b65      	cmp	r3, #101	; 0x65
 8009d0e:	d824      	bhi.n	8009d5a <_printf_float+0x1a2>
 8009d10:	0020      	movs	r0, r4
 8009d12:	001a      	movs	r2, r3
 8009d14:	3901      	subs	r1, #1
 8009d16:	3050      	adds	r0, #80	; 0x50
 8009d18:	9111      	str	r1, [sp, #68]	; 0x44
 8009d1a:	f7ff ff08 	bl	8009b2e <__exponent>
 8009d1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d20:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d22:	1813      	adds	r3, r2, r0
 8009d24:	6123      	str	r3, [r4, #16]
 8009d26:	2a01      	cmp	r2, #1
 8009d28:	dc02      	bgt.n	8009d30 <_printf_float+0x178>
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	07d2      	lsls	r2, r2, #31
 8009d2e:	d501      	bpl.n	8009d34 <_printf_float+0x17c>
 8009d30:	3301      	adds	r3, #1
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2323      	movs	r3, #35	; 0x23
 8009d36:	aa08      	add	r2, sp, #32
 8009d38:	189b      	adds	r3, r3, r2
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d100      	bne.n	8009d42 <_printf_float+0x18a>
 8009d40:	e78d      	b.n	8009c5e <_printf_float+0xa6>
 8009d42:	0023      	movs	r3, r4
 8009d44:	222d      	movs	r2, #45	; 0x2d
 8009d46:	3343      	adds	r3, #67	; 0x43
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e788      	b.n	8009c5e <_printf_float+0xa6>
 8009d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d4e:	2a47      	cmp	r2, #71	; 0x47
 8009d50:	d1b3      	bne.n	8009cba <_printf_float+0x102>
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1b1      	bne.n	8009cba <_printf_float+0x102>
 8009d56:	3301      	adds	r3, #1
 8009d58:	e7ae      	b.n	8009cb8 <_printf_float+0x100>
 8009d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5c:	2b66      	cmp	r3, #102	; 0x66
 8009d5e:	d11b      	bne.n	8009d98 <_printf_float+0x1e0>
 8009d60:	6863      	ldr	r3, [r4, #4]
 8009d62:	2900      	cmp	r1, #0
 8009d64:	dd09      	ble.n	8009d7a <_printf_float+0x1c2>
 8009d66:	6121      	str	r1, [r4, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d102      	bne.n	8009d72 <_printf_float+0x1ba>
 8009d6c:	6822      	ldr	r2, [r4, #0]
 8009d6e:	07d2      	lsls	r2, r2, #31
 8009d70:	d50b      	bpl.n	8009d8a <_printf_float+0x1d2>
 8009d72:	3301      	adds	r3, #1
 8009d74:	185b      	adds	r3, r3, r1
 8009d76:	6123      	str	r3, [r4, #16]
 8009d78:	e007      	b.n	8009d8a <_printf_float+0x1d2>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <_printf_float+0x1ce>
 8009d7e:	2201      	movs	r2, #1
 8009d80:	6821      	ldr	r1, [r4, #0]
 8009d82:	4211      	tst	r1, r2
 8009d84:	d000      	beq.n	8009d88 <_printf_float+0x1d0>
 8009d86:	1c9a      	adds	r2, r3, #2
 8009d88:	6122      	str	r2, [r4, #16]
 8009d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d8c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d8e:	2300      	movs	r3, #0
 8009d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d92:	e7cf      	b.n	8009d34 <_printf_float+0x17c>
 8009d94:	2367      	movs	r3, #103	; 0x67
 8009d96:	930a      	str	r3, [sp, #40]	; 0x28
 8009d98:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	db06      	blt.n	8009dae <_printf_float+0x1f6>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	6121      	str	r1, [r4, #16]
 8009da4:	07db      	lsls	r3, r3, #31
 8009da6:	d5f0      	bpl.n	8009d8a <_printf_float+0x1d2>
 8009da8:	3101      	adds	r1, #1
 8009daa:	6121      	str	r1, [r4, #16]
 8009dac:	e7ed      	b.n	8009d8a <_printf_float+0x1d2>
 8009dae:	2201      	movs	r2, #1
 8009db0:	2900      	cmp	r1, #0
 8009db2:	dc01      	bgt.n	8009db8 <_printf_float+0x200>
 8009db4:	1892      	adds	r2, r2, r2
 8009db6:	1a52      	subs	r2, r2, r1
 8009db8:	189b      	adds	r3, r3, r2
 8009dba:	e7dc      	b.n	8009d76 <_printf_float+0x1be>
 8009dbc:	6822      	ldr	r2, [r4, #0]
 8009dbe:	0553      	lsls	r3, r2, #21
 8009dc0:	d408      	bmi.n	8009dd4 <_printf_float+0x21c>
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	002a      	movs	r2, r5
 8009dc6:	0038      	movs	r0, r7
 8009dc8:	9908      	ldr	r1, [sp, #32]
 8009dca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009dcc:	47a8      	blx	r5
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d12a      	bne.n	8009e28 <_printf_float+0x270>
 8009dd2:	e74f      	b.n	8009c74 <_printf_float+0xbc>
 8009dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd6:	2b65      	cmp	r3, #101	; 0x65
 8009dd8:	d800      	bhi.n	8009ddc <_printf_float+0x224>
 8009dda:	e0ec      	b.n	8009fb6 <_printf_float+0x3fe>
 8009ddc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009dde:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009de0:	2200      	movs	r2, #0
 8009de2:	2300      	movs	r3, #0
 8009de4:	f7f6 fb32 	bl	800044c <__aeabi_dcmpeq>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d034      	beq.n	8009e56 <_printf_float+0x29e>
 8009dec:	2301      	movs	r3, #1
 8009dee:	0038      	movs	r0, r7
 8009df0:	4a37      	ldr	r2, [pc, #220]	; (8009ed0 <_printf_float+0x318>)
 8009df2:	9908      	ldr	r1, [sp, #32]
 8009df4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009df6:	47a8      	blx	r5
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d100      	bne.n	8009dfe <_printf_float+0x246>
 8009dfc:	e73a      	b.n	8009c74 <_printf_float+0xbc>
 8009dfe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e02:	429a      	cmp	r2, r3
 8009e04:	db02      	blt.n	8009e0c <_printf_float+0x254>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	07db      	lsls	r3, r3, #31
 8009e0a:	d50d      	bpl.n	8009e28 <_printf_float+0x270>
 8009e0c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009e0e:	0038      	movs	r0, r7
 8009e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e14:	9908      	ldr	r1, [sp, #32]
 8009e16:	47a8      	blx	r5
 8009e18:	2500      	movs	r5, #0
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d100      	bne.n	8009e20 <_printf_float+0x268>
 8009e1e:	e729      	b.n	8009c74 <_printf_float+0xbc>
 8009e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e22:	3b01      	subs	r3, #1
 8009e24:	42ab      	cmp	r3, r5
 8009e26:	dc0a      	bgt.n	8009e3e <_printf_float+0x286>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	079b      	lsls	r3, r3, #30
 8009e2c:	d500      	bpl.n	8009e30 <_printf_float+0x278>
 8009e2e:	e116      	b.n	800a05e <_printf_float+0x4a6>
 8009e30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e32:	68e0      	ldr	r0, [r4, #12]
 8009e34:	4298      	cmp	r0, r3
 8009e36:	db00      	blt.n	8009e3a <_printf_float+0x282>
 8009e38:	e71e      	b.n	8009c78 <_printf_float+0xc0>
 8009e3a:	0018      	movs	r0, r3
 8009e3c:	e71c      	b.n	8009c78 <_printf_float+0xc0>
 8009e3e:	0022      	movs	r2, r4
 8009e40:	2301      	movs	r3, #1
 8009e42:	0038      	movs	r0, r7
 8009e44:	9908      	ldr	r1, [sp, #32]
 8009e46:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e48:	321a      	adds	r2, #26
 8009e4a:	47b0      	blx	r6
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d100      	bne.n	8009e52 <_printf_float+0x29a>
 8009e50:	e710      	b.n	8009c74 <_printf_float+0xbc>
 8009e52:	3501      	adds	r5, #1
 8009e54:	e7e4      	b.n	8009e20 <_printf_float+0x268>
 8009e56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	dc3b      	bgt.n	8009ed4 <_printf_float+0x31c>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	0038      	movs	r0, r7
 8009e60:	4a1b      	ldr	r2, [pc, #108]	; (8009ed0 <_printf_float+0x318>)
 8009e62:	9908      	ldr	r1, [sp, #32]
 8009e64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e66:	47b0      	blx	r6
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d100      	bne.n	8009e6e <_printf_float+0x2b6>
 8009e6c:	e702      	b.n	8009c74 <_printf_float+0xbc>
 8009e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e72:	4313      	orrs	r3, r2
 8009e74:	d102      	bne.n	8009e7c <_printf_float+0x2c4>
 8009e76:	6823      	ldr	r3, [r4, #0]
 8009e78:	07db      	lsls	r3, r3, #31
 8009e7a:	d5d5      	bpl.n	8009e28 <_printf_float+0x270>
 8009e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e7e:	0038      	movs	r0, r7
 8009e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e82:	9908      	ldr	r1, [sp, #32]
 8009e84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009e86:	47b0      	blx	r6
 8009e88:	2300      	movs	r3, #0
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d100      	bne.n	8009e90 <_printf_float+0x2d8>
 8009e8e:	e6f1      	b.n	8009c74 <_printf_float+0xbc>
 8009e90:	930a      	str	r3, [sp, #40]	; 0x28
 8009e92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e96:	425b      	negs	r3, r3
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	dc01      	bgt.n	8009ea0 <_printf_float+0x2e8>
 8009e9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e9e:	e791      	b.n	8009dc4 <_printf_float+0x20c>
 8009ea0:	0022      	movs	r2, r4
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	0038      	movs	r0, r7
 8009ea6:	9908      	ldr	r1, [sp, #32]
 8009ea8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009eaa:	321a      	adds	r2, #26
 8009eac:	47b0      	blx	r6
 8009eae:	3001      	adds	r0, #1
 8009eb0:	d100      	bne.n	8009eb4 <_printf_float+0x2fc>
 8009eb2:	e6df      	b.n	8009c74 <_printf_float+0xbc>
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	e7ea      	b.n	8009e90 <_printf_float+0x2d8>
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	7fefffff 	.word	0x7fefffff
 8009ec0:	0800c760 	.word	0x0800c760
 8009ec4:	0800c764 	.word	0x0800c764
 8009ec8:	0800c768 	.word	0x0800c768
 8009ecc:	0800c76c 	.word	0x0800c76c
 8009ed0:	0800c770 	.word	0x0800c770
 8009ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ed6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ed8:	920a      	str	r2, [sp, #40]	; 0x28
 8009eda:	429a      	cmp	r2, r3
 8009edc:	dd00      	ble.n	8009ee0 <_printf_float+0x328>
 8009ede:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	dc3d      	bgt.n	8009f62 <_printf_float+0x3aa>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	930e      	str	r3, [sp, #56]	; 0x38
 8009eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eec:	43db      	mvns	r3, r3
 8009eee:	17db      	asrs	r3, r3, #31
 8009ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ef8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009efa:	4013      	ands	r3, r2
 8009efc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f02:	4293      	cmp	r3, r2
 8009f04:	dc36      	bgt.n	8009f74 <_printf_float+0x3bc>
 8009f06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	db40      	blt.n	8009f90 <_printf_float+0x3d8>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	07db      	lsls	r3, r3, #31
 8009f12:	d43d      	bmi.n	8009f90 <_printf_float+0x3d8>
 8009f14:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f1a:	1af3      	subs	r3, r6, r3
 8009f1c:	1ab6      	subs	r6, r6, r2
 8009f1e:	429e      	cmp	r6, r3
 8009f20:	dd00      	ble.n	8009f24 <_printf_float+0x36c>
 8009f22:	001e      	movs	r6, r3
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	dc3c      	bgt.n	8009fa2 <_printf_float+0x3ea>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009f2c:	43f3      	mvns	r3, r6
 8009f2e:	17db      	asrs	r3, r3, #31
 8009f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f32:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f3a:	4032      	ands	r2, r6
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f40:	4293      	cmp	r3, r2
 8009f42:	dc00      	bgt.n	8009f46 <_printf_float+0x38e>
 8009f44:	e770      	b.n	8009e28 <_printf_float+0x270>
 8009f46:	0022      	movs	r2, r4
 8009f48:	2301      	movs	r3, #1
 8009f4a:	0038      	movs	r0, r7
 8009f4c:	9908      	ldr	r1, [sp, #32]
 8009f4e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f50:	321a      	adds	r2, #26
 8009f52:	47a8      	blx	r5
 8009f54:	3001      	adds	r0, #1
 8009f56:	d100      	bne.n	8009f5a <_printf_float+0x3a2>
 8009f58:	e68c      	b.n	8009c74 <_printf_float+0xbc>
 8009f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f60:	e7e7      	b.n	8009f32 <_printf_float+0x37a>
 8009f62:	002a      	movs	r2, r5
 8009f64:	0038      	movs	r0, r7
 8009f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f68:	9908      	ldr	r1, [sp, #32]
 8009f6a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f6c:	47b0      	blx	r6
 8009f6e:	3001      	adds	r0, #1
 8009f70:	d1b9      	bne.n	8009ee6 <_printf_float+0x32e>
 8009f72:	e67f      	b.n	8009c74 <_printf_float+0xbc>
 8009f74:	0022      	movs	r2, r4
 8009f76:	2301      	movs	r3, #1
 8009f78:	0038      	movs	r0, r7
 8009f7a:	9908      	ldr	r1, [sp, #32]
 8009f7c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f7e:	321a      	adds	r2, #26
 8009f80:	47b0      	blx	r6
 8009f82:	3001      	adds	r0, #1
 8009f84:	d100      	bne.n	8009f88 <_printf_float+0x3d0>
 8009f86:	e675      	b.n	8009c74 <_printf_float+0xbc>
 8009f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8009f8e:	e7b0      	b.n	8009ef2 <_printf_float+0x33a>
 8009f90:	0038      	movs	r0, r7
 8009f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f96:	9908      	ldr	r1, [sp, #32]
 8009f98:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009f9a:	47b0      	blx	r6
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d1b9      	bne.n	8009f14 <_printf_float+0x35c>
 8009fa0:	e668      	b.n	8009c74 <_printf_float+0xbc>
 8009fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa4:	0038      	movs	r0, r7
 8009fa6:	18ea      	adds	r2, r5, r3
 8009fa8:	9908      	ldr	r1, [sp, #32]
 8009faa:	0033      	movs	r3, r6
 8009fac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009fae:	47a8      	blx	r5
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d1b9      	bne.n	8009f28 <_printf_float+0x370>
 8009fb4:	e65e      	b.n	8009c74 <_printf_float+0xbc>
 8009fb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	dc02      	bgt.n	8009fc2 <_printf_float+0x40a>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	421a      	tst	r2, r3
 8009fc0:	d03a      	beq.n	800a038 <_printf_float+0x480>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	002a      	movs	r2, r5
 8009fc6:	0038      	movs	r0, r7
 8009fc8:	9908      	ldr	r1, [sp, #32]
 8009fca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fcc:	47b0      	blx	r6
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d100      	bne.n	8009fd4 <_printf_float+0x41c>
 8009fd2:	e64f      	b.n	8009c74 <_printf_float+0xbc>
 8009fd4:	0038      	movs	r0, r7
 8009fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fda:	9908      	ldr	r1, [sp, #32]
 8009fdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009fde:	47b0      	blx	r6
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d100      	bne.n	8009fe6 <_printf_float+0x42e>
 8009fe4:	e646      	b.n	8009c74 <_printf_float+0xbc>
 8009fe6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009fe8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009fea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fec:	2200      	movs	r2, #0
 8009fee:	001e      	movs	r6, r3
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f7f6 fa2b 	bl	800044c <__aeabi_dcmpeq>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d11c      	bne.n	800a034 <_printf_float+0x47c>
 8009ffa:	0033      	movs	r3, r6
 8009ffc:	1c6a      	adds	r2, r5, #1
 8009ffe:	3b01      	subs	r3, #1
 800a000:	0038      	movs	r0, r7
 800a002:	9908      	ldr	r1, [sp, #32]
 800a004:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a006:	47a8      	blx	r5
 800a008:	3001      	adds	r0, #1
 800a00a:	d10f      	bne.n	800a02c <_printf_float+0x474>
 800a00c:	e632      	b.n	8009c74 <_printf_float+0xbc>
 800a00e:	0022      	movs	r2, r4
 800a010:	2301      	movs	r3, #1
 800a012:	0038      	movs	r0, r7
 800a014:	9908      	ldr	r1, [sp, #32]
 800a016:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a018:	321a      	adds	r2, #26
 800a01a:	47b0      	blx	r6
 800a01c:	3001      	adds	r0, #1
 800a01e:	d100      	bne.n	800a022 <_printf_float+0x46a>
 800a020:	e628      	b.n	8009c74 <_printf_float+0xbc>
 800a022:	3501      	adds	r5, #1
 800a024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a026:	3b01      	subs	r3, #1
 800a028:	42ab      	cmp	r3, r5
 800a02a:	dcf0      	bgt.n	800a00e <_printf_float+0x456>
 800a02c:	0022      	movs	r2, r4
 800a02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a030:	3250      	adds	r2, #80	; 0x50
 800a032:	e6c8      	b.n	8009dc6 <_printf_float+0x20e>
 800a034:	2500      	movs	r5, #0
 800a036:	e7f5      	b.n	800a024 <_printf_float+0x46c>
 800a038:	002a      	movs	r2, r5
 800a03a:	e7e1      	b.n	800a000 <_printf_float+0x448>
 800a03c:	0022      	movs	r2, r4
 800a03e:	2301      	movs	r3, #1
 800a040:	0038      	movs	r0, r7
 800a042:	9908      	ldr	r1, [sp, #32]
 800a044:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a046:	3219      	adds	r2, #25
 800a048:	47b0      	blx	r6
 800a04a:	3001      	adds	r0, #1
 800a04c:	d100      	bne.n	800a050 <_printf_float+0x498>
 800a04e:	e611      	b.n	8009c74 <_printf_float+0xbc>
 800a050:	3501      	adds	r5, #1
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dcef      	bgt.n	800a03c <_printf_float+0x484>
 800a05c:	e6e8      	b.n	8009e30 <_printf_float+0x278>
 800a05e:	2500      	movs	r5, #0
 800a060:	e7f7      	b.n	800a052 <_printf_float+0x49a>
 800a062:	46c0      	nop			; (mov r8, r8)

0800a064 <_printf_common>:
 800a064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a066:	0016      	movs	r6, r2
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	688a      	ldr	r2, [r1, #8]
 800a06c:	690b      	ldr	r3, [r1, #16]
 800a06e:	000c      	movs	r4, r1
 800a070:	9000      	str	r0, [sp, #0]
 800a072:	4293      	cmp	r3, r2
 800a074:	da00      	bge.n	800a078 <_printf_common+0x14>
 800a076:	0013      	movs	r3, r2
 800a078:	0022      	movs	r2, r4
 800a07a:	6033      	str	r3, [r6, #0]
 800a07c:	3243      	adds	r2, #67	; 0x43
 800a07e:	7812      	ldrb	r2, [r2, #0]
 800a080:	2a00      	cmp	r2, #0
 800a082:	d001      	beq.n	800a088 <_printf_common+0x24>
 800a084:	3301      	adds	r3, #1
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	069b      	lsls	r3, r3, #26
 800a08c:	d502      	bpl.n	800a094 <_printf_common+0x30>
 800a08e:	6833      	ldr	r3, [r6, #0]
 800a090:	3302      	adds	r3, #2
 800a092:	6033      	str	r3, [r6, #0]
 800a094:	6822      	ldr	r2, [r4, #0]
 800a096:	2306      	movs	r3, #6
 800a098:	0015      	movs	r5, r2
 800a09a:	401d      	ands	r5, r3
 800a09c:	421a      	tst	r2, r3
 800a09e:	d027      	beq.n	800a0f0 <_printf_common+0x8c>
 800a0a0:	0023      	movs	r3, r4
 800a0a2:	3343      	adds	r3, #67	; 0x43
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	1e5a      	subs	r2, r3, #1
 800a0a8:	4193      	sbcs	r3, r2
 800a0aa:	6822      	ldr	r2, [r4, #0]
 800a0ac:	0692      	lsls	r2, r2, #26
 800a0ae:	d430      	bmi.n	800a112 <_printf_common+0xae>
 800a0b0:	0022      	movs	r2, r4
 800a0b2:	9901      	ldr	r1, [sp, #4]
 800a0b4:	9800      	ldr	r0, [sp, #0]
 800a0b6:	9d08      	ldr	r5, [sp, #32]
 800a0b8:	3243      	adds	r2, #67	; 0x43
 800a0ba:	47a8      	blx	r5
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d025      	beq.n	800a10c <_printf_common+0xa8>
 800a0c0:	2206      	movs	r2, #6
 800a0c2:	6823      	ldr	r3, [r4, #0]
 800a0c4:	2500      	movs	r5, #0
 800a0c6:	4013      	ands	r3, r2
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	d105      	bne.n	800a0d8 <_printf_common+0x74>
 800a0cc:	6833      	ldr	r3, [r6, #0]
 800a0ce:	68e5      	ldr	r5, [r4, #12]
 800a0d0:	1aed      	subs	r5, r5, r3
 800a0d2:	43eb      	mvns	r3, r5
 800a0d4:	17db      	asrs	r3, r3, #31
 800a0d6:	401d      	ands	r5, r3
 800a0d8:	68a3      	ldr	r3, [r4, #8]
 800a0da:	6922      	ldr	r2, [r4, #16]
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	dd01      	ble.n	800a0e4 <_printf_common+0x80>
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	18ed      	adds	r5, r5, r3
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	42b5      	cmp	r5, r6
 800a0e8:	d120      	bne.n	800a12c <_printf_common+0xc8>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e010      	b.n	800a110 <_printf_common+0xac>
 800a0ee:	3501      	adds	r5, #1
 800a0f0:	68e3      	ldr	r3, [r4, #12]
 800a0f2:	6832      	ldr	r2, [r6, #0]
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	42ab      	cmp	r3, r5
 800a0f8:	ddd2      	ble.n	800a0a0 <_printf_common+0x3c>
 800a0fa:	0022      	movs	r2, r4
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	9901      	ldr	r1, [sp, #4]
 800a100:	9800      	ldr	r0, [sp, #0]
 800a102:	9f08      	ldr	r7, [sp, #32]
 800a104:	3219      	adds	r2, #25
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	d1f0      	bne.n	800a0ee <_printf_common+0x8a>
 800a10c:	2001      	movs	r0, #1
 800a10e:	4240      	negs	r0, r0
 800a110:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a112:	2030      	movs	r0, #48	; 0x30
 800a114:	18e1      	adds	r1, r4, r3
 800a116:	3143      	adds	r1, #67	; 0x43
 800a118:	7008      	strb	r0, [r1, #0]
 800a11a:	0021      	movs	r1, r4
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	3145      	adds	r1, #69	; 0x45
 800a120:	7809      	ldrb	r1, [r1, #0]
 800a122:	18a2      	adds	r2, r4, r2
 800a124:	3243      	adds	r2, #67	; 0x43
 800a126:	3302      	adds	r3, #2
 800a128:	7011      	strb	r1, [r2, #0]
 800a12a:	e7c1      	b.n	800a0b0 <_printf_common+0x4c>
 800a12c:	0022      	movs	r2, r4
 800a12e:	2301      	movs	r3, #1
 800a130:	9901      	ldr	r1, [sp, #4]
 800a132:	9800      	ldr	r0, [sp, #0]
 800a134:	9f08      	ldr	r7, [sp, #32]
 800a136:	321a      	adds	r2, #26
 800a138:	47b8      	blx	r7
 800a13a:	3001      	adds	r0, #1
 800a13c:	d0e6      	beq.n	800a10c <_printf_common+0xa8>
 800a13e:	3601      	adds	r6, #1
 800a140:	e7d1      	b.n	800a0e6 <_printf_common+0x82>
	...

0800a144 <_printf_i>:
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	b08b      	sub	sp, #44	; 0x2c
 800a148:	9206      	str	r2, [sp, #24]
 800a14a:	000a      	movs	r2, r1
 800a14c:	3243      	adds	r2, #67	; 0x43
 800a14e:	9307      	str	r3, [sp, #28]
 800a150:	9005      	str	r0, [sp, #20]
 800a152:	9204      	str	r2, [sp, #16]
 800a154:	7e0a      	ldrb	r2, [r1, #24]
 800a156:	000c      	movs	r4, r1
 800a158:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a15a:	2a78      	cmp	r2, #120	; 0x78
 800a15c:	d809      	bhi.n	800a172 <_printf_i+0x2e>
 800a15e:	2a62      	cmp	r2, #98	; 0x62
 800a160:	d80b      	bhi.n	800a17a <_printf_i+0x36>
 800a162:	2a00      	cmp	r2, #0
 800a164:	d100      	bne.n	800a168 <_printf_i+0x24>
 800a166:	e0be      	b.n	800a2e6 <_printf_i+0x1a2>
 800a168:	497c      	ldr	r1, [pc, #496]	; (800a35c <_printf_i+0x218>)
 800a16a:	9103      	str	r1, [sp, #12]
 800a16c:	2a58      	cmp	r2, #88	; 0x58
 800a16e:	d100      	bne.n	800a172 <_printf_i+0x2e>
 800a170:	e093      	b.n	800a29a <_printf_i+0x156>
 800a172:	0026      	movs	r6, r4
 800a174:	3642      	adds	r6, #66	; 0x42
 800a176:	7032      	strb	r2, [r6, #0]
 800a178:	e022      	b.n	800a1c0 <_printf_i+0x7c>
 800a17a:	0010      	movs	r0, r2
 800a17c:	3863      	subs	r0, #99	; 0x63
 800a17e:	2815      	cmp	r0, #21
 800a180:	d8f7      	bhi.n	800a172 <_printf_i+0x2e>
 800a182:	f7f5 ffd3 	bl	800012c <__gnu_thumb1_case_shi>
 800a186:	0016      	.short	0x0016
 800a188:	fff6001f 	.word	0xfff6001f
 800a18c:	fff6fff6 	.word	0xfff6fff6
 800a190:	001ffff6 	.word	0x001ffff6
 800a194:	fff6fff6 	.word	0xfff6fff6
 800a198:	fff6fff6 	.word	0xfff6fff6
 800a19c:	003600a3 	.word	0x003600a3
 800a1a0:	fff60083 	.word	0xfff60083
 800a1a4:	00b4fff6 	.word	0x00b4fff6
 800a1a8:	0036fff6 	.word	0x0036fff6
 800a1ac:	fff6fff6 	.word	0xfff6fff6
 800a1b0:	0087      	.short	0x0087
 800a1b2:	0026      	movs	r6, r4
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	3642      	adds	r6, #66	; 0x42
 800a1b8:	1d11      	adds	r1, r2, #4
 800a1ba:	6019      	str	r1, [r3, #0]
 800a1bc:	6813      	ldr	r3, [r2, #0]
 800a1be:	7033      	strb	r3, [r6, #0]
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e0a2      	b.n	800a30a <_printf_i+0x1c6>
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	6809      	ldr	r1, [r1, #0]
 800a1c8:	1d02      	adds	r2, r0, #4
 800a1ca:	060d      	lsls	r5, r1, #24
 800a1cc:	d50b      	bpl.n	800a1e6 <_printf_i+0xa2>
 800a1ce:	6805      	ldr	r5, [r0, #0]
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	2d00      	cmp	r5, #0
 800a1d4:	da03      	bge.n	800a1de <_printf_i+0x9a>
 800a1d6:	232d      	movs	r3, #45	; 0x2d
 800a1d8:	9a04      	ldr	r2, [sp, #16]
 800a1da:	426d      	negs	r5, r5
 800a1dc:	7013      	strb	r3, [r2, #0]
 800a1de:	4b5f      	ldr	r3, [pc, #380]	; (800a35c <_printf_i+0x218>)
 800a1e0:	270a      	movs	r7, #10
 800a1e2:	9303      	str	r3, [sp, #12]
 800a1e4:	e01b      	b.n	800a21e <_printf_i+0xda>
 800a1e6:	6805      	ldr	r5, [r0, #0]
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	0649      	lsls	r1, r1, #25
 800a1ec:	d5f1      	bpl.n	800a1d2 <_printf_i+0x8e>
 800a1ee:	b22d      	sxth	r5, r5
 800a1f0:	e7ef      	b.n	800a1d2 <_printf_i+0x8e>
 800a1f2:	680d      	ldr	r5, [r1, #0]
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	1d08      	adds	r0, r1, #4
 800a1f8:	6018      	str	r0, [r3, #0]
 800a1fa:	062e      	lsls	r6, r5, #24
 800a1fc:	d501      	bpl.n	800a202 <_printf_i+0xbe>
 800a1fe:	680d      	ldr	r5, [r1, #0]
 800a200:	e003      	b.n	800a20a <_printf_i+0xc6>
 800a202:	066d      	lsls	r5, r5, #25
 800a204:	d5fb      	bpl.n	800a1fe <_printf_i+0xba>
 800a206:	680d      	ldr	r5, [r1, #0]
 800a208:	b2ad      	uxth	r5, r5
 800a20a:	4b54      	ldr	r3, [pc, #336]	; (800a35c <_printf_i+0x218>)
 800a20c:	2708      	movs	r7, #8
 800a20e:	9303      	str	r3, [sp, #12]
 800a210:	2a6f      	cmp	r2, #111	; 0x6f
 800a212:	d000      	beq.n	800a216 <_printf_i+0xd2>
 800a214:	3702      	adds	r7, #2
 800a216:	0023      	movs	r3, r4
 800a218:	2200      	movs	r2, #0
 800a21a:	3343      	adds	r3, #67	; 0x43
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	60a3      	str	r3, [r4, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	db03      	blt.n	800a22e <_printf_i+0xea>
 800a226:	2104      	movs	r1, #4
 800a228:	6822      	ldr	r2, [r4, #0]
 800a22a:	438a      	bics	r2, r1
 800a22c:	6022      	str	r2, [r4, #0]
 800a22e:	2d00      	cmp	r5, #0
 800a230:	d102      	bne.n	800a238 <_printf_i+0xf4>
 800a232:	9e04      	ldr	r6, [sp, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00c      	beq.n	800a252 <_printf_i+0x10e>
 800a238:	9e04      	ldr	r6, [sp, #16]
 800a23a:	0028      	movs	r0, r5
 800a23c:	0039      	movs	r1, r7
 800a23e:	f7f6 f805 	bl	800024c <__aeabi_uidivmod>
 800a242:	9b03      	ldr	r3, [sp, #12]
 800a244:	3e01      	subs	r6, #1
 800a246:	5c5b      	ldrb	r3, [r3, r1]
 800a248:	7033      	strb	r3, [r6, #0]
 800a24a:	002b      	movs	r3, r5
 800a24c:	0005      	movs	r5, r0
 800a24e:	429f      	cmp	r7, r3
 800a250:	d9f3      	bls.n	800a23a <_printf_i+0xf6>
 800a252:	2f08      	cmp	r7, #8
 800a254:	d109      	bne.n	800a26a <_printf_i+0x126>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	07db      	lsls	r3, r3, #31
 800a25a:	d506      	bpl.n	800a26a <_printf_i+0x126>
 800a25c:	6862      	ldr	r2, [r4, #4]
 800a25e:	6923      	ldr	r3, [r4, #16]
 800a260:	429a      	cmp	r2, r3
 800a262:	dc02      	bgt.n	800a26a <_printf_i+0x126>
 800a264:	2330      	movs	r3, #48	; 0x30
 800a266:	3e01      	subs	r6, #1
 800a268:	7033      	strb	r3, [r6, #0]
 800a26a:	9b04      	ldr	r3, [sp, #16]
 800a26c:	1b9b      	subs	r3, r3, r6
 800a26e:	6123      	str	r3, [r4, #16]
 800a270:	9b07      	ldr	r3, [sp, #28]
 800a272:	0021      	movs	r1, r4
 800a274:	9300      	str	r3, [sp, #0]
 800a276:	9805      	ldr	r0, [sp, #20]
 800a278:	9b06      	ldr	r3, [sp, #24]
 800a27a:	aa09      	add	r2, sp, #36	; 0x24
 800a27c:	f7ff fef2 	bl	800a064 <_printf_common>
 800a280:	3001      	adds	r0, #1
 800a282:	d147      	bne.n	800a314 <_printf_i+0x1d0>
 800a284:	2001      	movs	r0, #1
 800a286:	4240      	negs	r0, r0
 800a288:	b00b      	add	sp, #44	; 0x2c
 800a28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a28c:	2220      	movs	r2, #32
 800a28e:	6809      	ldr	r1, [r1, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	2278      	movs	r2, #120	; 0x78
 800a296:	4932      	ldr	r1, [pc, #200]	; (800a360 <_printf_i+0x21c>)
 800a298:	9103      	str	r1, [sp, #12]
 800a29a:	0021      	movs	r1, r4
 800a29c:	3145      	adds	r1, #69	; 0x45
 800a29e:	700a      	strb	r2, [r1, #0]
 800a2a0:	6819      	ldr	r1, [r3, #0]
 800a2a2:	6822      	ldr	r2, [r4, #0]
 800a2a4:	c920      	ldmia	r1!, {r5}
 800a2a6:	0610      	lsls	r0, r2, #24
 800a2a8:	d402      	bmi.n	800a2b0 <_printf_i+0x16c>
 800a2aa:	0650      	lsls	r0, r2, #25
 800a2ac:	d500      	bpl.n	800a2b0 <_printf_i+0x16c>
 800a2ae:	b2ad      	uxth	r5, r5
 800a2b0:	6019      	str	r1, [r3, #0]
 800a2b2:	07d3      	lsls	r3, r2, #31
 800a2b4:	d502      	bpl.n	800a2bc <_printf_i+0x178>
 800a2b6:	2320      	movs	r3, #32
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	2710      	movs	r7, #16
 800a2be:	2d00      	cmp	r5, #0
 800a2c0:	d1a9      	bne.n	800a216 <_printf_i+0xd2>
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	4393      	bics	r3, r2
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	e7a4      	b.n	800a216 <_printf_i+0xd2>
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	680d      	ldr	r5, [r1, #0]
 800a2d0:	1d10      	adds	r0, r2, #4
 800a2d2:	6949      	ldr	r1, [r1, #20]
 800a2d4:	6018      	str	r0, [r3, #0]
 800a2d6:	6813      	ldr	r3, [r2, #0]
 800a2d8:	062e      	lsls	r6, r5, #24
 800a2da:	d501      	bpl.n	800a2e0 <_printf_i+0x19c>
 800a2dc:	6019      	str	r1, [r3, #0]
 800a2de:	e002      	b.n	800a2e6 <_printf_i+0x1a2>
 800a2e0:	066d      	lsls	r5, r5, #25
 800a2e2:	d5fb      	bpl.n	800a2dc <_printf_i+0x198>
 800a2e4:	8019      	strh	r1, [r3, #0]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	9e04      	ldr	r6, [sp, #16]
 800a2ea:	6123      	str	r3, [r4, #16]
 800a2ec:	e7c0      	b.n	800a270 <_printf_i+0x12c>
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	1d11      	adds	r1, r2, #4
 800a2f2:	6019      	str	r1, [r3, #0]
 800a2f4:	6816      	ldr	r6, [r2, #0]
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	0030      	movs	r0, r6
 800a2fa:	6862      	ldr	r2, [r4, #4]
 800a2fc:	f000 fb4d 	bl	800a99a <memchr>
 800a300:	2800      	cmp	r0, #0
 800a302:	d001      	beq.n	800a308 <_printf_i+0x1c4>
 800a304:	1b80      	subs	r0, r0, r6
 800a306:	6060      	str	r0, [r4, #4]
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	6123      	str	r3, [r4, #16]
 800a30c:	2300      	movs	r3, #0
 800a30e:	9a04      	ldr	r2, [sp, #16]
 800a310:	7013      	strb	r3, [r2, #0]
 800a312:	e7ad      	b.n	800a270 <_printf_i+0x12c>
 800a314:	0032      	movs	r2, r6
 800a316:	6923      	ldr	r3, [r4, #16]
 800a318:	9906      	ldr	r1, [sp, #24]
 800a31a:	9805      	ldr	r0, [sp, #20]
 800a31c:	9d07      	ldr	r5, [sp, #28]
 800a31e:	47a8      	blx	r5
 800a320:	3001      	adds	r0, #1
 800a322:	d0af      	beq.n	800a284 <_printf_i+0x140>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	079b      	lsls	r3, r3, #30
 800a328:	d415      	bmi.n	800a356 <_printf_i+0x212>
 800a32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a32c:	68e0      	ldr	r0, [r4, #12]
 800a32e:	4298      	cmp	r0, r3
 800a330:	daaa      	bge.n	800a288 <_printf_i+0x144>
 800a332:	0018      	movs	r0, r3
 800a334:	e7a8      	b.n	800a288 <_printf_i+0x144>
 800a336:	0022      	movs	r2, r4
 800a338:	2301      	movs	r3, #1
 800a33a:	9906      	ldr	r1, [sp, #24]
 800a33c:	9805      	ldr	r0, [sp, #20]
 800a33e:	9e07      	ldr	r6, [sp, #28]
 800a340:	3219      	adds	r2, #25
 800a342:	47b0      	blx	r6
 800a344:	3001      	adds	r0, #1
 800a346:	d09d      	beq.n	800a284 <_printf_i+0x140>
 800a348:	3501      	adds	r5, #1
 800a34a:	68e3      	ldr	r3, [r4, #12]
 800a34c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a34e:	1a9b      	subs	r3, r3, r2
 800a350:	42ab      	cmp	r3, r5
 800a352:	dcf0      	bgt.n	800a336 <_printf_i+0x1f2>
 800a354:	e7e9      	b.n	800a32a <_printf_i+0x1e6>
 800a356:	2500      	movs	r5, #0
 800a358:	e7f7      	b.n	800a34a <_printf_i+0x206>
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	0800c772 	.word	0x0800c772
 800a360:	0800c783 	.word	0x0800c783

0800a364 <std>:
 800a364:	2300      	movs	r3, #0
 800a366:	b510      	push	{r4, lr}
 800a368:	0004      	movs	r4, r0
 800a36a:	6003      	str	r3, [r0, #0]
 800a36c:	6043      	str	r3, [r0, #4]
 800a36e:	6083      	str	r3, [r0, #8]
 800a370:	8181      	strh	r1, [r0, #12]
 800a372:	6643      	str	r3, [r0, #100]	; 0x64
 800a374:	81c2      	strh	r2, [r0, #14]
 800a376:	6103      	str	r3, [r0, #16]
 800a378:	6143      	str	r3, [r0, #20]
 800a37a:	6183      	str	r3, [r0, #24]
 800a37c:	0019      	movs	r1, r3
 800a37e:	2208      	movs	r2, #8
 800a380:	305c      	adds	r0, #92	; 0x5c
 800a382:	f000 fa71 	bl	800a868 <memset>
 800a386:	4b0b      	ldr	r3, [pc, #44]	; (800a3b4 <std+0x50>)
 800a388:	6224      	str	r4, [r4, #32]
 800a38a:	6263      	str	r3, [r4, #36]	; 0x24
 800a38c:	4b0a      	ldr	r3, [pc, #40]	; (800a3b8 <std+0x54>)
 800a38e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a390:	4b0a      	ldr	r3, [pc, #40]	; (800a3bc <std+0x58>)
 800a392:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a394:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <std+0x5c>)
 800a396:	6323      	str	r3, [r4, #48]	; 0x30
 800a398:	4b0a      	ldr	r3, [pc, #40]	; (800a3c4 <std+0x60>)
 800a39a:	429c      	cmp	r4, r3
 800a39c:	d005      	beq.n	800a3aa <std+0x46>
 800a39e:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <std+0x64>)
 800a3a0:	429c      	cmp	r4, r3
 800a3a2:	d002      	beq.n	800a3aa <std+0x46>
 800a3a4:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <std+0x68>)
 800a3a6:	429c      	cmp	r4, r3
 800a3a8:	d103      	bne.n	800a3b2 <std+0x4e>
 800a3aa:	0020      	movs	r0, r4
 800a3ac:	3058      	adds	r0, #88	; 0x58
 800a3ae:	f000 faf1 	bl	800a994 <__retarget_lock_init_recursive>
 800a3b2:	bd10      	pop	{r4, pc}
 800a3b4:	0800a685 	.word	0x0800a685
 800a3b8:	0800a6ad 	.word	0x0800a6ad
 800a3bc:	0800a6e5 	.word	0x0800a6e5
 800a3c0:	0800a711 	.word	0x0800a711
 800a3c4:	20000924 	.word	0x20000924
 800a3c8:	2000098c 	.word	0x2000098c
 800a3cc:	200009f4 	.word	0x200009f4

0800a3d0 <stdio_exit_handler>:
 800a3d0:	b510      	push	{r4, lr}
 800a3d2:	4a03      	ldr	r2, [pc, #12]	; (800a3e0 <stdio_exit_handler+0x10>)
 800a3d4:	4903      	ldr	r1, [pc, #12]	; (800a3e4 <stdio_exit_handler+0x14>)
 800a3d6:	4804      	ldr	r0, [pc, #16]	; (800a3e8 <stdio_exit_handler+0x18>)
 800a3d8:	f000 f86c 	bl	800a4b4 <_fwalk_sglue>
 800a3dc:	bd10      	pop	{r4, pc}
 800a3de:	46c0      	nop			; (mov r8, r8)
 800a3e0:	2000019c 	.word	0x2000019c
 800a3e4:	0800c261 	.word	0x0800c261
 800a3e8:	200001a8 	.word	0x200001a8

0800a3ec <cleanup_stdio>:
 800a3ec:	6841      	ldr	r1, [r0, #4]
 800a3ee:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <cleanup_stdio+0x30>)
 800a3f0:	b510      	push	{r4, lr}
 800a3f2:	0004      	movs	r4, r0
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	d001      	beq.n	800a3fc <cleanup_stdio+0x10>
 800a3f8:	f001 ff32 	bl	800c260 <_fflush_r>
 800a3fc:	68a1      	ldr	r1, [r4, #8]
 800a3fe:	4b08      	ldr	r3, [pc, #32]	; (800a420 <cleanup_stdio+0x34>)
 800a400:	4299      	cmp	r1, r3
 800a402:	d002      	beq.n	800a40a <cleanup_stdio+0x1e>
 800a404:	0020      	movs	r0, r4
 800a406:	f001 ff2b 	bl	800c260 <_fflush_r>
 800a40a:	68e1      	ldr	r1, [r4, #12]
 800a40c:	4b05      	ldr	r3, [pc, #20]	; (800a424 <cleanup_stdio+0x38>)
 800a40e:	4299      	cmp	r1, r3
 800a410:	d002      	beq.n	800a418 <cleanup_stdio+0x2c>
 800a412:	0020      	movs	r0, r4
 800a414:	f001 ff24 	bl	800c260 <_fflush_r>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	20000924 	.word	0x20000924
 800a420:	2000098c 	.word	0x2000098c
 800a424:	200009f4 	.word	0x200009f4

0800a428 <global_stdio_init.part.0>:
 800a428:	b510      	push	{r4, lr}
 800a42a:	4b09      	ldr	r3, [pc, #36]	; (800a450 <global_stdio_init.part.0+0x28>)
 800a42c:	4a09      	ldr	r2, [pc, #36]	; (800a454 <global_stdio_init.part.0+0x2c>)
 800a42e:	2104      	movs	r1, #4
 800a430:	601a      	str	r2, [r3, #0]
 800a432:	4809      	ldr	r0, [pc, #36]	; (800a458 <global_stdio_init.part.0+0x30>)
 800a434:	2200      	movs	r2, #0
 800a436:	f7ff ff95 	bl	800a364 <std>
 800a43a:	2201      	movs	r2, #1
 800a43c:	2109      	movs	r1, #9
 800a43e:	4807      	ldr	r0, [pc, #28]	; (800a45c <global_stdio_init.part.0+0x34>)
 800a440:	f7ff ff90 	bl	800a364 <std>
 800a444:	2202      	movs	r2, #2
 800a446:	2112      	movs	r1, #18
 800a448:	4805      	ldr	r0, [pc, #20]	; (800a460 <global_stdio_init.part.0+0x38>)
 800a44a:	f7ff ff8b 	bl	800a364 <std>
 800a44e:	bd10      	pop	{r4, pc}
 800a450:	20000a5c 	.word	0x20000a5c
 800a454:	0800a3d1 	.word	0x0800a3d1
 800a458:	20000924 	.word	0x20000924
 800a45c:	2000098c 	.word	0x2000098c
 800a460:	200009f4 	.word	0x200009f4

0800a464 <__sfp_lock_acquire>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4802      	ldr	r0, [pc, #8]	; (800a470 <__sfp_lock_acquire+0xc>)
 800a468:	f000 fa95 	bl	800a996 <__retarget_lock_acquire_recursive>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	20000a65 	.word	0x20000a65

0800a474 <__sfp_lock_release>:
 800a474:	b510      	push	{r4, lr}
 800a476:	4802      	ldr	r0, [pc, #8]	; (800a480 <__sfp_lock_release+0xc>)
 800a478:	f000 fa8e 	bl	800a998 <__retarget_lock_release_recursive>
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	20000a65 	.word	0x20000a65

0800a484 <__sinit>:
 800a484:	b510      	push	{r4, lr}
 800a486:	0004      	movs	r4, r0
 800a488:	f7ff ffec 	bl	800a464 <__sfp_lock_acquire>
 800a48c:	6a23      	ldr	r3, [r4, #32]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <__sinit+0x14>
 800a492:	f7ff ffef 	bl	800a474 <__sfp_lock_release>
 800a496:	bd10      	pop	{r4, pc}
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__sinit+0x28>)
 800a49a:	6223      	str	r3, [r4, #32]
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <__sinit+0x2c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f6      	bne.n	800a492 <__sinit+0xe>
 800a4a4:	f7ff ffc0 	bl	800a428 <global_stdio_init.part.0>
 800a4a8:	e7f3      	b.n	800a492 <__sinit+0xe>
 800a4aa:	46c0      	nop			; (mov r8, r8)
 800a4ac:	0800a3ed 	.word	0x0800a3ed
 800a4b0:	20000a5c 	.word	0x20000a5c

0800a4b4 <_fwalk_sglue>:
 800a4b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4b6:	0014      	movs	r4, r2
 800a4b8:	2600      	movs	r6, #0
 800a4ba:	9000      	str	r0, [sp, #0]
 800a4bc:	9101      	str	r1, [sp, #4]
 800a4be:	68a5      	ldr	r5, [r4, #8]
 800a4c0:	6867      	ldr	r7, [r4, #4]
 800a4c2:	3f01      	subs	r7, #1
 800a4c4:	d504      	bpl.n	800a4d0 <_fwalk_sglue+0x1c>
 800a4c6:	6824      	ldr	r4, [r4, #0]
 800a4c8:	2c00      	cmp	r4, #0
 800a4ca:	d1f8      	bne.n	800a4be <_fwalk_sglue+0xa>
 800a4cc:	0030      	movs	r0, r6
 800a4ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4d0:	89ab      	ldrh	r3, [r5, #12]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d908      	bls.n	800a4e8 <_fwalk_sglue+0x34>
 800a4d6:	220e      	movs	r2, #14
 800a4d8:	5eab      	ldrsh	r3, [r5, r2]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	d004      	beq.n	800a4e8 <_fwalk_sglue+0x34>
 800a4de:	0029      	movs	r1, r5
 800a4e0:	9800      	ldr	r0, [sp, #0]
 800a4e2:	9b01      	ldr	r3, [sp, #4]
 800a4e4:	4798      	blx	r3
 800a4e6:	4306      	orrs	r6, r0
 800a4e8:	3568      	adds	r5, #104	; 0x68
 800a4ea:	e7ea      	b.n	800a4c2 <_fwalk_sglue+0xe>

0800a4ec <_fwrite_r>:
 800a4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ee:	4353      	muls	r3, r2
 800a4f0:	0005      	movs	r5, r0
 800a4f2:	0017      	movs	r7, r2
 800a4f4:	9c08      	ldr	r4, [sp, #32]
 800a4f6:	9101      	str	r1, [sp, #4]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d004      	beq.n	800a508 <_fwrite_r+0x1c>
 800a4fe:	6a03      	ldr	r3, [r0, #32]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <_fwrite_r+0x1c>
 800a504:	f7ff ffbe 	bl	800a484 <__sinit>
 800a508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a50a:	07db      	lsls	r3, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_fwrite_r+0x2e>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	059b      	lsls	r3, r3, #22
 800a512:	d402      	bmi.n	800a51a <_fwrite_r+0x2e>
 800a514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a516:	f000 fa3e 	bl	800a996 <__retarget_lock_acquire_recursive>
 800a51a:	89a3      	ldrh	r3, [r4, #12]
 800a51c:	071b      	lsls	r3, r3, #28
 800a51e:	d518      	bpl.n	800a552 <_fwrite_r+0x66>
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d015      	beq.n	800a552 <_fwrite_r+0x66>
 800a526:	2600      	movs	r6, #0
 800a528:	9b00      	ldr	r3, [sp, #0]
 800a52a:	429e      	cmp	r6, r3
 800a52c:	d018      	beq.n	800a560 <_fwrite_r+0x74>
 800a52e:	9b01      	ldr	r3, [sp, #4]
 800a530:	5d99      	ldrb	r1, [r3, r6]
 800a532:	68a3      	ldr	r3, [r4, #8]
 800a534:	3b01      	subs	r3, #1
 800a536:	60a3      	str	r3, [r4, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	da04      	bge.n	800a546 <_fwrite_r+0x5a>
 800a53c:	69a2      	ldr	r2, [r4, #24]
 800a53e:	4293      	cmp	r3, r2
 800a540:	db1c      	blt.n	800a57c <_fwrite_r+0x90>
 800a542:	290a      	cmp	r1, #10
 800a544:	d01a      	beq.n	800a57c <_fwrite_r+0x90>
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	1c5a      	adds	r2, r3, #1
 800a54a:	6022      	str	r2, [r4, #0]
 800a54c:	7019      	strb	r1, [r3, #0]
 800a54e:	3601      	adds	r6, #1
 800a550:	e7ea      	b.n	800a528 <_fwrite_r+0x3c>
 800a552:	0021      	movs	r1, r4
 800a554:	0028      	movs	r0, r5
 800a556:	f000 f923 	bl	800a7a0 <__swsetup_r>
 800a55a:	2600      	movs	r6, #0
 800a55c:	42b0      	cmp	r0, r6
 800a55e:	d0e2      	beq.n	800a526 <_fwrite_r+0x3a>
 800a560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a562:	07db      	lsls	r3, r3, #31
 800a564:	d405      	bmi.n	800a572 <_fwrite_r+0x86>
 800a566:	89a3      	ldrh	r3, [r4, #12]
 800a568:	059b      	lsls	r3, r3, #22
 800a56a:	d402      	bmi.n	800a572 <_fwrite_r+0x86>
 800a56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a56e:	f000 fa13 	bl	800a998 <__retarget_lock_release_recursive>
 800a572:	0039      	movs	r1, r7
 800a574:	0030      	movs	r0, r6
 800a576:	f7f5 fde3 	bl	8000140 <__udivsi3>
 800a57a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a57c:	0022      	movs	r2, r4
 800a57e:	0028      	movs	r0, r5
 800a580:	f000 f8cc 	bl	800a71c <__swbuf_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d1e2      	bne.n	800a54e <_fwrite_r+0x62>
 800a588:	e7ea      	b.n	800a560 <_fwrite_r+0x74>
	...

0800a58c <fwrite>:
 800a58c:	b513      	push	{r0, r1, r4, lr}
 800a58e:	4c04      	ldr	r4, [pc, #16]	; (800a5a0 <fwrite+0x14>)
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	0013      	movs	r3, r2
 800a594:	000a      	movs	r2, r1
 800a596:	0001      	movs	r1, r0
 800a598:	6820      	ldr	r0, [r4, #0]
 800a59a:	f7ff ffa7 	bl	800a4ec <_fwrite_r>
 800a59e:	bd16      	pop	{r1, r2, r4, pc}
 800a5a0:	200001f4 	.word	0x200001f4

0800a5a4 <iprintf>:
 800a5a4:	b40f      	push	{r0, r1, r2, r3}
 800a5a6:	b507      	push	{r0, r1, r2, lr}
 800a5a8:	4905      	ldr	r1, [pc, #20]	; (800a5c0 <iprintf+0x1c>)
 800a5aa:	ab04      	add	r3, sp, #16
 800a5ac:	6808      	ldr	r0, [r1, #0]
 800a5ae:	cb04      	ldmia	r3!, {r2}
 800a5b0:	6881      	ldr	r1, [r0, #8]
 800a5b2:	9301      	str	r3, [sp, #4]
 800a5b4:	f001 fcae 	bl	800bf14 <_vfiprintf_r>
 800a5b8:	b003      	add	sp, #12
 800a5ba:	bc08      	pop	{r3}
 800a5bc:	b004      	add	sp, #16
 800a5be:	4718      	bx	r3
 800a5c0:	200001f4 	.word	0x200001f4

0800a5c4 <_puts_r>:
 800a5c4:	6a03      	ldr	r3, [r0, #32]
 800a5c6:	b570      	push	{r4, r5, r6, lr}
 800a5c8:	0005      	movs	r5, r0
 800a5ca:	000e      	movs	r6, r1
 800a5cc:	6884      	ldr	r4, [r0, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <_puts_r+0x12>
 800a5d2:	f7ff ff57 	bl	800a484 <__sinit>
 800a5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5d8:	07db      	lsls	r3, r3, #31
 800a5da:	d405      	bmi.n	800a5e8 <_puts_r+0x24>
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	059b      	lsls	r3, r3, #22
 800a5e0:	d402      	bmi.n	800a5e8 <_puts_r+0x24>
 800a5e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e4:	f000 f9d7 	bl	800a996 <__retarget_lock_acquire_recursive>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	071b      	lsls	r3, r3, #28
 800a5ec:	d502      	bpl.n	800a5f4 <_puts_r+0x30>
 800a5ee:	6923      	ldr	r3, [r4, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d11f      	bne.n	800a634 <_puts_r+0x70>
 800a5f4:	0021      	movs	r1, r4
 800a5f6:	0028      	movs	r0, r5
 800a5f8:	f000 f8d2 	bl	800a7a0 <__swsetup_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d019      	beq.n	800a634 <_puts_r+0x70>
 800a600:	2501      	movs	r5, #1
 800a602:	426d      	negs	r5, r5
 800a604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a606:	07db      	lsls	r3, r3, #31
 800a608:	d405      	bmi.n	800a616 <_puts_r+0x52>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	059b      	lsls	r3, r3, #22
 800a60e:	d402      	bmi.n	800a616 <_puts_r+0x52>
 800a610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a612:	f000 f9c1 	bl	800a998 <__retarget_lock_release_recursive>
 800a616:	0028      	movs	r0, r5
 800a618:	bd70      	pop	{r4, r5, r6, pc}
 800a61a:	3601      	adds	r6, #1
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da04      	bge.n	800a62c <_puts_r+0x68>
 800a622:	69a2      	ldr	r2, [r4, #24]
 800a624:	429a      	cmp	r2, r3
 800a626:	dc16      	bgt.n	800a656 <_puts_r+0x92>
 800a628:	290a      	cmp	r1, #10
 800a62a:	d014      	beq.n	800a656 <_puts_r+0x92>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	1c5a      	adds	r2, r3, #1
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	7019      	strb	r1, [r3, #0]
 800a634:	68a3      	ldr	r3, [r4, #8]
 800a636:	7831      	ldrb	r1, [r6, #0]
 800a638:	3b01      	subs	r3, #1
 800a63a:	2900      	cmp	r1, #0
 800a63c:	d1ed      	bne.n	800a61a <_puts_r+0x56>
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	da0f      	bge.n	800a664 <_puts_r+0xa0>
 800a644:	0028      	movs	r0, r5
 800a646:	0022      	movs	r2, r4
 800a648:	310a      	adds	r1, #10
 800a64a:	f000 f867 	bl	800a71c <__swbuf_r>
 800a64e:	250a      	movs	r5, #10
 800a650:	3001      	adds	r0, #1
 800a652:	d1d7      	bne.n	800a604 <_puts_r+0x40>
 800a654:	e7d4      	b.n	800a600 <_puts_r+0x3c>
 800a656:	0022      	movs	r2, r4
 800a658:	0028      	movs	r0, r5
 800a65a:	f000 f85f 	bl	800a71c <__swbuf_r>
 800a65e:	3001      	adds	r0, #1
 800a660:	d1e8      	bne.n	800a634 <_puts_r+0x70>
 800a662:	e7cd      	b.n	800a600 <_puts_r+0x3c>
 800a664:	250a      	movs	r5, #10
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	1c5a      	adds	r2, r3, #1
 800a66a:	6022      	str	r2, [r4, #0]
 800a66c:	701d      	strb	r5, [r3, #0]
 800a66e:	e7c9      	b.n	800a604 <_puts_r+0x40>

0800a670 <puts>:
 800a670:	b510      	push	{r4, lr}
 800a672:	4b03      	ldr	r3, [pc, #12]	; (800a680 <puts+0x10>)
 800a674:	0001      	movs	r1, r0
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	f7ff ffa4 	bl	800a5c4 <_puts_r>
 800a67c:	bd10      	pop	{r4, pc}
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	200001f4 	.word	0x200001f4

0800a684 <__sread>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	000c      	movs	r4, r1
 800a688:	250e      	movs	r5, #14
 800a68a:	5f49      	ldrsh	r1, [r1, r5]
 800a68c:	f000 f91e 	bl	800a8cc <_read_r>
 800a690:	2800      	cmp	r0, #0
 800a692:	db03      	blt.n	800a69c <__sread+0x18>
 800a694:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a696:	181b      	adds	r3, r3, r0
 800a698:	6563      	str	r3, [r4, #84]	; 0x54
 800a69a:	bd70      	pop	{r4, r5, r6, pc}
 800a69c:	89a3      	ldrh	r3, [r4, #12]
 800a69e:	4a02      	ldr	r2, [pc, #8]	; (800a6a8 <__sread+0x24>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	81a3      	strh	r3, [r4, #12]
 800a6a4:	e7f9      	b.n	800a69a <__sread+0x16>
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	ffffefff 	.word	0xffffefff

0800a6ac <__swrite>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	001f      	movs	r7, r3
 800a6b0:	898b      	ldrh	r3, [r1, #12]
 800a6b2:	0005      	movs	r5, r0
 800a6b4:	000c      	movs	r4, r1
 800a6b6:	0016      	movs	r6, r2
 800a6b8:	05db      	lsls	r3, r3, #23
 800a6ba:	d505      	bpl.n	800a6c8 <__swrite+0x1c>
 800a6bc:	230e      	movs	r3, #14
 800a6be:	5ec9      	ldrsh	r1, [r1, r3]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	f000 f8ee 	bl	800a8a4 <_lseek_r>
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	4a05      	ldr	r2, [pc, #20]	; (800a6e0 <__swrite+0x34>)
 800a6cc:	0028      	movs	r0, r5
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	0032      	movs	r2, r6
 800a6d4:	230e      	movs	r3, #14
 800a6d6:	5ee1      	ldrsh	r1, [r4, r3]
 800a6d8:	003b      	movs	r3, r7
 800a6da:	f000 f91d 	bl	800a918 <_write_r>
 800a6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e0:	ffffefff 	.word	0xffffefff

0800a6e4 <__sseek>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	000c      	movs	r4, r1
 800a6e8:	250e      	movs	r5, #14
 800a6ea:	5f49      	ldrsh	r1, [r1, r5]
 800a6ec:	f000 f8da 	bl	800a8a4 <_lseek_r>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	1c42      	adds	r2, r0, #1
 800a6f4:	d103      	bne.n	800a6fe <__sseek+0x1a>
 800a6f6:	4a05      	ldr	r2, [pc, #20]	; (800a70c <__sseek+0x28>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
 800a6fe:	2280      	movs	r2, #128	; 0x80
 800a700:	0152      	lsls	r2, r2, #5
 800a702:	4313      	orrs	r3, r2
 800a704:	81a3      	strh	r3, [r4, #12]
 800a706:	6560      	str	r0, [r4, #84]	; 0x54
 800a708:	e7f8      	b.n	800a6fc <__sseek+0x18>
 800a70a:	46c0      	nop			; (mov r8, r8)
 800a70c:	ffffefff 	.word	0xffffefff

0800a710 <__sclose>:
 800a710:	b510      	push	{r4, lr}
 800a712:	230e      	movs	r3, #14
 800a714:	5ec9      	ldrsh	r1, [r1, r3]
 800a716:	f000 f8b3 	bl	800a880 <_close_r>
 800a71a:	bd10      	pop	{r4, pc}

0800a71c <__swbuf_r>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	0006      	movs	r6, r0
 800a720:	000d      	movs	r5, r1
 800a722:	0014      	movs	r4, r2
 800a724:	2800      	cmp	r0, #0
 800a726:	d004      	beq.n	800a732 <__swbuf_r+0x16>
 800a728:	6a03      	ldr	r3, [r0, #32]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <__swbuf_r+0x16>
 800a72e:	f7ff fea9 	bl	800a484 <__sinit>
 800a732:	69a3      	ldr	r3, [r4, #24]
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	071b      	lsls	r3, r3, #28
 800a73a:	d528      	bpl.n	800a78e <__swbuf_r+0x72>
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d025      	beq.n	800a78e <__swbuf_r+0x72>
 800a742:	6923      	ldr	r3, [r4, #16]
 800a744:	6820      	ldr	r0, [r4, #0]
 800a746:	b2ef      	uxtb	r7, r5
 800a748:	1ac0      	subs	r0, r0, r3
 800a74a:	6963      	ldr	r3, [r4, #20]
 800a74c:	b2ed      	uxtb	r5, r5
 800a74e:	4283      	cmp	r3, r0
 800a750:	dc05      	bgt.n	800a75e <__swbuf_r+0x42>
 800a752:	0021      	movs	r1, r4
 800a754:	0030      	movs	r0, r6
 800a756:	f001 fd83 	bl	800c260 <_fflush_r>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d11d      	bne.n	800a79a <__swbuf_r+0x7e>
 800a75e:	68a3      	ldr	r3, [r4, #8]
 800a760:	3001      	adds	r0, #1
 800a762:	3b01      	subs	r3, #1
 800a764:	60a3      	str	r3, [r4, #8]
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	6022      	str	r2, [r4, #0]
 800a76c:	701f      	strb	r7, [r3, #0]
 800a76e:	6963      	ldr	r3, [r4, #20]
 800a770:	4283      	cmp	r3, r0
 800a772:	d004      	beq.n	800a77e <__swbuf_r+0x62>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	07db      	lsls	r3, r3, #31
 800a778:	d507      	bpl.n	800a78a <__swbuf_r+0x6e>
 800a77a:	2d0a      	cmp	r5, #10
 800a77c:	d105      	bne.n	800a78a <__swbuf_r+0x6e>
 800a77e:	0021      	movs	r1, r4
 800a780:	0030      	movs	r0, r6
 800a782:	f001 fd6d 	bl	800c260 <_fflush_r>
 800a786:	2800      	cmp	r0, #0
 800a788:	d107      	bne.n	800a79a <__swbuf_r+0x7e>
 800a78a:	0028      	movs	r0, r5
 800a78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78e:	0021      	movs	r1, r4
 800a790:	0030      	movs	r0, r6
 800a792:	f000 f805 	bl	800a7a0 <__swsetup_r>
 800a796:	2800      	cmp	r0, #0
 800a798:	d0d3      	beq.n	800a742 <__swbuf_r+0x26>
 800a79a:	2501      	movs	r5, #1
 800a79c:	426d      	negs	r5, r5
 800a79e:	e7f4      	b.n	800a78a <__swbuf_r+0x6e>

0800a7a0 <__swsetup_r>:
 800a7a0:	4b30      	ldr	r3, [pc, #192]	; (800a864 <__swsetup_r+0xc4>)
 800a7a2:	b570      	push	{r4, r5, r6, lr}
 800a7a4:	0005      	movs	r5, r0
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	000c      	movs	r4, r1
 800a7aa:	2800      	cmp	r0, #0
 800a7ac:	d004      	beq.n	800a7b8 <__swsetup_r+0x18>
 800a7ae:	6a03      	ldr	r3, [r0, #32]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <__swsetup_r+0x18>
 800a7b4:	f7ff fe66 	bl	800a484 <__sinit>
 800a7b8:	230c      	movs	r3, #12
 800a7ba:	5ee2      	ldrsh	r2, [r4, r3]
 800a7bc:	b293      	uxth	r3, r2
 800a7be:	0711      	lsls	r1, r2, #28
 800a7c0:	d423      	bmi.n	800a80a <__swsetup_r+0x6a>
 800a7c2:	06d9      	lsls	r1, r3, #27
 800a7c4:	d407      	bmi.n	800a7d6 <__swsetup_r+0x36>
 800a7c6:	2309      	movs	r3, #9
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	3337      	adds	r3, #55	; 0x37
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	4240      	negs	r0, r0
 800a7d4:	bd70      	pop	{r4, r5, r6, pc}
 800a7d6:	075b      	lsls	r3, r3, #29
 800a7d8:	d513      	bpl.n	800a802 <__swsetup_r+0x62>
 800a7da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7dc:	2900      	cmp	r1, #0
 800a7de:	d008      	beq.n	800a7f2 <__swsetup_r+0x52>
 800a7e0:	0023      	movs	r3, r4
 800a7e2:	3344      	adds	r3, #68	; 0x44
 800a7e4:	4299      	cmp	r1, r3
 800a7e6:	d002      	beq.n	800a7ee <__swsetup_r+0x4e>
 800a7e8:	0028      	movs	r0, r5
 800a7ea:	f000 ff87 	bl	800b6fc <_free_r>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800a7f2:	2224      	movs	r2, #36	; 0x24
 800a7f4:	89a3      	ldrh	r3, [r4, #12]
 800a7f6:	4393      	bics	r3, r2
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6063      	str	r3, [r4, #4]
 800a7fe:	6923      	ldr	r3, [r4, #16]
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	2308      	movs	r3, #8
 800a804:	89a2      	ldrh	r2, [r4, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10b      	bne.n	800a828 <__swsetup_r+0x88>
 800a810:	21a0      	movs	r1, #160	; 0xa0
 800a812:	2280      	movs	r2, #128	; 0x80
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	0089      	lsls	r1, r1, #2
 800a818:	0092      	lsls	r2, r2, #2
 800a81a:	400b      	ands	r3, r1
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <__swsetup_r+0x88>
 800a820:	0021      	movs	r1, r4
 800a822:	0028      	movs	r0, r5
 800a824:	f001 fd70 	bl	800c308 <__smakebuf_r>
 800a828:	220c      	movs	r2, #12
 800a82a:	5ea3      	ldrsh	r3, [r4, r2]
 800a82c:	2001      	movs	r0, #1
 800a82e:	001a      	movs	r2, r3
 800a830:	b299      	uxth	r1, r3
 800a832:	4002      	ands	r2, r0
 800a834:	4203      	tst	r3, r0
 800a836:	d00f      	beq.n	800a858 <__swsetup_r+0xb8>
 800a838:	2200      	movs	r2, #0
 800a83a:	60a2      	str	r2, [r4, #8]
 800a83c:	6962      	ldr	r2, [r4, #20]
 800a83e:	4252      	negs	r2, r2
 800a840:	61a2      	str	r2, [r4, #24]
 800a842:	2000      	movs	r0, #0
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	4282      	cmp	r2, r0
 800a848:	d1c4      	bne.n	800a7d4 <__swsetup_r+0x34>
 800a84a:	0609      	lsls	r1, r1, #24
 800a84c:	d5c2      	bpl.n	800a7d4 <__swsetup_r+0x34>
 800a84e:	2240      	movs	r2, #64	; 0x40
 800a850:	4313      	orrs	r3, r2
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	3801      	subs	r0, #1
 800a856:	e7bd      	b.n	800a7d4 <__swsetup_r+0x34>
 800a858:	0788      	lsls	r0, r1, #30
 800a85a:	d400      	bmi.n	800a85e <__swsetup_r+0xbe>
 800a85c:	6962      	ldr	r2, [r4, #20]
 800a85e:	60a2      	str	r2, [r4, #8]
 800a860:	e7ef      	b.n	800a842 <__swsetup_r+0xa2>
 800a862:	46c0      	nop			; (mov r8, r8)
 800a864:	200001f4 	.word	0x200001f4

0800a868 <memset>:
 800a868:	0003      	movs	r3, r0
 800a86a:	1882      	adds	r2, r0, r2
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d100      	bne.n	800a872 <memset+0xa>
 800a870:	4770      	bx	lr
 800a872:	7019      	strb	r1, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	e7f9      	b.n	800a86c <memset+0x4>

0800a878 <_localeconv_r>:
 800a878:	4800      	ldr	r0, [pc, #0]	; (800a87c <_localeconv_r+0x4>)
 800a87a:	4770      	bx	lr
 800a87c:	200002e8 	.word	0x200002e8

0800a880 <_close_r>:
 800a880:	2300      	movs	r3, #0
 800a882:	b570      	push	{r4, r5, r6, lr}
 800a884:	4d06      	ldr	r5, [pc, #24]	; (800a8a0 <_close_r+0x20>)
 800a886:	0004      	movs	r4, r0
 800a888:	0008      	movs	r0, r1
 800a88a:	602b      	str	r3, [r5, #0]
 800a88c:	f7fa f965 	bl	8004b5a <_close>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d103      	bne.n	800a89c <_close_r+0x1c>
 800a894:	682b      	ldr	r3, [r5, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d000      	beq.n	800a89c <_close_r+0x1c>
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	bd70      	pop	{r4, r5, r6, pc}
 800a89e:	46c0      	nop			; (mov r8, r8)
 800a8a0:	20000a60 	.word	0x20000a60

0800a8a4 <_lseek_r>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	0004      	movs	r4, r0
 800a8a8:	0008      	movs	r0, r1
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	001a      	movs	r2, r3
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4d05      	ldr	r5, [pc, #20]	; (800a8c8 <_lseek_r+0x24>)
 800a8b2:	602b      	str	r3, [r5, #0]
 800a8b4:	f7fa f972 	bl	8004b9c <_lseek>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d103      	bne.n	800a8c4 <_lseek_r+0x20>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d000      	beq.n	800a8c4 <_lseek_r+0x20>
 800a8c2:	6023      	str	r3, [r4, #0]
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	20000a60 	.word	0x20000a60

0800a8cc <_read_r>:
 800a8cc:	b570      	push	{r4, r5, r6, lr}
 800a8ce:	0004      	movs	r4, r0
 800a8d0:	0008      	movs	r0, r1
 800a8d2:	0011      	movs	r1, r2
 800a8d4:	001a      	movs	r2, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4d05      	ldr	r5, [pc, #20]	; (800a8f0 <_read_r+0x24>)
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7fa f904 	bl	8004ae8 <_read>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d103      	bne.n	800a8ec <_read_r+0x20>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d000      	beq.n	800a8ec <_read_r+0x20>
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	46c0      	nop			; (mov r8, r8)
 800a8f0:	20000a60 	.word	0x20000a60

0800a8f4 <_sbrk_r>:
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	b570      	push	{r4, r5, r6, lr}
 800a8f8:	4d06      	ldr	r5, [pc, #24]	; (800a914 <_sbrk_r+0x20>)
 800a8fa:	0004      	movs	r4, r0
 800a8fc:	0008      	movs	r0, r1
 800a8fe:	602b      	str	r3, [r5, #0]
 800a900:	f7fa f958 	bl	8004bb4 <_sbrk>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d103      	bne.n	800a910 <_sbrk_r+0x1c>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d000      	beq.n	800a910 <_sbrk_r+0x1c>
 800a90e:	6023      	str	r3, [r4, #0]
 800a910:	bd70      	pop	{r4, r5, r6, pc}
 800a912:	46c0      	nop			; (mov r8, r8)
 800a914:	20000a60 	.word	0x20000a60

0800a918 <_write_r>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	0004      	movs	r4, r0
 800a91c:	0008      	movs	r0, r1
 800a91e:	0011      	movs	r1, r2
 800a920:	001a      	movs	r2, r3
 800a922:	2300      	movs	r3, #0
 800a924:	4d05      	ldr	r5, [pc, #20]	; (800a93c <_write_r+0x24>)
 800a926:	602b      	str	r3, [r5, #0]
 800a928:	f7fa f8fb 	bl	8004b22 <_write>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d103      	bne.n	800a938 <_write_r+0x20>
 800a930:	682b      	ldr	r3, [r5, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d000      	beq.n	800a938 <_write_r+0x20>
 800a936:	6023      	str	r3, [r4, #0]
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	20000a60 	.word	0x20000a60

0800a940 <__errno>:
 800a940:	4b01      	ldr	r3, [pc, #4]	; (800a948 <__errno+0x8>)
 800a942:	6818      	ldr	r0, [r3, #0]
 800a944:	4770      	bx	lr
 800a946:	46c0      	nop			; (mov r8, r8)
 800a948:	200001f4 	.word	0x200001f4

0800a94c <__libc_init_array>:
 800a94c:	b570      	push	{r4, r5, r6, lr}
 800a94e:	2600      	movs	r6, #0
 800a950:	4c0c      	ldr	r4, [pc, #48]	; (800a984 <__libc_init_array+0x38>)
 800a952:	4d0d      	ldr	r5, [pc, #52]	; (800a988 <__libc_init_array+0x3c>)
 800a954:	1b64      	subs	r4, r4, r5
 800a956:	10a4      	asrs	r4, r4, #2
 800a958:	42a6      	cmp	r6, r4
 800a95a:	d109      	bne.n	800a970 <__libc_init_array+0x24>
 800a95c:	2600      	movs	r6, #0
 800a95e:	f001 fe01 	bl	800c564 <_init>
 800a962:	4c0a      	ldr	r4, [pc, #40]	; (800a98c <__libc_init_array+0x40>)
 800a964:	4d0a      	ldr	r5, [pc, #40]	; (800a990 <__libc_init_array+0x44>)
 800a966:	1b64      	subs	r4, r4, r5
 800a968:	10a4      	asrs	r4, r4, #2
 800a96a:	42a6      	cmp	r6, r4
 800a96c:	d105      	bne.n	800a97a <__libc_init_array+0x2e>
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	00b3      	lsls	r3, r6, #2
 800a972:	58eb      	ldr	r3, [r5, r3]
 800a974:	4798      	blx	r3
 800a976:	3601      	adds	r6, #1
 800a978:	e7ee      	b.n	800a958 <__libc_init_array+0xc>
 800a97a:	00b3      	lsls	r3, r6, #2
 800a97c:	58eb      	ldr	r3, [r5, r3]
 800a97e:	4798      	blx	r3
 800a980:	3601      	adds	r6, #1
 800a982:	e7f2      	b.n	800a96a <__libc_init_array+0x1e>
 800a984:	0800cad4 	.word	0x0800cad4
 800a988:	0800cad4 	.word	0x0800cad4
 800a98c:	0800cad8 	.word	0x0800cad8
 800a990:	0800cad4 	.word	0x0800cad4

0800a994 <__retarget_lock_init_recursive>:
 800a994:	4770      	bx	lr

0800a996 <__retarget_lock_acquire_recursive>:
 800a996:	4770      	bx	lr

0800a998 <__retarget_lock_release_recursive>:
 800a998:	4770      	bx	lr

0800a99a <memchr>:
 800a99a:	b2c9      	uxtb	r1, r1
 800a99c:	1882      	adds	r2, r0, r2
 800a99e:	4290      	cmp	r0, r2
 800a9a0:	d101      	bne.n	800a9a6 <memchr+0xc>
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	4770      	bx	lr
 800a9a6:	7803      	ldrb	r3, [r0, #0]
 800a9a8:	428b      	cmp	r3, r1
 800a9aa:	d0fb      	beq.n	800a9a4 <memchr+0xa>
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	e7f6      	b.n	800a99e <memchr+0x4>

0800a9b0 <memcpy>:
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	b510      	push	{r4, lr}
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d100      	bne.n	800a9ba <memcpy+0xa>
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	5ccc      	ldrb	r4, [r1, r3]
 800a9bc:	54c4      	strb	r4, [r0, r3]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	e7f8      	b.n	800a9b4 <memcpy+0x4>

0800a9c2 <quorem>:
 800a9c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9c4:	6902      	ldr	r2, [r0, #16]
 800a9c6:	690b      	ldr	r3, [r1, #16]
 800a9c8:	b089      	sub	sp, #36	; 0x24
 800a9ca:	0007      	movs	r7, r0
 800a9cc:	9104      	str	r1, [sp, #16]
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	db69      	blt.n	800aaa8 <quorem+0xe6>
 800a9d4:	3b01      	subs	r3, #1
 800a9d6:	009c      	lsls	r4, r3, #2
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	000b      	movs	r3, r1
 800a9dc:	3314      	adds	r3, #20
 800a9de:	9306      	str	r3, [sp, #24]
 800a9e0:	191b      	adds	r3, r3, r4
 800a9e2:	9305      	str	r3, [sp, #20]
 800a9e4:	003b      	movs	r3, r7
 800a9e6:	3314      	adds	r3, #20
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	191c      	adds	r4, r3, r4
 800a9ec:	9b05      	ldr	r3, [sp, #20]
 800a9ee:	6826      	ldr	r6, [r4, #0]
 800a9f0:	681d      	ldr	r5, [r3, #0]
 800a9f2:	0030      	movs	r0, r6
 800a9f4:	3501      	adds	r5, #1
 800a9f6:	0029      	movs	r1, r5
 800a9f8:	f7f5 fba2 	bl	8000140 <__udivsi3>
 800a9fc:	9002      	str	r0, [sp, #8]
 800a9fe:	42ae      	cmp	r6, r5
 800aa00:	d329      	bcc.n	800aa56 <quorem+0x94>
 800aa02:	9b06      	ldr	r3, [sp, #24]
 800aa04:	2600      	movs	r6, #0
 800aa06:	469c      	mov	ip, r3
 800aa08:	9d03      	ldr	r5, [sp, #12]
 800aa0a:	9606      	str	r6, [sp, #24]
 800aa0c:	4662      	mov	r2, ip
 800aa0e:	ca08      	ldmia	r2!, {r3}
 800aa10:	6828      	ldr	r0, [r5, #0]
 800aa12:	4694      	mov	ip, r2
 800aa14:	9a02      	ldr	r2, [sp, #8]
 800aa16:	b299      	uxth	r1, r3
 800aa18:	4351      	muls	r1, r2
 800aa1a:	0c1b      	lsrs	r3, r3, #16
 800aa1c:	4353      	muls	r3, r2
 800aa1e:	1989      	adds	r1, r1, r6
 800aa20:	0c0a      	lsrs	r2, r1, #16
 800aa22:	189b      	adds	r3, r3, r2
 800aa24:	9307      	str	r3, [sp, #28]
 800aa26:	0c1e      	lsrs	r6, r3, #16
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	b282      	uxth	r2, r0
 800aa2c:	18d2      	adds	r2, r2, r3
 800aa2e:	466b      	mov	r3, sp
 800aa30:	b289      	uxth	r1, r1
 800aa32:	8b9b      	ldrh	r3, [r3, #28]
 800aa34:	1a52      	subs	r2, r2, r1
 800aa36:	0c01      	lsrs	r1, r0, #16
 800aa38:	1ac9      	subs	r1, r1, r3
 800aa3a:	1413      	asrs	r3, r2, #16
 800aa3c:	18cb      	adds	r3, r1, r3
 800aa3e:	1419      	asrs	r1, r3, #16
 800aa40:	b292      	uxth	r2, r2
 800aa42:	041b      	lsls	r3, r3, #16
 800aa44:	4313      	orrs	r3, r2
 800aa46:	c508      	stmia	r5!, {r3}
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	9106      	str	r1, [sp, #24]
 800aa4c:	4563      	cmp	r3, ip
 800aa4e:	d2dd      	bcs.n	800aa0c <quorem+0x4a>
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d030      	beq.n	800aab8 <quorem+0xf6>
 800aa56:	0038      	movs	r0, r7
 800aa58:	9904      	ldr	r1, [sp, #16]
 800aa5a:	f001 f91f 	bl	800bc9c <__mcmp>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	db21      	blt.n	800aaa6 <quorem+0xe4>
 800aa62:	0038      	movs	r0, r7
 800aa64:	2600      	movs	r6, #0
 800aa66:	9b02      	ldr	r3, [sp, #8]
 800aa68:	9c04      	ldr	r4, [sp, #16]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	9302      	str	r3, [sp, #8]
 800aa6e:	3014      	adds	r0, #20
 800aa70:	3414      	adds	r4, #20
 800aa72:	6803      	ldr	r3, [r0, #0]
 800aa74:	cc02      	ldmia	r4!, {r1}
 800aa76:	b29d      	uxth	r5, r3
 800aa78:	19ad      	adds	r5, r5, r6
 800aa7a:	b28a      	uxth	r2, r1
 800aa7c:	1aaa      	subs	r2, r5, r2
 800aa7e:	0c09      	lsrs	r1, r1, #16
 800aa80:	0c1b      	lsrs	r3, r3, #16
 800aa82:	1a5b      	subs	r3, r3, r1
 800aa84:	1411      	asrs	r1, r2, #16
 800aa86:	185b      	adds	r3, r3, r1
 800aa88:	141e      	asrs	r6, r3, #16
 800aa8a:	b292      	uxth	r2, r2
 800aa8c:	041b      	lsls	r3, r3, #16
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	c008      	stmia	r0!, {r3}
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	42a3      	cmp	r3, r4
 800aa96:	d2ec      	bcs.n	800aa72 <quorem+0xb0>
 800aa98:	9b01      	ldr	r3, [sp, #4]
 800aa9a:	9a03      	ldr	r2, [sp, #12]
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	18d3      	adds	r3, r2, r3
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	d015      	beq.n	800aad2 <quorem+0x110>
 800aaa6:	9802      	ldr	r0, [sp, #8]
 800aaa8:	b009      	add	sp, #36	; 0x24
 800aaaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <quorem+0xfe>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	9301      	str	r3, [sp, #4]
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	3c04      	subs	r4, #4
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	d3f5      	bcc.n	800aaac <quorem+0xea>
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	613b      	str	r3, [r7, #16]
 800aac4:	e7c7      	b.n	800aa56 <quorem+0x94>
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	2a00      	cmp	r2, #0
 800aaca:	d106      	bne.n	800aada <quorem+0x118>
 800aacc:	9a01      	ldr	r2, [sp, #4]
 800aace:	3a01      	subs	r2, #1
 800aad0:	9201      	str	r2, [sp, #4]
 800aad2:	9a03      	ldr	r2, [sp, #12]
 800aad4:	3b04      	subs	r3, #4
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d3f5      	bcc.n	800aac6 <quorem+0x104>
 800aada:	9b01      	ldr	r3, [sp, #4]
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	e7e2      	b.n	800aaa6 <quorem+0xe4>

0800aae0 <_dtoa_r>:
 800aae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aae2:	0014      	movs	r4, r2
 800aae4:	001d      	movs	r5, r3
 800aae6:	69c6      	ldr	r6, [r0, #28]
 800aae8:	b09d      	sub	sp, #116	; 0x74
 800aaea:	9408      	str	r4, [sp, #32]
 800aaec:	9509      	str	r5, [sp, #36]	; 0x24
 800aaee:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800aaf0:	9004      	str	r0, [sp, #16]
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d10f      	bne.n	800ab16 <_dtoa_r+0x36>
 800aaf6:	2010      	movs	r0, #16
 800aaf8:	f7fe fef8 	bl	80098ec <malloc>
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	1e02      	subs	r2, r0, #0
 800ab00:	61d8      	str	r0, [r3, #28]
 800ab02:	d104      	bne.n	800ab0e <_dtoa_r+0x2e>
 800ab04:	21ef      	movs	r1, #239	; 0xef
 800ab06:	4bc6      	ldr	r3, [pc, #792]	; (800ae20 <_dtoa_r+0x340>)
 800ab08:	48c6      	ldr	r0, [pc, #792]	; (800ae24 <_dtoa_r+0x344>)
 800ab0a:	f001 fc5f 	bl	800c3cc <__assert_func>
 800ab0e:	6046      	str	r6, [r0, #4]
 800ab10:	6086      	str	r6, [r0, #8]
 800ab12:	6006      	str	r6, [r0, #0]
 800ab14:	60c6      	str	r6, [r0, #12]
 800ab16:	9b04      	ldr	r3, [sp, #16]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	6819      	ldr	r1, [r3, #0]
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d00b      	beq.n	800ab38 <_dtoa_r+0x58>
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	2301      	movs	r3, #1
 800ab24:	4093      	lsls	r3, r2
 800ab26:	604a      	str	r2, [r1, #4]
 800ab28:	608b      	str	r3, [r1, #8]
 800ab2a:	9804      	ldr	r0, [sp, #16]
 800ab2c:	f000 fe74 	bl	800b818 <_Bfree>
 800ab30:	2200      	movs	r2, #0
 800ab32:	9b04      	ldr	r3, [sp, #16]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	601a      	str	r2, [r3, #0]
 800ab38:	2d00      	cmp	r5, #0
 800ab3a:	da1e      	bge.n	800ab7a <_dtoa_r+0x9a>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	603b      	str	r3, [r7, #0]
 800ab40:	006b      	lsls	r3, r5, #1
 800ab42:	085b      	lsrs	r3, r3, #1
 800ab44:	9309      	str	r3, [sp, #36]	; 0x24
 800ab46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ab48:	4bb7      	ldr	r3, [pc, #732]	; (800ae28 <_dtoa_r+0x348>)
 800ab4a:	4ab7      	ldr	r2, [pc, #732]	; (800ae28 <_dtoa_r+0x348>)
 800ab4c:	403b      	ands	r3, r7
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d116      	bne.n	800ab80 <_dtoa_r+0xa0>
 800ab52:	4bb6      	ldr	r3, [pc, #728]	; (800ae2c <_dtoa_r+0x34c>)
 800ab54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	033b      	lsls	r3, r7, #12
 800ab5a:	0b1b      	lsrs	r3, r3, #12
 800ab5c:	4323      	orrs	r3, r4
 800ab5e:	d101      	bne.n	800ab64 <_dtoa_r+0x84>
 800ab60:	f000 fdb5 	bl	800b6ce <_dtoa_r+0xbee>
 800ab64:	4bb2      	ldr	r3, [pc, #712]	; (800ae30 <_dtoa_r+0x350>)
 800ab66:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ab68:	9306      	str	r3, [sp, #24]
 800ab6a:	2a00      	cmp	r2, #0
 800ab6c:	d002      	beq.n	800ab74 <_dtoa_r+0x94>
 800ab6e:	4bb1      	ldr	r3, [pc, #708]	; (800ae34 <_dtoa_r+0x354>)
 800ab70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ab72:	6013      	str	r3, [r2, #0]
 800ab74:	9806      	ldr	r0, [sp, #24]
 800ab76:	b01d      	add	sp, #116	; 0x74
 800ab78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	e7e2      	b.n	800ab46 <_dtoa_r+0x66>
 800ab80:	9a08      	ldr	r2, [sp, #32]
 800ab82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab84:	9210      	str	r2, [sp, #64]	; 0x40
 800ab86:	9311      	str	r3, [sp, #68]	; 0x44
 800ab88:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f7f5 fc5c 	bl	800044c <__aeabi_dcmpeq>
 800ab94:	1e06      	subs	r6, r0, #0
 800ab96:	d009      	beq.n	800abac <_dtoa_r+0xcc>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	4ba6      	ldr	r3, [pc, #664]	; (800ae38 <_dtoa_r+0x358>)
 800aba0:	9306      	str	r3, [sp, #24]
 800aba2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0e5      	beq.n	800ab74 <_dtoa_r+0x94>
 800aba8:	4ba4      	ldr	r3, [pc, #656]	; (800ae3c <_dtoa_r+0x35c>)
 800abaa:	e7e1      	b.n	800ab70 <_dtoa_r+0x90>
 800abac:	ab1a      	add	r3, sp, #104	; 0x68
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	ab1b      	add	r3, sp, #108	; 0x6c
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	9804      	ldr	r0, [sp, #16]
 800abb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abba:	f001 f923 	bl	800be04 <__d2b>
 800abbe:	007a      	lsls	r2, r7, #1
 800abc0:	9005      	str	r0, [sp, #20]
 800abc2:	0d52      	lsrs	r2, r2, #21
 800abc4:	d100      	bne.n	800abc8 <_dtoa_r+0xe8>
 800abc6:	e07b      	b.n	800acc0 <_dtoa_r+0x1e0>
 800abc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abca:	9617      	str	r6, [sp, #92]	; 0x5c
 800abcc:	0319      	lsls	r1, r3, #12
 800abce:	4b9c      	ldr	r3, [pc, #624]	; (800ae40 <_dtoa_r+0x360>)
 800abd0:	0b09      	lsrs	r1, r1, #12
 800abd2:	430b      	orrs	r3, r1
 800abd4:	499b      	ldr	r1, [pc, #620]	; (800ae44 <_dtoa_r+0x364>)
 800abd6:	1857      	adds	r7, r2, r1
 800abd8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abda:	9911      	ldr	r1, [sp, #68]	; 0x44
 800abdc:	0019      	movs	r1, r3
 800abde:	2200      	movs	r2, #0
 800abe0:	4b99      	ldr	r3, [pc, #612]	; (800ae48 <_dtoa_r+0x368>)
 800abe2:	f7f7 fcbf 	bl	8002564 <__aeabi_dsub>
 800abe6:	4a99      	ldr	r2, [pc, #612]	; (800ae4c <_dtoa_r+0x36c>)
 800abe8:	4b99      	ldr	r3, [pc, #612]	; (800ae50 <_dtoa_r+0x370>)
 800abea:	f7f7 f9f9 	bl	8001fe0 <__aeabi_dmul>
 800abee:	4a99      	ldr	r2, [pc, #612]	; (800ae54 <_dtoa_r+0x374>)
 800abf0:	4b99      	ldr	r3, [pc, #612]	; (800ae58 <_dtoa_r+0x378>)
 800abf2:	f7f6 fa9b 	bl	800112c <__aeabi_dadd>
 800abf6:	0004      	movs	r4, r0
 800abf8:	0038      	movs	r0, r7
 800abfa:	000d      	movs	r5, r1
 800abfc:	f7f8 f888 	bl	8002d10 <__aeabi_i2d>
 800ac00:	4a96      	ldr	r2, [pc, #600]	; (800ae5c <_dtoa_r+0x37c>)
 800ac02:	4b97      	ldr	r3, [pc, #604]	; (800ae60 <_dtoa_r+0x380>)
 800ac04:	f7f7 f9ec 	bl	8001fe0 <__aeabi_dmul>
 800ac08:	0002      	movs	r2, r0
 800ac0a:	000b      	movs	r3, r1
 800ac0c:	0020      	movs	r0, r4
 800ac0e:	0029      	movs	r1, r5
 800ac10:	f7f6 fa8c 	bl	800112c <__aeabi_dadd>
 800ac14:	0004      	movs	r4, r0
 800ac16:	000d      	movs	r5, r1
 800ac18:	f7f8 f844 	bl	8002ca4 <__aeabi_d2iz>
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	9003      	str	r0, [sp, #12]
 800ac20:	2300      	movs	r3, #0
 800ac22:	0020      	movs	r0, r4
 800ac24:	0029      	movs	r1, r5
 800ac26:	f7f5 fc17 	bl	8000458 <__aeabi_dcmplt>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d00b      	beq.n	800ac46 <_dtoa_r+0x166>
 800ac2e:	9803      	ldr	r0, [sp, #12]
 800ac30:	f7f8 f86e 	bl	8002d10 <__aeabi_i2d>
 800ac34:	002b      	movs	r3, r5
 800ac36:	0022      	movs	r2, r4
 800ac38:	f7f5 fc08 	bl	800044c <__aeabi_dcmpeq>
 800ac3c:	4243      	negs	r3, r0
 800ac3e:	4158      	adcs	r0, r3
 800ac40:	9b03      	ldr	r3, [sp, #12]
 800ac42:	1a1b      	subs	r3, r3, r0
 800ac44:	9303      	str	r3, [sp, #12]
 800ac46:	2301      	movs	r3, #1
 800ac48:	9316      	str	r3, [sp, #88]	; 0x58
 800ac4a:	9b03      	ldr	r3, [sp, #12]
 800ac4c:	2b16      	cmp	r3, #22
 800ac4e:	d810      	bhi.n	800ac72 <_dtoa_r+0x192>
 800ac50:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ac52:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac54:	9a03      	ldr	r2, [sp, #12]
 800ac56:	4b83      	ldr	r3, [pc, #524]	; (800ae64 <_dtoa_r+0x384>)
 800ac58:	00d2      	lsls	r2, r2, #3
 800ac5a:	189b      	adds	r3, r3, r2
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f7f5 fbfa 	bl	8000458 <__aeabi_dcmplt>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d047      	beq.n	800acf8 <_dtoa_r+0x218>
 800ac68:	9b03      	ldr	r3, [sp, #12]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	9303      	str	r3, [sp, #12]
 800ac6e:	2300      	movs	r3, #0
 800ac70:	9316      	str	r3, [sp, #88]	; 0x58
 800ac72:	2200      	movs	r2, #0
 800ac74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ac76:	920a      	str	r2, [sp, #40]	; 0x28
 800ac78:	1bdb      	subs	r3, r3, r7
 800ac7a:	1e5a      	subs	r2, r3, #1
 800ac7c:	d53e      	bpl.n	800acfc <_dtoa_r+0x21c>
 800ac7e:	2201      	movs	r2, #1
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	930a      	str	r3, [sp, #40]	; 0x28
 800ac84:	2300      	movs	r3, #0
 800ac86:	930c      	str	r3, [sp, #48]	; 0x30
 800ac88:	9b03      	ldr	r3, [sp, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	db38      	blt.n	800ad00 <_dtoa_r+0x220>
 800ac8e:	9a03      	ldr	r2, [sp, #12]
 800ac90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac92:	4694      	mov	ip, r2
 800ac94:	4463      	add	r3, ip
 800ac96:	930c      	str	r3, [sp, #48]	; 0x30
 800ac98:	2300      	movs	r3, #0
 800ac9a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac9c:	930d      	str	r3, [sp, #52]	; 0x34
 800ac9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aca0:	2401      	movs	r4, #1
 800aca2:	2b09      	cmp	r3, #9
 800aca4:	d867      	bhi.n	800ad76 <_dtoa_r+0x296>
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	dd02      	ble.n	800acb0 <_dtoa_r+0x1d0>
 800acaa:	2400      	movs	r4, #0
 800acac:	3b04      	subs	r3, #4
 800acae:	9322      	str	r3, [sp, #136]	; 0x88
 800acb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acb2:	1e98      	subs	r0, r3, #2
 800acb4:	2803      	cmp	r0, #3
 800acb6:	d867      	bhi.n	800ad88 <_dtoa_r+0x2a8>
 800acb8:	f7f5 fa2e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800acbc:	5b383a2b 	.word	0x5b383a2b
 800acc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800acc2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800acc4:	18f6      	adds	r6, r6, r3
 800acc6:	4b68      	ldr	r3, [pc, #416]	; (800ae68 <_dtoa_r+0x388>)
 800acc8:	18f2      	adds	r2, r6, r3
 800acca:	2a20      	cmp	r2, #32
 800accc:	dd0f      	ble.n	800acee <_dtoa_r+0x20e>
 800acce:	2340      	movs	r3, #64	; 0x40
 800acd0:	1a9b      	subs	r3, r3, r2
 800acd2:	409f      	lsls	r7, r3
 800acd4:	4b65      	ldr	r3, [pc, #404]	; (800ae6c <_dtoa_r+0x38c>)
 800acd6:	0038      	movs	r0, r7
 800acd8:	18f3      	adds	r3, r6, r3
 800acda:	40dc      	lsrs	r4, r3
 800acdc:	4320      	orrs	r0, r4
 800acde:	f7f8 f847 	bl	8002d70 <__aeabi_ui2d>
 800ace2:	2201      	movs	r2, #1
 800ace4:	4b62      	ldr	r3, [pc, #392]	; (800ae70 <_dtoa_r+0x390>)
 800ace6:	1e77      	subs	r7, r6, #1
 800ace8:	18cb      	adds	r3, r1, r3
 800acea:	9217      	str	r2, [sp, #92]	; 0x5c
 800acec:	e776      	b.n	800abdc <_dtoa_r+0xfc>
 800acee:	2320      	movs	r3, #32
 800acf0:	0020      	movs	r0, r4
 800acf2:	1a9b      	subs	r3, r3, r2
 800acf4:	4098      	lsls	r0, r3
 800acf6:	e7f2      	b.n	800acde <_dtoa_r+0x1fe>
 800acf8:	9016      	str	r0, [sp, #88]	; 0x58
 800acfa:	e7ba      	b.n	800ac72 <_dtoa_r+0x192>
 800acfc:	920c      	str	r2, [sp, #48]	; 0x30
 800acfe:	e7c3      	b.n	800ac88 <_dtoa_r+0x1a8>
 800ad00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad02:	9a03      	ldr	r2, [sp, #12]
 800ad04:	1a9b      	subs	r3, r3, r2
 800ad06:	930a      	str	r3, [sp, #40]	; 0x28
 800ad08:	4253      	negs	r3, r2
 800ad0a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad10:	e7c5      	b.n	800ac9e <_dtoa_r+0x1be>
 800ad12:	2300      	movs	r3, #0
 800ad14:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad1a:	9307      	str	r3, [sp, #28]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	dc13      	bgt.n	800ad48 <_dtoa_r+0x268>
 800ad20:	2301      	movs	r3, #1
 800ad22:	001a      	movs	r2, r3
 800ad24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad26:	9307      	str	r3, [sp, #28]
 800ad28:	9223      	str	r2, [sp, #140]	; 0x8c
 800ad2a:	e00d      	b.n	800ad48 <_dtoa_r+0x268>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e7f1      	b.n	800ad14 <_dtoa_r+0x234>
 800ad30:	2300      	movs	r3, #0
 800ad32:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ad34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad36:	4694      	mov	ip, r2
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	4463      	add	r3, ip
 800ad3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad3e:	3301      	adds	r3, #1
 800ad40:	9307      	str	r3, [sp, #28]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dc00      	bgt.n	800ad48 <_dtoa_r+0x268>
 800ad46:	2301      	movs	r3, #1
 800ad48:	9a04      	ldr	r2, [sp, #16]
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	69d0      	ldr	r0, [r2, #28]
 800ad4e:	2204      	movs	r2, #4
 800ad50:	0015      	movs	r5, r2
 800ad52:	3514      	adds	r5, #20
 800ad54:	429d      	cmp	r5, r3
 800ad56:	d91b      	bls.n	800ad90 <_dtoa_r+0x2b0>
 800ad58:	6041      	str	r1, [r0, #4]
 800ad5a:	9804      	ldr	r0, [sp, #16]
 800ad5c:	f000 fd18 	bl	800b790 <_Balloc>
 800ad60:	9006      	str	r0, [sp, #24]
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d117      	bne.n	800ad96 <_dtoa_r+0x2b6>
 800ad66:	21b0      	movs	r1, #176	; 0xb0
 800ad68:	4b42      	ldr	r3, [pc, #264]	; (800ae74 <_dtoa_r+0x394>)
 800ad6a:	482e      	ldr	r0, [pc, #184]	; (800ae24 <_dtoa_r+0x344>)
 800ad6c:	9a06      	ldr	r2, [sp, #24]
 800ad6e:	31ff      	adds	r1, #255	; 0xff
 800ad70:	e6cb      	b.n	800ab0a <_dtoa_r+0x2a>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e7dd      	b.n	800ad32 <_dtoa_r+0x252>
 800ad76:	2300      	movs	r3, #0
 800ad78:	940f      	str	r4, [sp, #60]	; 0x3c
 800ad7a:	9322      	str	r3, [sp, #136]	; 0x88
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad80:	9307      	str	r3, [sp, #28]
 800ad82:	2200      	movs	r2, #0
 800ad84:	3313      	adds	r3, #19
 800ad86:	e7cf      	b.n	800ad28 <_dtoa_r+0x248>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad8c:	3b02      	subs	r3, #2
 800ad8e:	e7f6      	b.n	800ad7e <_dtoa_r+0x29e>
 800ad90:	3101      	adds	r1, #1
 800ad92:	0052      	lsls	r2, r2, #1
 800ad94:	e7dc      	b.n	800ad50 <_dtoa_r+0x270>
 800ad96:	9b04      	ldr	r3, [sp, #16]
 800ad98:	9a06      	ldr	r2, [sp, #24]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	9b07      	ldr	r3, [sp, #28]
 800ada0:	2b0e      	cmp	r3, #14
 800ada2:	d900      	bls.n	800ada6 <_dtoa_r+0x2c6>
 800ada4:	e0e5      	b.n	800af72 <_dtoa_r+0x492>
 800ada6:	2c00      	cmp	r4, #0
 800ada8:	d100      	bne.n	800adac <_dtoa_r+0x2cc>
 800adaa:	e0e2      	b.n	800af72 <_dtoa_r+0x492>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dd64      	ble.n	800ae7c <_dtoa_r+0x39c>
 800adb2:	210f      	movs	r1, #15
 800adb4:	9a03      	ldr	r2, [sp, #12]
 800adb6:	4b2b      	ldr	r3, [pc, #172]	; (800ae64 <_dtoa_r+0x384>)
 800adb8:	400a      	ands	r2, r1
 800adba:	00d2      	lsls	r2, r2, #3
 800adbc:	189b      	adds	r3, r3, r2
 800adbe:	681e      	ldr	r6, [r3, #0]
 800adc0:	685f      	ldr	r7, [r3, #4]
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	2402      	movs	r4, #2
 800adc6:	111d      	asrs	r5, r3, #4
 800adc8:	05db      	lsls	r3, r3, #23
 800adca:	d50a      	bpl.n	800ade2 <_dtoa_r+0x302>
 800adcc:	4b2a      	ldr	r3, [pc, #168]	; (800ae78 <_dtoa_r+0x398>)
 800adce:	400d      	ands	r5, r1
 800add0:	6a1a      	ldr	r2, [r3, #32]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800add6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800add8:	f7f6 fd08 	bl	80017ec <__aeabi_ddiv>
 800addc:	9008      	str	r0, [sp, #32]
 800adde:	9109      	str	r1, [sp, #36]	; 0x24
 800ade0:	3401      	adds	r4, #1
 800ade2:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <_dtoa_r+0x398>)
 800ade4:	930e      	str	r3, [sp, #56]	; 0x38
 800ade6:	2d00      	cmp	r5, #0
 800ade8:	d108      	bne.n	800adfc <_dtoa_r+0x31c>
 800adea:	9808      	ldr	r0, [sp, #32]
 800adec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800adee:	0032      	movs	r2, r6
 800adf0:	003b      	movs	r3, r7
 800adf2:	f7f6 fcfb 	bl	80017ec <__aeabi_ddiv>
 800adf6:	9008      	str	r0, [sp, #32]
 800adf8:	9109      	str	r1, [sp, #36]	; 0x24
 800adfa:	e05a      	b.n	800aeb2 <_dtoa_r+0x3d2>
 800adfc:	2301      	movs	r3, #1
 800adfe:	421d      	tst	r5, r3
 800ae00:	d009      	beq.n	800ae16 <_dtoa_r+0x336>
 800ae02:	18e4      	adds	r4, r4, r3
 800ae04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae06:	0030      	movs	r0, r6
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	0039      	movs	r1, r7
 800ae0e:	f7f7 f8e7 	bl	8001fe0 <__aeabi_dmul>
 800ae12:	0006      	movs	r6, r0
 800ae14:	000f      	movs	r7, r1
 800ae16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae18:	106d      	asrs	r5, r5, #1
 800ae1a:	3308      	adds	r3, #8
 800ae1c:	e7e2      	b.n	800ade4 <_dtoa_r+0x304>
 800ae1e:	46c0      	nop			; (mov r8, r8)
 800ae20:	0800c7a1 	.word	0x0800c7a1
 800ae24:	0800c7b8 	.word	0x0800c7b8
 800ae28:	7ff00000 	.word	0x7ff00000
 800ae2c:	0000270f 	.word	0x0000270f
 800ae30:	0800c79d 	.word	0x0800c79d
 800ae34:	0800c7a0 	.word	0x0800c7a0
 800ae38:	0800c770 	.word	0x0800c770
 800ae3c:	0800c771 	.word	0x0800c771
 800ae40:	3ff00000 	.word	0x3ff00000
 800ae44:	fffffc01 	.word	0xfffffc01
 800ae48:	3ff80000 	.word	0x3ff80000
 800ae4c:	636f4361 	.word	0x636f4361
 800ae50:	3fd287a7 	.word	0x3fd287a7
 800ae54:	8b60c8b3 	.word	0x8b60c8b3
 800ae58:	3fc68a28 	.word	0x3fc68a28
 800ae5c:	509f79fb 	.word	0x509f79fb
 800ae60:	3fd34413 	.word	0x3fd34413
 800ae64:	0800c8a8 	.word	0x0800c8a8
 800ae68:	00000432 	.word	0x00000432
 800ae6c:	00000412 	.word	0x00000412
 800ae70:	fe100000 	.word	0xfe100000
 800ae74:	0800c810 	.word	0x0800c810
 800ae78:	0800c880 	.word	0x0800c880
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	2402      	movs	r4, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d016      	beq.n	800aeb2 <_dtoa_r+0x3d2>
 800ae84:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae86:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae88:	220f      	movs	r2, #15
 800ae8a:	425d      	negs	r5, r3
 800ae8c:	402a      	ands	r2, r5
 800ae8e:	4bdd      	ldr	r3, [pc, #884]	; (800b204 <_dtoa_r+0x724>)
 800ae90:	00d2      	lsls	r2, r2, #3
 800ae92:	189b      	adds	r3, r3, r2
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f7f7 f8a2 	bl	8001fe0 <__aeabi_dmul>
 800ae9c:	2701      	movs	r7, #1
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9008      	str	r0, [sp, #32]
 800aea2:	9109      	str	r1, [sp, #36]	; 0x24
 800aea4:	4ed8      	ldr	r6, [pc, #864]	; (800b208 <_dtoa_r+0x728>)
 800aea6:	112d      	asrs	r5, r5, #4
 800aea8:	2d00      	cmp	r5, #0
 800aeaa:	d000      	beq.n	800aeae <_dtoa_r+0x3ce>
 800aeac:	e091      	b.n	800afd2 <_dtoa_r+0x4f2>
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1a1      	bne.n	800adf6 <_dtoa_r+0x316>
 800aeb2:	9e08      	ldr	r6, [sp, #32]
 800aeb4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aeb6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d100      	bne.n	800aebe <_dtoa_r+0x3de>
 800aebc:	e094      	b.n	800afe8 <_dtoa_r+0x508>
 800aebe:	2200      	movs	r2, #0
 800aec0:	0030      	movs	r0, r6
 800aec2:	0039      	movs	r1, r7
 800aec4:	4bd1      	ldr	r3, [pc, #836]	; (800b20c <_dtoa_r+0x72c>)
 800aec6:	f7f5 fac7 	bl	8000458 <__aeabi_dcmplt>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d100      	bne.n	800aed0 <_dtoa_r+0x3f0>
 800aece:	e08b      	b.n	800afe8 <_dtoa_r+0x508>
 800aed0:	9b07      	ldr	r3, [sp, #28]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d100      	bne.n	800aed8 <_dtoa_r+0x3f8>
 800aed6:	e087      	b.n	800afe8 <_dtoa_r+0x508>
 800aed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	dd45      	ble.n	800af6a <_dtoa_r+0x48a>
 800aede:	9b03      	ldr	r3, [sp, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	3b01      	subs	r3, #1
 800aee4:	930e      	str	r3, [sp, #56]	; 0x38
 800aee6:	0030      	movs	r0, r6
 800aee8:	4bc9      	ldr	r3, [pc, #804]	; (800b210 <_dtoa_r+0x730>)
 800aeea:	0039      	movs	r1, r7
 800aeec:	f7f7 f878 	bl	8001fe0 <__aeabi_dmul>
 800aef0:	9008      	str	r0, [sp, #32]
 800aef2:	9109      	str	r1, [sp, #36]	; 0x24
 800aef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef6:	3401      	adds	r4, #1
 800aef8:	0020      	movs	r0, r4
 800aefa:	9e08      	ldr	r6, [sp, #32]
 800aefc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aefe:	9312      	str	r3, [sp, #72]	; 0x48
 800af00:	f7f7 ff06 	bl	8002d10 <__aeabi_i2d>
 800af04:	0032      	movs	r2, r6
 800af06:	003b      	movs	r3, r7
 800af08:	f7f7 f86a 	bl	8001fe0 <__aeabi_dmul>
 800af0c:	2200      	movs	r2, #0
 800af0e:	4bc1      	ldr	r3, [pc, #772]	; (800b214 <_dtoa_r+0x734>)
 800af10:	f7f6 f90c 	bl	800112c <__aeabi_dadd>
 800af14:	4ac0      	ldr	r2, [pc, #768]	; (800b218 <_dtoa_r+0x738>)
 800af16:	9014      	str	r0, [sp, #80]	; 0x50
 800af18:	9115      	str	r1, [sp, #84]	; 0x54
 800af1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800af1e:	4694      	mov	ip, r2
 800af20:	9308      	str	r3, [sp, #32]
 800af22:	9409      	str	r4, [sp, #36]	; 0x24
 800af24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af26:	4463      	add	r3, ip
 800af28:	9318      	str	r3, [sp, #96]	; 0x60
 800af2a:	9309      	str	r3, [sp, #36]	; 0x24
 800af2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d15e      	bne.n	800aff0 <_dtoa_r+0x510>
 800af32:	2200      	movs	r2, #0
 800af34:	4bb9      	ldr	r3, [pc, #740]	; (800b21c <_dtoa_r+0x73c>)
 800af36:	0030      	movs	r0, r6
 800af38:	0039      	movs	r1, r7
 800af3a:	f7f7 fb13 	bl	8002564 <__aeabi_dsub>
 800af3e:	9a08      	ldr	r2, [sp, #32]
 800af40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800af42:	0004      	movs	r4, r0
 800af44:	000d      	movs	r5, r1
 800af46:	f7f5 fa9b 	bl	8000480 <__aeabi_dcmpgt>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d000      	beq.n	800af50 <_dtoa_r+0x470>
 800af4e:	e2b3      	b.n	800b4b8 <_dtoa_r+0x9d8>
 800af50:	48b3      	ldr	r0, [pc, #716]	; (800b220 <_dtoa_r+0x740>)
 800af52:	9915      	ldr	r1, [sp, #84]	; 0x54
 800af54:	4684      	mov	ip, r0
 800af56:	4461      	add	r1, ip
 800af58:	000b      	movs	r3, r1
 800af5a:	0020      	movs	r0, r4
 800af5c:	0029      	movs	r1, r5
 800af5e:	9a08      	ldr	r2, [sp, #32]
 800af60:	f7f5 fa7a 	bl	8000458 <__aeabi_dcmplt>
 800af64:	2800      	cmp	r0, #0
 800af66:	d000      	beq.n	800af6a <_dtoa_r+0x48a>
 800af68:	e2a3      	b.n	800b4b2 <_dtoa_r+0x9d2>
 800af6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800af6e:	9308      	str	r3, [sp, #32]
 800af70:	9409      	str	r4, [sp, #36]	; 0x24
 800af72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af74:	2b00      	cmp	r3, #0
 800af76:	da00      	bge.n	800af7a <_dtoa_r+0x49a>
 800af78:	e179      	b.n	800b26e <_dtoa_r+0x78e>
 800af7a:	9a03      	ldr	r2, [sp, #12]
 800af7c:	2a0e      	cmp	r2, #14
 800af7e:	dd00      	ble.n	800af82 <_dtoa_r+0x4a2>
 800af80:	e175      	b.n	800b26e <_dtoa_r+0x78e>
 800af82:	4ba0      	ldr	r3, [pc, #640]	; (800b204 <_dtoa_r+0x724>)
 800af84:	00d2      	lsls	r2, r2, #3
 800af86:	189b      	adds	r3, r3, r2
 800af88:	681e      	ldr	r6, [r3, #0]
 800af8a:	685f      	ldr	r7, [r3, #4]
 800af8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af8e:	2b00      	cmp	r3, #0
 800af90:	db00      	blt.n	800af94 <_dtoa_r+0x4b4>
 800af92:	e0e5      	b.n	800b160 <_dtoa_r+0x680>
 800af94:	9b07      	ldr	r3, [sp, #28]
 800af96:	2b00      	cmp	r3, #0
 800af98:	dd00      	ble.n	800af9c <_dtoa_r+0x4bc>
 800af9a:	e0e1      	b.n	800b160 <_dtoa_r+0x680>
 800af9c:	d000      	beq.n	800afa0 <_dtoa_r+0x4c0>
 800af9e:	e288      	b.n	800b4b2 <_dtoa_r+0x9d2>
 800afa0:	2200      	movs	r2, #0
 800afa2:	0030      	movs	r0, r6
 800afa4:	0039      	movs	r1, r7
 800afa6:	4b9d      	ldr	r3, [pc, #628]	; (800b21c <_dtoa_r+0x73c>)
 800afa8:	f7f7 f81a 	bl	8001fe0 <__aeabi_dmul>
 800afac:	9a08      	ldr	r2, [sp, #32]
 800afae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb0:	f7f5 fa70 	bl	8000494 <__aeabi_dcmpge>
 800afb4:	9e07      	ldr	r6, [sp, #28]
 800afb6:	0037      	movs	r7, r6
 800afb8:	2800      	cmp	r0, #0
 800afba:	d000      	beq.n	800afbe <_dtoa_r+0x4de>
 800afbc:	e25f      	b.n	800b47e <_dtoa_r+0x99e>
 800afbe:	9b06      	ldr	r3, [sp, #24]
 800afc0:	9a06      	ldr	r2, [sp, #24]
 800afc2:	3301      	adds	r3, #1
 800afc4:	9308      	str	r3, [sp, #32]
 800afc6:	2331      	movs	r3, #49	; 0x31
 800afc8:	7013      	strb	r3, [r2, #0]
 800afca:	9b03      	ldr	r3, [sp, #12]
 800afcc:	3301      	adds	r3, #1
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	e25a      	b.n	800b488 <_dtoa_r+0x9a8>
 800afd2:	423d      	tst	r5, r7
 800afd4:	d005      	beq.n	800afe2 <_dtoa_r+0x502>
 800afd6:	6832      	ldr	r2, [r6, #0]
 800afd8:	6873      	ldr	r3, [r6, #4]
 800afda:	f7f7 f801 	bl	8001fe0 <__aeabi_dmul>
 800afde:	003b      	movs	r3, r7
 800afe0:	3401      	adds	r4, #1
 800afe2:	106d      	asrs	r5, r5, #1
 800afe4:	3608      	adds	r6, #8
 800afe6:	e75f      	b.n	800aea8 <_dtoa_r+0x3c8>
 800afe8:	9b03      	ldr	r3, [sp, #12]
 800afea:	930e      	str	r3, [sp, #56]	; 0x38
 800afec:	9b07      	ldr	r3, [sp, #28]
 800afee:	e783      	b.n	800aef8 <_dtoa_r+0x418>
 800aff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aff2:	4b84      	ldr	r3, [pc, #528]	; (800b204 <_dtoa_r+0x724>)
 800aff4:	3a01      	subs	r2, #1
 800aff6:	00d2      	lsls	r2, r2, #3
 800aff8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800affa:	189b      	adds	r3, r3, r2
 800affc:	9c08      	ldr	r4, [sp, #32]
 800affe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	2900      	cmp	r1, #0
 800b006:	d051      	beq.n	800b0ac <_dtoa_r+0x5cc>
 800b008:	2000      	movs	r0, #0
 800b00a:	4986      	ldr	r1, [pc, #536]	; (800b224 <_dtoa_r+0x744>)
 800b00c:	f7f6 fbee 	bl	80017ec <__aeabi_ddiv>
 800b010:	0022      	movs	r2, r4
 800b012:	002b      	movs	r3, r5
 800b014:	f7f7 faa6 	bl	8002564 <__aeabi_dsub>
 800b018:	9a06      	ldr	r2, [sp, #24]
 800b01a:	0004      	movs	r4, r0
 800b01c:	4694      	mov	ip, r2
 800b01e:	000d      	movs	r5, r1
 800b020:	9b06      	ldr	r3, [sp, #24]
 800b022:	9314      	str	r3, [sp, #80]	; 0x50
 800b024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b026:	4463      	add	r3, ip
 800b028:	9318      	str	r3, [sp, #96]	; 0x60
 800b02a:	0039      	movs	r1, r7
 800b02c:	0030      	movs	r0, r6
 800b02e:	f7f7 fe39 	bl	8002ca4 <__aeabi_d2iz>
 800b032:	9012      	str	r0, [sp, #72]	; 0x48
 800b034:	f7f7 fe6c 	bl	8002d10 <__aeabi_i2d>
 800b038:	0002      	movs	r2, r0
 800b03a:	000b      	movs	r3, r1
 800b03c:	0030      	movs	r0, r6
 800b03e:	0039      	movs	r1, r7
 800b040:	f7f7 fa90 	bl	8002564 <__aeabi_dsub>
 800b044:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b046:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b048:	3301      	adds	r3, #1
 800b04a:	9308      	str	r3, [sp, #32]
 800b04c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b04e:	0006      	movs	r6, r0
 800b050:	3330      	adds	r3, #48	; 0x30
 800b052:	7013      	strb	r3, [r2, #0]
 800b054:	0022      	movs	r2, r4
 800b056:	002b      	movs	r3, r5
 800b058:	000f      	movs	r7, r1
 800b05a:	f7f5 f9fd 	bl	8000458 <__aeabi_dcmplt>
 800b05e:	2800      	cmp	r0, #0
 800b060:	d174      	bne.n	800b14c <_dtoa_r+0x66c>
 800b062:	0032      	movs	r2, r6
 800b064:	003b      	movs	r3, r7
 800b066:	2000      	movs	r0, #0
 800b068:	4968      	ldr	r1, [pc, #416]	; (800b20c <_dtoa_r+0x72c>)
 800b06a:	f7f7 fa7b 	bl	8002564 <__aeabi_dsub>
 800b06e:	0022      	movs	r2, r4
 800b070:	002b      	movs	r3, r5
 800b072:	f7f5 f9f1 	bl	8000458 <__aeabi_dcmplt>
 800b076:	2800      	cmp	r0, #0
 800b078:	d000      	beq.n	800b07c <_dtoa_r+0x59c>
 800b07a:	e0d7      	b.n	800b22c <_dtoa_r+0x74c>
 800b07c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b07e:	9a08      	ldr	r2, [sp, #32]
 800b080:	4293      	cmp	r3, r2
 800b082:	d100      	bne.n	800b086 <_dtoa_r+0x5a6>
 800b084:	e771      	b.n	800af6a <_dtoa_r+0x48a>
 800b086:	2200      	movs	r2, #0
 800b088:	0020      	movs	r0, r4
 800b08a:	0029      	movs	r1, r5
 800b08c:	4b60      	ldr	r3, [pc, #384]	; (800b210 <_dtoa_r+0x730>)
 800b08e:	f7f6 ffa7 	bl	8001fe0 <__aeabi_dmul>
 800b092:	4b5f      	ldr	r3, [pc, #380]	; (800b210 <_dtoa_r+0x730>)
 800b094:	0004      	movs	r4, r0
 800b096:	000d      	movs	r5, r1
 800b098:	0030      	movs	r0, r6
 800b09a:	0039      	movs	r1, r7
 800b09c:	2200      	movs	r2, #0
 800b09e:	f7f6 ff9f 	bl	8001fe0 <__aeabi_dmul>
 800b0a2:	9b08      	ldr	r3, [sp, #32]
 800b0a4:	0006      	movs	r6, r0
 800b0a6:	000f      	movs	r7, r1
 800b0a8:	9314      	str	r3, [sp, #80]	; 0x50
 800b0aa:	e7be      	b.n	800b02a <_dtoa_r+0x54a>
 800b0ac:	0020      	movs	r0, r4
 800b0ae:	0029      	movs	r1, r5
 800b0b0:	f7f6 ff96 	bl	8001fe0 <__aeabi_dmul>
 800b0b4:	9a06      	ldr	r2, [sp, #24]
 800b0b6:	9b06      	ldr	r3, [sp, #24]
 800b0b8:	4694      	mov	ip, r2
 800b0ba:	9308      	str	r3, [sp, #32]
 800b0bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0be:	9014      	str	r0, [sp, #80]	; 0x50
 800b0c0:	9115      	str	r1, [sp, #84]	; 0x54
 800b0c2:	4463      	add	r3, ip
 800b0c4:	9319      	str	r3, [sp, #100]	; 0x64
 800b0c6:	0030      	movs	r0, r6
 800b0c8:	0039      	movs	r1, r7
 800b0ca:	f7f7 fdeb 	bl	8002ca4 <__aeabi_d2iz>
 800b0ce:	9018      	str	r0, [sp, #96]	; 0x60
 800b0d0:	f7f7 fe1e 	bl	8002d10 <__aeabi_i2d>
 800b0d4:	0002      	movs	r2, r0
 800b0d6:	000b      	movs	r3, r1
 800b0d8:	0030      	movs	r0, r6
 800b0da:	0039      	movs	r1, r7
 800b0dc:	f7f7 fa42 	bl	8002564 <__aeabi_dsub>
 800b0e0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	3630      	adds	r6, #48	; 0x30
 800b0e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b0e8:	701e      	strb	r6, [r3, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	0004      	movs	r4, r0
 800b0ee:	000d      	movs	r5, r1
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d12d      	bne.n	800b152 <_dtoa_r+0x672>
 800b0f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b0f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b0fa:	9a06      	ldr	r2, [sp, #24]
 800b0fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0fe:	4694      	mov	ip, r2
 800b100:	4463      	add	r3, ip
 800b102:	2200      	movs	r2, #0
 800b104:	9308      	str	r3, [sp, #32]
 800b106:	4b47      	ldr	r3, [pc, #284]	; (800b224 <_dtoa_r+0x744>)
 800b108:	f7f6 f810 	bl	800112c <__aeabi_dadd>
 800b10c:	0002      	movs	r2, r0
 800b10e:	000b      	movs	r3, r1
 800b110:	0020      	movs	r0, r4
 800b112:	0029      	movs	r1, r5
 800b114:	f7f5 f9b4 	bl	8000480 <__aeabi_dcmpgt>
 800b118:	2800      	cmp	r0, #0
 800b11a:	d000      	beq.n	800b11e <_dtoa_r+0x63e>
 800b11c:	e086      	b.n	800b22c <_dtoa_r+0x74c>
 800b11e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b122:	2000      	movs	r0, #0
 800b124:	493f      	ldr	r1, [pc, #252]	; (800b224 <_dtoa_r+0x744>)
 800b126:	f7f7 fa1d 	bl	8002564 <__aeabi_dsub>
 800b12a:	0002      	movs	r2, r0
 800b12c:	000b      	movs	r3, r1
 800b12e:	0020      	movs	r0, r4
 800b130:	0029      	movs	r1, r5
 800b132:	f7f5 f991 	bl	8000458 <__aeabi_dcmplt>
 800b136:	2800      	cmp	r0, #0
 800b138:	d100      	bne.n	800b13c <_dtoa_r+0x65c>
 800b13a:	e716      	b.n	800af6a <_dtoa_r+0x48a>
 800b13c:	9b08      	ldr	r3, [sp, #32]
 800b13e:	001a      	movs	r2, r3
 800b140:	3a01      	subs	r2, #1
 800b142:	9208      	str	r2, [sp, #32]
 800b144:	7812      	ldrb	r2, [r2, #0]
 800b146:	2a30      	cmp	r2, #48	; 0x30
 800b148:	d0f8      	beq.n	800b13c <_dtoa_r+0x65c>
 800b14a:	9308      	str	r3, [sp, #32]
 800b14c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b14e:	9303      	str	r3, [sp, #12]
 800b150:	e046      	b.n	800b1e0 <_dtoa_r+0x700>
 800b152:	2200      	movs	r2, #0
 800b154:	4b2e      	ldr	r3, [pc, #184]	; (800b210 <_dtoa_r+0x730>)
 800b156:	f7f6 ff43 	bl	8001fe0 <__aeabi_dmul>
 800b15a:	0006      	movs	r6, r0
 800b15c:	000f      	movs	r7, r1
 800b15e:	e7b2      	b.n	800b0c6 <_dtoa_r+0x5e6>
 800b160:	9b06      	ldr	r3, [sp, #24]
 800b162:	9a06      	ldr	r2, [sp, #24]
 800b164:	930a      	str	r3, [sp, #40]	; 0x28
 800b166:	9b07      	ldr	r3, [sp, #28]
 800b168:	9c08      	ldr	r4, [sp, #32]
 800b16a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b16c:	3b01      	subs	r3, #1
 800b16e:	189b      	adds	r3, r3, r2
 800b170:	930b      	str	r3, [sp, #44]	; 0x2c
 800b172:	0032      	movs	r2, r6
 800b174:	003b      	movs	r3, r7
 800b176:	0020      	movs	r0, r4
 800b178:	0029      	movs	r1, r5
 800b17a:	f7f6 fb37 	bl	80017ec <__aeabi_ddiv>
 800b17e:	f7f7 fd91 	bl	8002ca4 <__aeabi_d2iz>
 800b182:	9007      	str	r0, [sp, #28]
 800b184:	f7f7 fdc4 	bl	8002d10 <__aeabi_i2d>
 800b188:	0032      	movs	r2, r6
 800b18a:	003b      	movs	r3, r7
 800b18c:	f7f6 ff28 	bl	8001fe0 <__aeabi_dmul>
 800b190:	0002      	movs	r2, r0
 800b192:	000b      	movs	r3, r1
 800b194:	0020      	movs	r0, r4
 800b196:	0029      	movs	r1, r5
 800b198:	f7f7 f9e4 	bl	8002564 <__aeabi_dsub>
 800b19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19e:	001a      	movs	r2, r3
 800b1a0:	3201      	adds	r2, #1
 800b1a2:	920a      	str	r2, [sp, #40]	; 0x28
 800b1a4:	9208      	str	r2, [sp, #32]
 800b1a6:	9a07      	ldr	r2, [sp, #28]
 800b1a8:	3230      	adds	r2, #48	; 0x30
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d14f      	bne.n	800b252 <_dtoa_r+0x772>
 800b1b2:	0002      	movs	r2, r0
 800b1b4:	000b      	movs	r3, r1
 800b1b6:	f7f5 ffb9 	bl	800112c <__aeabi_dadd>
 800b1ba:	0032      	movs	r2, r6
 800b1bc:	003b      	movs	r3, r7
 800b1be:	0004      	movs	r4, r0
 800b1c0:	000d      	movs	r5, r1
 800b1c2:	f7f5 f95d 	bl	8000480 <__aeabi_dcmpgt>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d12e      	bne.n	800b228 <_dtoa_r+0x748>
 800b1ca:	0032      	movs	r2, r6
 800b1cc:	003b      	movs	r3, r7
 800b1ce:	0020      	movs	r0, r4
 800b1d0:	0029      	movs	r1, r5
 800b1d2:	f7f5 f93b 	bl	800044c <__aeabi_dcmpeq>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d002      	beq.n	800b1e0 <_dtoa_r+0x700>
 800b1da:	9b07      	ldr	r3, [sp, #28]
 800b1dc:	07de      	lsls	r6, r3, #31
 800b1de:	d423      	bmi.n	800b228 <_dtoa_r+0x748>
 800b1e0:	9905      	ldr	r1, [sp, #20]
 800b1e2:	9804      	ldr	r0, [sp, #16]
 800b1e4:	f000 fb18 	bl	800b818 <_Bfree>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	9a08      	ldr	r2, [sp, #32]
 800b1ec:	7013      	strb	r3, [r2, #0]
 800b1ee:	9b03      	ldr	r3, [sp, #12]
 800b1f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d100      	bne.n	800b1fe <_dtoa_r+0x71e>
 800b1fc:	e4ba      	b.n	800ab74 <_dtoa_r+0x94>
 800b1fe:	9a08      	ldr	r2, [sp, #32]
 800b200:	601a      	str	r2, [r3, #0]
 800b202:	e4b7      	b.n	800ab74 <_dtoa_r+0x94>
 800b204:	0800c8a8 	.word	0x0800c8a8
 800b208:	0800c880 	.word	0x0800c880
 800b20c:	3ff00000 	.word	0x3ff00000
 800b210:	40240000 	.word	0x40240000
 800b214:	401c0000 	.word	0x401c0000
 800b218:	fcc00000 	.word	0xfcc00000
 800b21c:	40140000 	.word	0x40140000
 800b220:	7cc00000 	.word	0x7cc00000
 800b224:	3fe00000 	.word	0x3fe00000
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	930e      	str	r3, [sp, #56]	; 0x38
 800b22c:	9b08      	ldr	r3, [sp, #32]
 800b22e:	9308      	str	r3, [sp, #32]
 800b230:	3b01      	subs	r3, #1
 800b232:	781a      	ldrb	r2, [r3, #0]
 800b234:	2a39      	cmp	r2, #57	; 0x39
 800b236:	d108      	bne.n	800b24a <_dtoa_r+0x76a>
 800b238:	9a06      	ldr	r2, [sp, #24]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d1f7      	bne.n	800b22e <_dtoa_r+0x74e>
 800b23e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b240:	9906      	ldr	r1, [sp, #24]
 800b242:	3201      	adds	r2, #1
 800b244:	920e      	str	r2, [sp, #56]	; 0x38
 800b246:	2230      	movs	r2, #48	; 0x30
 800b248:	700a      	strb	r2, [r1, #0]
 800b24a:	781a      	ldrb	r2, [r3, #0]
 800b24c:	3201      	adds	r2, #1
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	e77c      	b.n	800b14c <_dtoa_r+0x66c>
 800b252:	2200      	movs	r2, #0
 800b254:	4ba9      	ldr	r3, [pc, #676]	; (800b4fc <_dtoa_r+0xa1c>)
 800b256:	f7f6 fec3 	bl	8001fe0 <__aeabi_dmul>
 800b25a:	2200      	movs	r2, #0
 800b25c:	2300      	movs	r3, #0
 800b25e:	0004      	movs	r4, r0
 800b260:	000d      	movs	r5, r1
 800b262:	f7f5 f8f3 	bl	800044c <__aeabi_dcmpeq>
 800b266:	2800      	cmp	r0, #0
 800b268:	d100      	bne.n	800b26c <_dtoa_r+0x78c>
 800b26a:	e782      	b.n	800b172 <_dtoa_r+0x692>
 800b26c:	e7b8      	b.n	800b1e0 <_dtoa_r+0x700>
 800b26e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b270:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b272:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b274:	2f00      	cmp	r7, #0
 800b276:	d012      	beq.n	800b29e <_dtoa_r+0x7be>
 800b278:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b27a:	2a01      	cmp	r2, #1
 800b27c:	dc6e      	bgt.n	800b35c <_dtoa_r+0x87c>
 800b27e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b280:	2a00      	cmp	r2, #0
 800b282:	d065      	beq.n	800b350 <_dtoa_r+0x870>
 800b284:	4a9e      	ldr	r2, [pc, #632]	; (800b500 <_dtoa_r+0xa20>)
 800b286:	189b      	adds	r3, r3, r2
 800b288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28a:	2101      	movs	r1, #1
 800b28c:	18d2      	adds	r2, r2, r3
 800b28e:	920a      	str	r2, [sp, #40]	; 0x28
 800b290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b292:	9804      	ldr	r0, [sp, #16]
 800b294:	18d3      	adds	r3, r2, r3
 800b296:	930c      	str	r3, [sp, #48]	; 0x30
 800b298:	f000 fb6e 	bl	800b978 <__i2b>
 800b29c:	0007      	movs	r7, r0
 800b29e:	2c00      	cmp	r4, #0
 800b2a0:	d00e      	beq.n	800b2c0 <_dtoa_r+0x7e0>
 800b2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	dd0b      	ble.n	800b2c0 <_dtoa_r+0x7e0>
 800b2a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2aa:	0023      	movs	r3, r4
 800b2ac:	4294      	cmp	r4, r2
 800b2ae:	dd00      	ble.n	800b2b2 <_dtoa_r+0x7d2>
 800b2b0:	0013      	movs	r3, r2
 800b2b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2b4:	1ae4      	subs	r4, r4, r3
 800b2b6:	1ad2      	subs	r2, r2, r3
 800b2b8:	920a      	str	r2, [sp, #40]	; 0x28
 800b2ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	930c      	str	r3, [sp, #48]	; 0x30
 800b2c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01e      	beq.n	800b304 <_dtoa_r+0x824>
 800b2c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d05c      	beq.n	800b386 <_dtoa_r+0x8a6>
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	dd10      	ble.n	800b2f2 <_dtoa_r+0x812>
 800b2d0:	0039      	movs	r1, r7
 800b2d2:	002a      	movs	r2, r5
 800b2d4:	9804      	ldr	r0, [sp, #16]
 800b2d6:	f000 fc17 	bl	800bb08 <__pow5mult>
 800b2da:	9a05      	ldr	r2, [sp, #20]
 800b2dc:	0001      	movs	r1, r0
 800b2de:	0007      	movs	r7, r0
 800b2e0:	9804      	ldr	r0, [sp, #16]
 800b2e2:	f000 fb61 	bl	800b9a8 <__multiply>
 800b2e6:	0006      	movs	r6, r0
 800b2e8:	9905      	ldr	r1, [sp, #20]
 800b2ea:	9804      	ldr	r0, [sp, #16]
 800b2ec:	f000 fa94 	bl	800b818 <_Bfree>
 800b2f0:	9605      	str	r6, [sp, #20]
 800b2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2f4:	1b5a      	subs	r2, r3, r5
 800b2f6:	42ab      	cmp	r3, r5
 800b2f8:	d004      	beq.n	800b304 <_dtoa_r+0x824>
 800b2fa:	9905      	ldr	r1, [sp, #20]
 800b2fc:	9804      	ldr	r0, [sp, #16]
 800b2fe:	f000 fc03 	bl	800bb08 <__pow5mult>
 800b302:	9005      	str	r0, [sp, #20]
 800b304:	2101      	movs	r1, #1
 800b306:	9804      	ldr	r0, [sp, #16]
 800b308:	f000 fb36 	bl	800b978 <__i2b>
 800b30c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b30e:	0006      	movs	r6, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	dd3a      	ble.n	800b38a <_dtoa_r+0x8aa>
 800b314:	001a      	movs	r2, r3
 800b316:	0001      	movs	r1, r0
 800b318:	9804      	ldr	r0, [sp, #16]
 800b31a:	f000 fbf5 	bl	800bb08 <__pow5mult>
 800b31e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b320:	0006      	movs	r6, r0
 800b322:	2500      	movs	r5, #0
 800b324:	2b01      	cmp	r3, #1
 800b326:	dc38      	bgt.n	800b39a <_dtoa_r+0x8ba>
 800b328:	2500      	movs	r5, #0
 800b32a:	9b08      	ldr	r3, [sp, #32]
 800b32c:	42ab      	cmp	r3, r5
 800b32e:	d130      	bne.n	800b392 <_dtoa_r+0x8b2>
 800b330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b332:	031b      	lsls	r3, r3, #12
 800b334:	42ab      	cmp	r3, r5
 800b336:	d12c      	bne.n	800b392 <_dtoa_r+0x8b2>
 800b338:	4b72      	ldr	r3, [pc, #456]	; (800b504 <_dtoa_r+0xa24>)
 800b33a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b33c:	4213      	tst	r3, r2
 800b33e:	d028      	beq.n	800b392 <_dtoa_r+0x8b2>
 800b340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b342:	3501      	adds	r5, #1
 800b344:	3301      	adds	r3, #1
 800b346:	930a      	str	r3, [sp, #40]	; 0x28
 800b348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b34a:	3301      	adds	r3, #1
 800b34c:	930c      	str	r3, [sp, #48]	; 0x30
 800b34e:	e020      	b.n	800b392 <_dtoa_r+0x8b2>
 800b350:	2336      	movs	r3, #54	; 0x36
 800b352:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b354:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b356:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b358:	1a9b      	subs	r3, r3, r2
 800b35a:	e795      	b.n	800b288 <_dtoa_r+0x7a8>
 800b35c:	9b07      	ldr	r3, [sp, #28]
 800b35e:	1e5d      	subs	r5, r3, #1
 800b360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b362:	42ab      	cmp	r3, r5
 800b364:	db07      	blt.n	800b376 <_dtoa_r+0x896>
 800b366:	1b5d      	subs	r5, r3, r5
 800b368:	9b07      	ldr	r3, [sp, #28]
 800b36a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	da8b      	bge.n	800b288 <_dtoa_r+0x7a8>
 800b370:	1ae4      	subs	r4, r4, r3
 800b372:	2300      	movs	r3, #0
 800b374:	e788      	b.n	800b288 <_dtoa_r+0x7a8>
 800b376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b37a:	1aeb      	subs	r3, r5, r3
 800b37c:	18d3      	adds	r3, r2, r3
 800b37e:	950d      	str	r5, [sp, #52]	; 0x34
 800b380:	9313      	str	r3, [sp, #76]	; 0x4c
 800b382:	2500      	movs	r5, #0
 800b384:	e7f0      	b.n	800b368 <_dtoa_r+0x888>
 800b386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b388:	e7b7      	b.n	800b2fa <_dtoa_r+0x81a>
 800b38a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b38c:	2500      	movs	r5, #0
 800b38e:	2b01      	cmp	r3, #1
 800b390:	ddca      	ble.n	800b328 <_dtoa_r+0x848>
 800b392:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b394:	2001      	movs	r0, #1
 800b396:	2b00      	cmp	r3, #0
 800b398:	d008      	beq.n	800b3ac <_dtoa_r+0x8cc>
 800b39a:	6933      	ldr	r3, [r6, #16]
 800b39c:	3303      	adds	r3, #3
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	18f3      	adds	r3, r6, r3
 800b3a2:	6858      	ldr	r0, [r3, #4]
 800b3a4:	f000 faa0 	bl	800b8e8 <__hi0bits>
 800b3a8:	2320      	movs	r3, #32
 800b3aa:	1a18      	subs	r0, r3, r0
 800b3ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3ae:	1818      	adds	r0, r3, r0
 800b3b0:	0002      	movs	r2, r0
 800b3b2:	231f      	movs	r3, #31
 800b3b4:	401a      	ands	r2, r3
 800b3b6:	4218      	tst	r0, r3
 800b3b8:	d047      	beq.n	800b44a <_dtoa_r+0x96a>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	1a9b      	subs	r3, r3, r2
 800b3be:	2b04      	cmp	r3, #4
 800b3c0:	dd3f      	ble.n	800b442 <_dtoa_r+0x962>
 800b3c2:	231c      	movs	r3, #28
 800b3c4:	1a9b      	subs	r3, r3, r2
 800b3c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3c8:	18e4      	adds	r4, r4, r3
 800b3ca:	18d2      	adds	r2, r2, r3
 800b3cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3d0:	18d3      	adds	r3, r2, r3
 800b3d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	dd05      	ble.n	800b3e6 <_dtoa_r+0x906>
 800b3da:	001a      	movs	r2, r3
 800b3dc:	9905      	ldr	r1, [sp, #20]
 800b3de:	9804      	ldr	r0, [sp, #16]
 800b3e0:	f000 fbee 	bl	800bbc0 <__lshift>
 800b3e4:	9005      	str	r0, [sp, #20]
 800b3e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	dd05      	ble.n	800b3f8 <_dtoa_r+0x918>
 800b3ec:	0031      	movs	r1, r6
 800b3ee:	001a      	movs	r2, r3
 800b3f0:	9804      	ldr	r0, [sp, #16]
 800b3f2:	f000 fbe5 	bl	800bbc0 <__lshift>
 800b3f6:	0006      	movs	r6, r0
 800b3f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d027      	beq.n	800b44e <_dtoa_r+0x96e>
 800b3fe:	0031      	movs	r1, r6
 800b400:	9805      	ldr	r0, [sp, #20]
 800b402:	f000 fc4b 	bl	800bc9c <__mcmp>
 800b406:	2800      	cmp	r0, #0
 800b408:	da21      	bge.n	800b44e <_dtoa_r+0x96e>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	220a      	movs	r2, #10
 800b40e:	3b01      	subs	r3, #1
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	9905      	ldr	r1, [sp, #20]
 800b414:	2300      	movs	r3, #0
 800b416:	9804      	ldr	r0, [sp, #16]
 800b418:	f000 fa22 	bl	800b860 <__multadd>
 800b41c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b41e:	9005      	str	r0, [sp, #20]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d100      	bne.n	800b426 <_dtoa_r+0x946>
 800b424:	e15d      	b.n	800b6e2 <_dtoa_r+0xc02>
 800b426:	2300      	movs	r3, #0
 800b428:	0039      	movs	r1, r7
 800b42a:	220a      	movs	r2, #10
 800b42c:	9804      	ldr	r0, [sp, #16]
 800b42e:	f000 fa17 	bl	800b860 <__multadd>
 800b432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b434:	0007      	movs	r7, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	dc49      	bgt.n	800b4ce <_dtoa_r+0x9ee>
 800b43a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	dc0e      	bgt.n	800b45e <_dtoa_r+0x97e>
 800b440:	e045      	b.n	800b4ce <_dtoa_r+0x9ee>
 800b442:	2b04      	cmp	r3, #4
 800b444:	d0c6      	beq.n	800b3d4 <_dtoa_r+0x8f4>
 800b446:	331c      	adds	r3, #28
 800b448:	e7bd      	b.n	800b3c6 <_dtoa_r+0x8e6>
 800b44a:	0013      	movs	r3, r2
 800b44c:	e7fb      	b.n	800b446 <_dtoa_r+0x966>
 800b44e:	9b07      	ldr	r3, [sp, #28]
 800b450:	2b00      	cmp	r3, #0
 800b452:	dc36      	bgt.n	800b4c2 <_dtoa_r+0x9e2>
 800b454:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b456:	2b02      	cmp	r3, #2
 800b458:	dd33      	ble.n	800b4c2 <_dtoa_r+0x9e2>
 800b45a:	9b07      	ldr	r3, [sp, #28]
 800b45c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10c      	bne.n	800b47e <_dtoa_r+0x99e>
 800b464:	0031      	movs	r1, r6
 800b466:	2205      	movs	r2, #5
 800b468:	9804      	ldr	r0, [sp, #16]
 800b46a:	f000 f9f9 	bl	800b860 <__multadd>
 800b46e:	0006      	movs	r6, r0
 800b470:	0001      	movs	r1, r0
 800b472:	9805      	ldr	r0, [sp, #20]
 800b474:	f000 fc12 	bl	800bc9c <__mcmp>
 800b478:	2800      	cmp	r0, #0
 800b47a:	dd00      	ble.n	800b47e <_dtoa_r+0x99e>
 800b47c:	e59f      	b.n	800afbe <_dtoa_r+0x4de>
 800b47e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b480:	43db      	mvns	r3, r3
 800b482:	9303      	str	r3, [sp, #12]
 800b484:	9b06      	ldr	r3, [sp, #24]
 800b486:	9308      	str	r3, [sp, #32]
 800b488:	2500      	movs	r5, #0
 800b48a:	0031      	movs	r1, r6
 800b48c:	9804      	ldr	r0, [sp, #16]
 800b48e:	f000 f9c3 	bl	800b818 <_Bfree>
 800b492:	2f00      	cmp	r7, #0
 800b494:	d100      	bne.n	800b498 <_dtoa_r+0x9b8>
 800b496:	e6a3      	b.n	800b1e0 <_dtoa_r+0x700>
 800b498:	2d00      	cmp	r5, #0
 800b49a:	d005      	beq.n	800b4a8 <_dtoa_r+0x9c8>
 800b49c:	42bd      	cmp	r5, r7
 800b49e:	d003      	beq.n	800b4a8 <_dtoa_r+0x9c8>
 800b4a0:	0029      	movs	r1, r5
 800b4a2:	9804      	ldr	r0, [sp, #16]
 800b4a4:	f000 f9b8 	bl	800b818 <_Bfree>
 800b4a8:	0039      	movs	r1, r7
 800b4aa:	9804      	ldr	r0, [sp, #16]
 800b4ac:	f000 f9b4 	bl	800b818 <_Bfree>
 800b4b0:	e696      	b.n	800b1e0 <_dtoa_r+0x700>
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	0037      	movs	r7, r6
 800b4b6:	e7e2      	b.n	800b47e <_dtoa_r+0x99e>
 800b4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b4bc:	9303      	str	r3, [sp, #12]
 800b4be:	0037      	movs	r7, r6
 800b4c0:	e57d      	b.n	800afbe <_dtoa_r+0x4de>
 800b4c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d100      	bne.n	800b4ca <_dtoa_r+0x9ea>
 800b4c8:	e0c3      	b.n	800b652 <_dtoa_r+0xb72>
 800b4ca:	9b07      	ldr	r3, [sp, #28]
 800b4cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	dd05      	ble.n	800b4de <_dtoa_r+0x9fe>
 800b4d2:	0039      	movs	r1, r7
 800b4d4:	0022      	movs	r2, r4
 800b4d6:	9804      	ldr	r0, [sp, #16]
 800b4d8:	f000 fb72 	bl	800bbc0 <__lshift>
 800b4dc:	0007      	movs	r7, r0
 800b4de:	0038      	movs	r0, r7
 800b4e0:	2d00      	cmp	r5, #0
 800b4e2:	d024      	beq.n	800b52e <_dtoa_r+0xa4e>
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	9804      	ldr	r0, [sp, #16]
 800b4e8:	f000 f952 	bl	800b790 <_Balloc>
 800b4ec:	1e04      	subs	r4, r0, #0
 800b4ee:	d111      	bne.n	800b514 <_dtoa_r+0xa34>
 800b4f0:	0022      	movs	r2, r4
 800b4f2:	4b05      	ldr	r3, [pc, #20]	; (800b508 <_dtoa_r+0xa28>)
 800b4f4:	4805      	ldr	r0, [pc, #20]	; (800b50c <_dtoa_r+0xa2c>)
 800b4f6:	4906      	ldr	r1, [pc, #24]	; (800b510 <_dtoa_r+0xa30>)
 800b4f8:	f7ff fb07 	bl	800ab0a <_dtoa_r+0x2a>
 800b4fc:	40240000 	.word	0x40240000
 800b500:	00000433 	.word	0x00000433
 800b504:	7ff00000 	.word	0x7ff00000
 800b508:	0800c810 	.word	0x0800c810
 800b50c:	0800c7b8 	.word	0x0800c7b8
 800b510:	000002ef 	.word	0x000002ef
 800b514:	0039      	movs	r1, r7
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	310c      	adds	r1, #12
 800b51a:	3202      	adds	r2, #2
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	300c      	adds	r0, #12
 800b520:	f7ff fa46 	bl	800a9b0 <memcpy>
 800b524:	2201      	movs	r2, #1
 800b526:	0021      	movs	r1, r4
 800b528:	9804      	ldr	r0, [sp, #16]
 800b52a:	f000 fb49 	bl	800bbc0 <__lshift>
 800b52e:	9b06      	ldr	r3, [sp, #24]
 800b530:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b532:	9307      	str	r3, [sp, #28]
 800b534:	3b01      	subs	r3, #1
 800b536:	189b      	adds	r3, r3, r2
 800b538:	2201      	movs	r2, #1
 800b53a:	003d      	movs	r5, r7
 800b53c:	0007      	movs	r7, r0
 800b53e:	930e      	str	r3, [sp, #56]	; 0x38
 800b540:	9b08      	ldr	r3, [sp, #32]
 800b542:	4013      	ands	r3, r2
 800b544:	930d      	str	r3, [sp, #52]	; 0x34
 800b546:	0031      	movs	r1, r6
 800b548:	9805      	ldr	r0, [sp, #20]
 800b54a:	f7ff fa3a 	bl	800a9c2 <quorem>
 800b54e:	0029      	movs	r1, r5
 800b550:	0004      	movs	r4, r0
 800b552:	900b      	str	r0, [sp, #44]	; 0x2c
 800b554:	9805      	ldr	r0, [sp, #20]
 800b556:	f000 fba1 	bl	800bc9c <__mcmp>
 800b55a:	003a      	movs	r2, r7
 800b55c:	900c      	str	r0, [sp, #48]	; 0x30
 800b55e:	0031      	movs	r1, r6
 800b560:	9804      	ldr	r0, [sp, #16]
 800b562:	f000 fbb7 	bl	800bcd4 <__mdiff>
 800b566:	2201      	movs	r2, #1
 800b568:	68c3      	ldr	r3, [r0, #12]
 800b56a:	3430      	adds	r4, #48	; 0x30
 800b56c:	9008      	str	r0, [sp, #32]
 800b56e:	920a      	str	r2, [sp, #40]	; 0x28
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <_dtoa_r+0xa9e>
 800b574:	0001      	movs	r1, r0
 800b576:	9805      	ldr	r0, [sp, #20]
 800b578:	f000 fb90 	bl	800bc9c <__mcmp>
 800b57c:	900a      	str	r0, [sp, #40]	; 0x28
 800b57e:	9908      	ldr	r1, [sp, #32]
 800b580:	9804      	ldr	r0, [sp, #16]
 800b582:	f000 f949 	bl	800b818 <_Bfree>
 800b586:	9b07      	ldr	r3, [sp, #28]
 800b588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b58a:	3301      	adds	r3, #1
 800b58c:	9308      	str	r3, [sp, #32]
 800b58e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b590:	4313      	orrs	r3, r2
 800b592:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b594:	4313      	orrs	r3, r2
 800b596:	d109      	bne.n	800b5ac <_dtoa_r+0xacc>
 800b598:	2c39      	cmp	r4, #57	; 0x39
 800b59a:	d022      	beq.n	800b5e2 <_dtoa_r+0xb02>
 800b59c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	dd01      	ble.n	800b5a6 <_dtoa_r+0xac6>
 800b5a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b5a4:	3431      	adds	r4, #49	; 0x31
 800b5a6:	9b07      	ldr	r3, [sp, #28]
 800b5a8:	701c      	strb	r4, [r3, #0]
 800b5aa:	e76e      	b.n	800b48a <_dtoa_r+0x9aa>
 800b5ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	db04      	blt.n	800b5bc <_dtoa_r+0xadc>
 800b5b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	d11e      	bne.n	800b5fa <_dtoa_r+0xb1a>
 800b5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	ddf1      	ble.n	800b5a6 <_dtoa_r+0xac6>
 800b5c2:	9905      	ldr	r1, [sp, #20]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	9804      	ldr	r0, [sp, #16]
 800b5c8:	f000 fafa 	bl	800bbc0 <__lshift>
 800b5cc:	0031      	movs	r1, r6
 800b5ce:	9005      	str	r0, [sp, #20]
 800b5d0:	f000 fb64 	bl	800bc9c <__mcmp>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	dc02      	bgt.n	800b5de <_dtoa_r+0xafe>
 800b5d8:	d1e5      	bne.n	800b5a6 <_dtoa_r+0xac6>
 800b5da:	07e3      	lsls	r3, r4, #31
 800b5dc:	d5e3      	bpl.n	800b5a6 <_dtoa_r+0xac6>
 800b5de:	2c39      	cmp	r4, #57	; 0x39
 800b5e0:	d1df      	bne.n	800b5a2 <_dtoa_r+0xac2>
 800b5e2:	2339      	movs	r3, #57	; 0x39
 800b5e4:	9a07      	ldr	r2, [sp, #28]
 800b5e6:	7013      	strb	r3, [r2, #0]
 800b5e8:	9b08      	ldr	r3, [sp, #32]
 800b5ea:	9308      	str	r3, [sp, #32]
 800b5ec:	3b01      	subs	r3, #1
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	2a39      	cmp	r2, #57	; 0x39
 800b5f2:	d063      	beq.n	800b6bc <_dtoa_r+0xbdc>
 800b5f4:	3201      	adds	r2, #1
 800b5f6:	701a      	strb	r2, [r3, #0]
 800b5f8:	e747      	b.n	800b48a <_dtoa_r+0x9aa>
 800b5fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dd03      	ble.n	800b608 <_dtoa_r+0xb28>
 800b600:	2c39      	cmp	r4, #57	; 0x39
 800b602:	d0ee      	beq.n	800b5e2 <_dtoa_r+0xb02>
 800b604:	3401      	adds	r4, #1
 800b606:	e7ce      	b.n	800b5a6 <_dtoa_r+0xac6>
 800b608:	9b07      	ldr	r3, [sp, #28]
 800b60a:	9a07      	ldr	r2, [sp, #28]
 800b60c:	701c      	strb	r4, [r3, #0]
 800b60e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b610:	4293      	cmp	r3, r2
 800b612:	d03e      	beq.n	800b692 <_dtoa_r+0xbb2>
 800b614:	2300      	movs	r3, #0
 800b616:	220a      	movs	r2, #10
 800b618:	9905      	ldr	r1, [sp, #20]
 800b61a:	9804      	ldr	r0, [sp, #16]
 800b61c:	f000 f920 	bl	800b860 <__multadd>
 800b620:	2300      	movs	r3, #0
 800b622:	9005      	str	r0, [sp, #20]
 800b624:	220a      	movs	r2, #10
 800b626:	0029      	movs	r1, r5
 800b628:	9804      	ldr	r0, [sp, #16]
 800b62a:	42bd      	cmp	r5, r7
 800b62c:	d106      	bne.n	800b63c <_dtoa_r+0xb5c>
 800b62e:	f000 f917 	bl	800b860 <__multadd>
 800b632:	0005      	movs	r5, r0
 800b634:	0007      	movs	r7, r0
 800b636:	9b08      	ldr	r3, [sp, #32]
 800b638:	9307      	str	r3, [sp, #28]
 800b63a:	e784      	b.n	800b546 <_dtoa_r+0xa66>
 800b63c:	f000 f910 	bl	800b860 <__multadd>
 800b640:	0039      	movs	r1, r7
 800b642:	0005      	movs	r5, r0
 800b644:	2300      	movs	r3, #0
 800b646:	220a      	movs	r2, #10
 800b648:	9804      	ldr	r0, [sp, #16]
 800b64a:	f000 f909 	bl	800b860 <__multadd>
 800b64e:	0007      	movs	r7, r0
 800b650:	e7f1      	b.n	800b636 <_dtoa_r+0xb56>
 800b652:	9b07      	ldr	r3, [sp, #28]
 800b654:	930b      	str	r3, [sp, #44]	; 0x2c
 800b656:	2500      	movs	r5, #0
 800b658:	0031      	movs	r1, r6
 800b65a:	9805      	ldr	r0, [sp, #20]
 800b65c:	f7ff f9b1 	bl	800a9c2 <quorem>
 800b660:	9b06      	ldr	r3, [sp, #24]
 800b662:	3030      	adds	r0, #48	; 0x30
 800b664:	5558      	strb	r0, [r3, r5]
 800b666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b668:	3501      	adds	r5, #1
 800b66a:	0004      	movs	r4, r0
 800b66c:	42ab      	cmp	r3, r5
 800b66e:	dd07      	ble.n	800b680 <_dtoa_r+0xba0>
 800b670:	2300      	movs	r3, #0
 800b672:	220a      	movs	r2, #10
 800b674:	9905      	ldr	r1, [sp, #20]
 800b676:	9804      	ldr	r0, [sp, #16]
 800b678:	f000 f8f2 	bl	800b860 <__multadd>
 800b67c:	9005      	str	r0, [sp, #20]
 800b67e:	e7eb      	b.n	800b658 <_dtoa_r+0xb78>
 800b680:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b682:	2301      	movs	r3, #1
 800b684:	2a00      	cmp	r2, #0
 800b686:	dd00      	ble.n	800b68a <_dtoa_r+0xbaa>
 800b688:	0013      	movs	r3, r2
 800b68a:	2500      	movs	r5, #0
 800b68c:	9a06      	ldr	r2, [sp, #24]
 800b68e:	18d3      	adds	r3, r2, r3
 800b690:	9308      	str	r3, [sp, #32]
 800b692:	9905      	ldr	r1, [sp, #20]
 800b694:	2201      	movs	r2, #1
 800b696:	9804      	ldr	r0, [sp, #16]
 800b698:	f000 fa92 	bl	800bbc0 <__lshift>
 800b69c:	0031      	movs	r1, r6
 800b69e:	9005      	str	r0, [sp, #20]
 800b6a0:	f000 fafc 	bl	800bc9c <__mcmp>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	dc9f      	bgt.n	800b5e8 <_dtoa_r+0xb08>
 800b6a8:	d101      	bne.n	800b6ae <_dtoa_r+0xbce>
 800b6aa:	07e4      	lsls	r4, r4, #31
 800b6ac:	d49c      	bmi.n	800b5e8 <_dtoa_r+0xb08>
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	9308      	str	r3, [sp, #32]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	781a      	ldrb	r2, [r3, #0]
 800b6b6:	2a30      	cmp	r2, #48	; 0x30
 800b6b8:	d0fa      	beq.n	800b6b0 <_dtoa_r+0xbd0>
 800b6ba:	e6e6      	b.n	800b48a <_dtoa_r+0x9aa>
 800b6bc:	9a06      	ldr	r2, [sp, #24]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d193      	bne.n	800b5ea <_dtoa_r+0xb0a>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	9303      	str	r3, [sp, #12]
 800b6c8:	2331      	movs	r3, #49	; 0x31
 800b6ca:	7013      	strb	r3, [r2, #0]
 800b6cc:	e6dd      	b.n	800b48a <_dtoa_r+0x9aa>
 800b6ce:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <_dtoa_r+0xc14>)
 800b6d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b6d2:	9306      	str	r3, [sp, #24]
 800b6d4:	4b08      	ldr	r3, [pc, #32]	; (800b6f8 <_dtoa_r+0xc18>)
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	d001      	beq.n	800b6de <_dtoa_r+0xbfe>
 800b6da:	f7ff fa49 	bl	800ab70 <_dtoa_r+0x90>
 800b6de:	f7ff fa49 	bl	800ab74 <_dtoa_r+0x94>
 800b6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	dcb6      	bgt.n	800b656 <_dtoa_r+0xb76>
 800b6e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	dd00      	ble.n	800b6f0 <_dtoa_r+0xc10>
 800b6ee:	e6b6      	b.n	800b45e <_dtoa_r+0x97e>
 800b6f0:	e7b1      	b.n	800b656 <_dtoa_r+0xb76>
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	0800c794 	.word	0x0800c794
 800b6f8:	0800c79c 	.word	0x0800c79c

0800b6fc <_free_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	0005      	movs	r5, r0
 800b700:	2900      	cmp	r1, #0
 800b702:	d010      	beq.n	800b726 <_free_r+0x2a>
 800b704:	1f0c      	subs	r4, r1, #4
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	da00      	bge.n	800b70e <_free_r+0x12>
 800b70c:	18e4      	adds	r4, r4, r3
 800b70e:	0028      	movs	r0, r5
 800b710:	f7fe f99a 	bl	8009a48 <__malloc_lock>
 800b714:	4a1d      	ldr	r2, [pc, #116]	; (800b78c <_free_r+0x90>)
 800b716:	6813      	ldr	r3, [r2, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d105      	bne.n	800b728 <_free_r+0x2c>
 800b71c:	6063      	str	r3, [r4, #4]
 800b71e:	6014      	str	r4, [r2, #0]
 800b720:	0028      	movs	r0, r5
 800b722:	f7fe f999 	bl	8009a58 <__malloc_unlock>
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	42a3      	cmp	r3, r4
 800b72a:	d908      	bls.n	800b73e <_free_r+0x42>
 800b72c:	6820      	ldr	r0, [r4, #0]
 800b72e:	1821      	adds	r1, r4, r0
 800b730:	428b      	cmp	r3, r1
 800b732:	d1f3      	bne.n	800b71c <_free_r+0x20>
 800b734:	6819      	ldr	r1, [r3, #0]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	1809      	adds	r1, r1, r0
 800b73a:	6021      	str	r1, [r4, #0]
 800b73c:	e7ee      	b.n	800b71c <_free_r+0x20>
 800b73e:	001a      	movs	r2, r3
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <_free_r+0x4e>
 800b746:	42a3      	cmp	r3, r4
 800b748:	d9f9      	bls.n	800b73e <_free_r+0x42>
 800b74a:	6811      	ldr	r1, [r2, #0]
 800b74c:	1850      	adds	r0, r2, r1
 800b74e:	42a0      	cmp	r0, r4
 800b750:	d10b      	bne.n	800b76a <_free_r+0x6e>
 800b752:	6820      	ldr	r0, [r4, #0]
 800b754:	1809      	adds	r1, r1, r0
 800b756:	1850      	adds	r0, r2, r1
 800b758:	6011      	str	r1, [r2, #0]
 800b75a:	4283      	cmp	r3, r0
 800b75c:	d1e0      	bne.n	800b720 <_free_r+0x24>
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	1841      	adds	r1, r0, r1
 800b764:	6011      	str	r1, [r2, #0]
 800b766:	6053      	str	r3, [r2, #4]
 800b768:	e7da      	b.n	800b720 <_free_r+0x24>
 800b76a:	42a0      	cmp	r0, r4
 800b76c:	d902      	bls.n	800b774 <_free_r+0x78>
 800b76e:	230c      	movs	r3, #12
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	e7d5      	b.n	800b720 <_free_r+0x24>
 800b774:	6820      	ldr	r0, [r4, #0]
 800b776:	1821      	adds	r1, r4, r0
 800b778:	428b      	cmp	r3, r1
 800b77a:	d103      	bne.n	800b784 <_free_r+0x88>
 800b77c:	6819      	ldr	r1, [r3, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	1809      	adds	r1, r1, r0
 800b782:	6021      	str	r1, [r4, #0]
 800b784:	6063      	str	r3, [r4, #4]
 800b786:	6054      	str	r4, [r2, #4]
 800b788:	e7ca      	b.n	800b720 <_free_r+0x24>
 800b78a:	46c0      	nop			; (mov r8, r8)
 800b78c:	2000091c 	.word	0x2000091c

0800b790 <_Balloc>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	69c5      	ldr	r5, [r0, #28]
 800b794:	0006      	movs	r6, r0
 800b796:	000c      	movs	r4, r1
 800b798:	2d00      	cmp	r5, #0
 800b79a:	d10e      	bne.n	800b7ba <_Balloc+0x2a>
 800b79c:	2010      	movs	r0, #16
 800b79e:	f7fe f8a5 	bl	80098ec <malloc>
 800b7a2:	1e02      	subs	r2, r0, #0
 800b7a4:	61f0      	str	r0, [r6, #28]
 800b7a6:	d104      	bne.n	800b7b2 <_Balloc+0x22>
 800b7a8:	216b      	movs	r1, #107	; 0x6b
 800b7aa:	4b19      	ldr	r3, [pc, #100]	; (800b810 <_Balloc+0x80>)
 800b7ac:	4819      	ldr	r0, [pc, #100]	; (800b814 <_Balloc+0x84>)
 800b7ae:	f000 fe0d 	bl	800c3cc <__assert_func>
 800b7b2:	6045      	str	r5, [r0, #4]
 800b7b4:	6085      	str	r5, [r0, #8]
 800b7b6:	6005      	str	r5, [r0, #0]
 800b7b8:	60c5      	str	r5, [r0, #12]
 800b7ba:	69f5      	ldr	r5, [r6, #28]
 800b7bc:	68eb      	ldr	r3, [r5, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d013      	beq.n	800b7ea <_Balloc+0x5a>
 800b7c2:	69f3      	ldr	r3, [r6, #28]
 800b7c4:	00a2      	lsls	r2, r4, #2
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	189b      	adds	r3, r3, r2
 800b7ca:	6818      	ldr	r0, [r3, #0]
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d118      	bne.n	800b802 <_Balloc+0x72>
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	000d      	movs	r5, r1
 800b7d4:	40a5      	lsls	r5, r4
 800b7d6:	1d6a      	adds	r2, r5, #5
 800b7d8:	0030      	movs	r0, r6
 800b7da:	0092      	lsls	r2, r2, #2
 800b7dc:	f000 fe14 	bl	800c408 <_calloc_r>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d00c      	beq.n	800b7fe <_Balloc+0x6e>
 800b7e4:	6044      	str	r4, [r0, #4]
 800b7e6:	6085      	str	r5, [r0, #8]
 800b7e8:	e00d      	b.n	800b806 <_Balloc+0x76>
 800b7ea:	2221      	movs	r2, #33	; 0x21
 800b7ec:	2104      	movs	r1, #4
 800b7ee:	0030      	movs	r0, r6
 800b7f0:	f000 fe0a 	bl	800c408 <_calloc_r>
 800b7f4:	69f3      	ldr	r3, [r6, #28]
 800b7f6:	60e8      	str	r0, [r5, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1e1      	bne.n	800b7c2 <_Balloc+0x32>
 800b7fe:	2000      	movs	r0, #0
 800b800:	bd70      	pop	{r4, r5, r6, pc}
 800b802:	6802      	ldr	r2, [r0, #0]
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	2300      	movs	r3, #0
 800b808:	6103      	str	r3, [r0, #16]
 800b80a:	60c3      	str	r3, [r0, #12]
 800b80c:	e7f8      	b.n	800b800 <_Balloc+0x70>
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	0800c7a1 	.word	0x0800c7a1
 800b814:	0800c821 	.word	0x0800c821

0800b818 <_Bfree>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	69c6      	ldr	r6, [r0, #28]
 800b81c:	0005      	movs	r5, r0
 800b81e:	000c      	movs	r4, r1
 800b820:	2e00      	cmp	r6, #0
 800b822:	d10e      	bne.n	800b842 <_Bfree+0x2a>
 800b824:	2010      	movs	r0, #16
 800b826:	f7fe f861 	bl	80098ec <malloc>
 800b82a:	1e02      	subs	r2, r0, #0
 800b82c:	61e8      	str	r0, [r5, #28]
 800b82e:	d104      	bne.n	800b83a <_Bfree+0x22>
 800b830:	218f      	movs	r1, #143	; 0x8f
 800b832:	4b09      	ldr	r3, [pc, #36]	; (800b858 <_Bfree+0x40>)
 800b834:	4809      	ldr	r0, [pc, #36]	; (800b85c <_Bfree+0x44>)
 800b836:	f000 fdc9 	bl	800c3cc <__assert_func>
 800b83a:	6046      	str	r6, [r0, #4]
 800b83c:	6086      	str	r6, [r0, #8]
 800b83e:	6006      	str	r6, [r0, #0]
 800b840:	60c6      	str	r6, [r0, #12]
 800b842:	2c00      	cmp	r4, #0
 800b844:	d007      	beq.n	800b856 <_Bfree+0x3e>
 800b846:	69eb      	ldr	r3, [r5, #28]
 800b848:	6862      	ldr	r2, [r4, #4]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	0092      	lsls	r2, r2, #2
 800b84e:	189b      	adds	r3, r3, r2
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	6022      	str	r2, [r4, #0]
 800b854:	601c      	str	r4, [r3, #0]
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	0800c7a1 	.word	0x0800c7a1
 800b85c:	0800c821 	.word	0x0800c821

0800b860 <__multadd>:
 800b860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b862:	000e      	movs	r6, r1
 800b864:	9001      	str	r0, [sp, #4]
 800b866:	000c      	movs	r4, r1
 800b868:	001d      	movs	r5, r3
 800b86a:	2000      	movs	r0, #0
 800b86c:	690f      	ldr	r7, [r1, #16]
 800b86e:	3614      	adds	r6, #20
 800b870:	6833      	ldr	r3, [r6, #0]
 800b872:	3001      	adds	r0, #1
 800b874:	b299      	uxth	r1, r3
 800b876:	4351      	muls	r1, r2
 800b878:	0c1b      	lsrs	r3, r3, #16
 800b87a:	4353      	muls	r3, r2
 800b87c:	1949      	adds	r1, r1, r5
 800b87e:	0c0d      	lsrs	r5, r1, #16
 800b880:	195b      	adds	r3, r3, r5
 800b882:	0c1d      	lsrs	r5, r3, #16
 800b884:	b289      	uxth	r1, r1
 800b886:	041b      	lsls	r3, r3, #16
 800b888:	185b      	adds	r3, r3, r1
 800b88a:	c608      	stmia	r6!, {r3}
 800b88c:	4287      	cmp	r7, r0
 800b88e:	dcef      	bgt.n	800b870 <__multadd+0x10>
 800b890:	2d00      	cmp	r5, #0
 800b892:	d022      	beq.n	800b8da <__multadd+0x7a>
 800b894:	68a3      	ldr	r3, [r4, #8]
 800b896:	42bb      	cmp	r3, r7
 800b898:	dc19      	bgt.n	800b8ce <__multadd+0x6e>
 800b89a:	6861      	ldr	r1, [r4, #4]
 800b89c:	9801      	ldr	r0, [sp, #4]
 800b89e:	3101      	adds	r1, #1
 800b8a0:	f7ff ff76 	bl	800b790 <_Balloc>
 800b8a4:	1e06      	subs	r6, r0, #0
 800b8a6:	d105      	bne.n	800b8b4 <__multadd+0x54>
 800b8a8:	0032      	movs	r2, r6
 800b8aa:	21ba      	movs	r1, #186	; 0xba
 800b8ac:	4b0c      	ldr	r3, [pc, #48]	; (800b8e0 <__multadd+0x80>)
 800b8ae:	480d      	ldr	r0, [pc, #52]	; (800b8e4 <__multadd+0x84>)
 800b8b0:	f000 fd8c 	bl	800c3cc <__assert_func>
 800b8b4:	0021      	movs	r1, r4
 800b8b6:	6922      	ldr	r2, [r4, #16]
 800b8b8:	310c      	adds	r1, #12
 800b8ba:	3202      	adds	r2, #2
 800b8bc:	0092      	lsls	r2, r2, #2
 800b8be:	300c      	adds	r0, #12
 800b8c0:	f7ff f876 	bl	800a9b0 <memcpy>
 800b8c4:	0021      	movs	r1, r4
 800b8c6:	9801      	ldr	r0, [sp, #4]
 800b8c8:	f7ff ffa6 	bl	800b818 <_Bfree>
 800b8cc:	0034      	movs	r4, r6
 800b8ce:	1d3b      	adds	r3, r7, #4
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	18e3      	adds	r3, r4, r3
 800b8d4:	605d      	str	r5, [r3, #4]
 800b8d6:	1c7b      	adds	r3, r7, #1
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	0020      	movs	r0, r4
 800b8dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8de:	46c0      	nop			; (mov r8, r8)
 800b8e0:	0800c810 	.word	0x0800c810
 800b8e4:	0800c821 	.word	0x0800c821

0800b8e8 <__hi0bits>:
 800b8e8:	0003      	movs	r3, r0
 800b8ea:	0c02      	lsrs	r2, r0, #16
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	4282      	cmp	r2, r0
 800b8f0:	d101      	bne.n	800b8f6 <__hi0bits+0xe>
 800b8f2:	041b      	lsls	r3, r3, #16
 800b8f4:	3010      	adds	r0, #16
 800b8f6:	0e1a      	lsrs	r2, r3, #24
 800b8f8:	d101      	bne.n	800b8fe <__hi0bits+0x16>
 800b8fa:	3008      	adds	r0, #8
 800b8fc:	021b      	lsls	r3, r3, #8
 800b8fe:	0f1a      	lsrs	r2, r3, #28
 800b900:	d101      	bne.n	800b906 <__hi0bits+0x1e>
 800b902:	3004      	adds	r0, #4
 800b904:	011b      	lsls	r3, r3, #4
 800b906:	0f9a      	lsrs	r2, r3, #30
 800b908:	d101      	bne.n	800b90e <__hi0bits+0x26>
 800b90a:	3002      	adds	r0, #2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	db03      	blt.n	800b91a <__hi0bits+0x32>
 800b912:	3001      	adds	r0, #1
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	d400      	bmi.n	800b91a <__hi0bits+0x32>
 800b918:	2020      	movs	r0, #32
 800b91a:	4770      	bx	lr

0800b91c <__lo0bits>:
 800b91c:	6803      	ldr	r3, [r0, #0]
 800b91e:	0001      	movs	r1, r0
 800b920:	2207      	movs	r2, #7
 800b922:	0018      	movs	r0, r3
 800b924:	4010      	ands	r0, r2
 800b926:	4213      	tst	r3, r2
 800b928:	d00d      	beq.n	800b946 <__lo0bits+0x2a>
 800b92a:	3a06      	subs	r2, #6
 800b92c:	2000      	movs	r0, #0
 800b92e:	4213      	tst	r3, r2
 800b930:	d105      	bne.n	800b93e <__lo0bits+0x22>
 800b932:	3002      	adds	r0, #2
 800b934:	4203      	tst	r3, r0
 800b936:	d003      	beq.n	800b940 <__lo0bits+0x24>
 800b938:	40d3      	lsrs	r3, r2
 800b93a:	0010      	movs	r0, r2
 800b93c:	600b      	str	r3, [r1, #0]
 800b93e:	4770      	bx	lr
 800b940:	089b      	lsrs	r3, r3, #2
 800b942:	600b      	str	r3, [r1, #0]
 800b944:	e7fb      	b.n	800b93e <__lo0bits+0x22>
 800b946:	b29a      	uxth	r2, r3
 800b948:	2a00      	cmp	r2, #0
 800b94a:	d101      	bne.n	800b950 <__lo0bits+0x34>
 800b94c:	2010      	movs	r0, #16
 800b94e:	0c1b      	lsrs	r3, r3, #16
 800b950:	b2da      	uxtb	r2, r3
 800b952:	2a00      	cmp	r2, #0
 800b954:	d101      	bne.n	800b95a <__lo0bits+0x3e>
 800b956:	3008      	adds	r0, #8
 800b958:	0a1b      	lsrs	r3, r3, #8
 800b95a:	071a      	lsls	r2, r3, #28
 800b95c:	d101      	bne.n	800b962 <__lo0bits+0x46>
 800b95e:	3004      	adds	r0, #4
 800b960:	091b      	lsrs	r3, r3, #4
 800b962:	079a      	lsls	r2, r3, #30
 800b964:	d101      	bne.n	800b96a <__lo0bits+0x4e>
 800b966:	3002      	adds	r0, #2
 800b968:	089b      	lsrs	r3, r3, #2
 800b96a:	07da      	lsls	r2, r3, #31
 800b96c:	d4e9      	bmi.n	800b942 <__lo0bits+0x26>
 800b96e:	3001      	adds	r0, #1
 800b970:	085b      	lsrs	r3, r3, #1
 800b972:	d1e6      	bne.n	800b942 <__lo0bits+0x26>
 800b974:	2020      	movs	r0, #32
 800b976:	e7e2      	b.n	800b93e <__lo0bits+0x22>

0800b978 <__i2b>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	000c      	movs	r4, r1
 800b97c:	2101      	movs	r1, #1
 800b97e:	f7ff ff07 	bl	800b790 <_Balloc>
 800b982:	2800      	cmp	r0, #0
 800b984:	d107      	bne.n	800b996 <__i2b+0x1e>
 800b986:	2146      	movs	r1, #70	; 0x46
 800b988:	4c05      	ldr	r4, [pc, #20]	; (800b9a0 <__i2b+0x28>)
 800b98a:	0002      	movs	r2, r0
 800b98c:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <__i2b+0x2c>)
 800b98e:	0020      	movs	r0, r4
 800b990:	31ff      	adds	r1, #255	; 0xff
 800b992:	f000 fd1b 	bl	800c3cc <__assert_func>
 800b996:	2301      	movs	r3, #1
 800b998:	6144      	str	r4, [r0, #20]
 800b99a:	6103      	str	r3, [r0, #16]
 800b99c:	bd10      	pop	{r4, pc}
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	0800c821 	.word	0x0800c821
 800b9a4:	0800c810 	.word	0x0800c810

0800b9a8 <__multiply>:
 800b9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9aa:	0015      	movs	r5, r2
 800b9ac:	690a      	ldr	r2, [r1, #16]
 800b9ae:	692b      	ldr	r3, [r5, #16]
 800b9b0:	000c      	movs	r4, r1
 800b9b2:	b08b      	sub	sp, #44	; 0x2c
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	da01      	bge.n	800b9bc <__multiply+0x14>
 800b9b8:	002c      	movs	r4, r5
 800b9ba:	000d      	movs	r5, r1
 800b9bc:	6927      	ldr	r7, [r4, #16]
 800b9be:	692e      	ldr	r6, [r5, #16]
 800b9c0:	6861      	ldr	r1, [r4, #4]
 800b9c2:	19bb      	adds	r3, r7, r6
 800b9c4:	9303      	str	r3, [sp, #12]
 800b9c6:	68a3      	ldr	r3, [r4, #8]
 800b9c8:	19ba      	adds	r2, r7, r6
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	da00      	bge.n	800b9d0 <__multiply+0x28>
 800b9ce:	3101      	adds	r1, #1
 800b9d0:	f7ff fede 	bl	800b790 <_Balloc>
 800b9d4:	9002      	str	r0, [sp, #8]
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d106      	bne.n	800b9e8 <__multiply+0x40>
 800b9da:	21b1      	movs	r1, #177	; 0xb1
 800b9dc:	4b48      	ldr	r3, [pc, #288]	; (800bb00 <__multiply+0x158>)
 800b9de:	4849      	ldr	r0, [pc, #292]	; (800bb04 <__multiply+0x15c>)
 800b9e0:	9a02      	ldr	r2, [sp, #8]
 800b9e2:	0049      	lsls	r1, r1, #1
 800b9e4:	f000 fcf2 	bl	800c3cc <__assert_func>
 800b9e8:	9b02      	ldr	r3, [sp, #8]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	3314      	adds	r3, #20
 800b9ee:	469c      	mov	ip, r3
 800b9f0:	19bb      	adds	r3, r7, r6
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4463      	add	r3, ip
 800b9f6:	9304      	str	r3, [sp, #16]
 800b9f8:	4663      	mov	r3, ip
 800b9fa:	9904      	ldr	r1, [sp, #16]
 800b9fc:	428b      	cmp	r3, r1
 800b9fe:	d32a      	bcc.n	800ba56 <__multiply+0xae>
 800ba00:	0023      	movs	r3, r4
 800ba02:	00bf      	lsls	r7, r7, #2
 800ba04:	3314      	adds	r3, #20
 800ba06:	3514      	adds	r5, #20
 800ba08:	9308      	str	r3, [sp, #32]
 800ba0a:	00b6      	lsls	r6, r6, #2
 800ba0c:	19db      	adds	r3, r3, r7
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	19ab      	adds	r3, r5, r6
 800ba12:	9309      	str	r3, [sp, #36]	; 0x24
 800ba14:	2304      	movs	r3, #4
 800ba16:	9306      	str	r3, [sp, #24]
 800ba18:	0023      	movs	r3, r4
 800ba1a:	9a05      	ldr	r2, [sp, #20]
 800ba1c:	3315      	adds	r3, #21
 800ba1e:	9501      	str	r5, [sp, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d305      	bcc.n	800ba30 <__multiply+0x88>
 800ba24:	1b13      	subs	r3, r2, r4
 800ba26:	3b15      	subs	r3, #21
 800ba28:	089b      	lsrs	r3, r3, #2
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	9306      	str	r3, [sp, #24]
 800ba30:	9b01      	ldr	r3, [sp, #4]
 800ba32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d310      	bcc.n	800ba5a <__multiply+0xb2>
 800ba38:	9b03      	ldr	r3, [sp, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dd05      	ble.n	800ba4a <__multiply+0xa2>
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	3b04      	subs	r3, #4
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d056      	beq.n	800baf8 <__multiply+0x150>
 800ba4a:	9b02      	ldr	r3, [sp, #8]
 800ba4c:	9a03      	ldr	r2, [sp, #12]
 800ba4e:	0018      	movs	r0, r3
 800ba50:	611a      	str	r2, [r3, #16]
 800ba52:	b00b      	add	sp, #44	; 0x2c
 800ba54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba56:	c304      	stmia	r3!, {r2}
 800ba58:	e7cf      	b.n	800b9fa <__multiply+0x52>
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	b280      	uxth	r0, r0
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d01e      	beq.n	800baa2 <__multiply+0xfa>
 800ba64:	4667      	mov	r7, ip
 800ba66:	2500      	movs	r5, #0
 800ba68:	9e08      	ldr	r6, [sp, #32]
 800ba6a:	ce02      	ldmia	r6!, {r1}
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	9307      	str	r3, [sp, #28]
 800ba70:	b28b      	uxth	r3, r1
 800ba72:	4343      	muls	r3, r0
 800ba74:	001a      	movs	r2, r3
 800ba76:	466b      	mov	r3, sp
 800ba78:	8b9b      	ldrh	r3, [r3, #28]
 800ba7a:	18d3      	adds	r3, r2, r3
 800ba7c:	195b      	adds	r3, r3, r5
 800ba7e:	0c0d      	lsrs	r5, r1, #16
 800ba80:	4345      	muls	r5, r0
 800ba82:	9a07      	ldr	r2, [sp, #28]
 800ba84:	0c11      	lsrs	r1, r2, #16
 800ba86:	1869      	adds	r1, r5, r1
 800ba88:	0c1a      	lsrs	r2, r3, #16
 800ba8a:	188a      	adds	r2, r1, r2
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	0c15      	lsrs	r5, r2, #16
 800ba90:	0412      	lsls	r2, r2, #16
 800ba92:	431a      	orrs	r2, r3
 800ba94:	9b05      	ldr	r3, [sp, #20]
 800ba96:	c704      	stmia	r7!, {r2}
 800ba98:	42b3      	cmp	r3, r6
 800ba9a:	d8e6      	bhi.n	800ba6a <__multiply+0xc2>
 800ba9c:	4663      	mov	r3, ip
 800ba9e:	9a06      	ldr	r2, [sp, #24]
 800baa0:	509d      	str	r5, [r3, r2]
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	6818      	ldr	r0, [r3, #0]
 800baa6:	0c00      	lsrs	r0, r0, #16
 800baa8:	d020      	beq.n	800baec <__multiply+0x144>
 800baaa:	4663      	mov	r3, ip
 800baac:	0025      	movs	r5, r4
 800baae:	4661      	mov	r1, ip
 800bab0:	2700      	movs	r7, #0
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3514      	adds	r5, #20
 800bab6:	682a      	ldr	r2, [r5, #0]
 800bab8:	680e      	ldr	r6, [r1, #0]
 800baba:	b292      	uxth	r2, r2
 800babc:	4342      	muls	r2, r0
 800babe:	0c36      	lsrs	r6, r6, #16
 800bac0:	1992      	adds	r2, r2, r6
 800bac2:	19d2      	adds	r2, r2, r7
 800bac4:	0416      	lsls	r6, r2, #16
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	431e      	orrs	r6, r3
 800baca:	600e      	str	r6, [r1, #0]
 800bacc:	cd40      	ldmia	r5!, {r6}
 800bace:	684b      	ldr	r3, [r1, #4]
 800bad0:	0c36      	lsrs	r6, r6, #16
 800bad2:	4346      	muls	r6, r0
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	0c12      	lsrs	r2, r2, #16
 800bad8:	18f3      	adds	r3, r6, r3
 800bada:	189b      	adds	r3, r3, r2
 800badc:	9a05      	ldr	r2, [sp, #20]
 800bade:	0c1f      	lsrs	r7, r3, #16
 800bae0:	3104      	adds	r1, #4
 800bae2:	42aa      	cmp	r2, r5
 800bae4:	d8e7      	bhi.n	800bab6 <__multiply+0x10e>
 800bae6:	4662      	mov	r2, ip
 800bae8:	9906      	ldr	r1, [sp, #24]
 800baea:	5053      	str	r3, [r2, r1]
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	3304      	adds	r3, #4
 800baf0:	9301      	str	r3, [sp, #4]
 800baf2:	2304      	movs	r3, #4
 800baf4:	449c      	add	ip, r3
 800baf6:	e79b      	b.n	800ba30 <__multiply+0x88>
 800baf8:	9b03      	ldr	r3, [sp, #12]
 800bafa:	3b01      	subs	r3, #1
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	e79b      	b.n	800ba38 <__multiply+0x90>
 800bb00:	0800c810 	.word	0x0800c810
 800bb04:	0800c821 	.word	0x0800c821

0800bb08 <__pow5mult>:
 800bb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	0015      	movs	r5, r2
 800bb0e:	0007      	movs	r7, r0
 800bb10:	000e      	movs	r6, r1
 800bb12:	401a      	ands	r2, r3
 800bb14:	421d      	tst	r5, r3
 800bb16:	d008      	beq.n	800bb2a <__pow5mult+0x22>
 800bb18:	4925      	ldr	r1, [pc, #148]	; (800bbb0 <__pow5mult+0xa8>)
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	0092      	lsls	r2, r2, #2
 800bb1e:	5852      	ldr	r2, [r2, r1]
 800bb20:	2300      	movs	r3, #0
 800bb22:	0031      	movs	r1, r6
 800bb24:	f7ff fe9c 	bl	800b860 <__multadd>
 800bb28:	0006      	movs	r6, r0
 800bb2a:	10ad      	asrs	r5, r5, #2
 800bb2c:	d03d      	beq.n	800bbaa <__pow5mult+0xa2>
 800bb2e:	69fc      	ldr	r4, [r7, #28]
 800bb30:	2c00      	cmp	r4, #0
 800bb32:	d10f      	bne.n	800bb54 <__pow5mult+0x4c>
 800bb34:	2010      	movs	r0, #16
 800bb36:	f7fd fed9 	bl	80098ec <malloc>
 800bb3a:	1e02      	subs	r2, r0, #0
 800bb3c:	61f8      	str	r0, [r7, #28]
 800bb3e:	d105      	bne.n	800bb4c <__pow5mult+0x44>
 800bb40:	21b4      	movs	r1, #180	; 0xb4
 800bb42:	4b1c      	ldr	r3, [pc, #112]	; (800bbb4 <__pow5mult+0xac>)
 800bb44:	481c      	ldr	r0, [pc, #112]	; (800bbb8 <__pow5mult+0xb0>)
 800bb46:	31ff      	adds	r1, #255	; 0xff
 800bb48:	f000 fc40 	bl	800c3cc <__assert_func>
 800bb4c:	6044      	str	r4, [r0, #4]
 800bb4e:	6084      	str	r4, [r0, #8]
 800bb50:	6004      	str	r4, [r0, #0]
 800bb52:	60c4      	str	r4, [r0, #12]
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	689c      	ldr	r4, [r3, #8]
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	2c00      	cmp	r4, #0
 800bb5c:	d108      	bne.n	800bb70 <__pow5mult+0x68>
 800bb5e:	0038      	movs	r0, r7
 800bb60:	4916      	ldr	r1, [pc, #88]	; (800bbbc <__pow5mult+0xb4>)
 800bb62:	f7ff ff09 	bl	800b978 <__i2b>
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	0004      	movs	r4, r0
 800bb6a:	6098      	str	r0, [r3, #8]
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	6003      	str	r3, [r0, #0]
 800bb70:	2301      	movs	r3, #1
 800bb72:	421d      	tst	r5, r3
 800bb74:	d00a      	beq.n	800bb8c <__pow5mult+0x84>
 800bb76:	0031      	movs	r1, r6
 800bb78:	0022      	movs	r2, r4
 800bb7a:	0038      	movs	r0, r7
 800bb7c:	f7ff ff14 	bl	800b9a8 <__multiply>
 800bb80:	0031      	movs	r1, r6
 800bb82:	9001      	str	r0, [sp, #4]
 800bb84:	0038      	movs	r0, r7
 800bb86:	f7ff fe47 	bl	800b818 <_Bfree>
 800bb8a:	9e01      	ldr	r6, [sp, #4]
 800bb8c:	106d      	asrs	r5, r5, #1
 800bb8e:	d00c      	beq.n	800bbaa <__pow5mult+0xa2>
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d107      	bne.n	800bba6 <__pow5mult+0x9e>
 800bb96:	0022      	movs	r2, r4
 800bb98:	0021      	movs	r1, r4
 800bb9a:	0038      	movs	r0, r7
 800bb9c:	f7ff ff04 	bl	800b9a8 <__multiply>
 800bba0:	2300      	movs	r3, #0
 800bba2:	6020      	str	r0, [r4, #0]
 800bba4:	6003      	str	r3, [r0, #0]
 800bba6:	0004      	movs	r4, r0
 800bba8:	e7e2      	b.n	800bb70 <__pow5mult+0x68>
 800bbaa:	0030      	movs	r0, r6
 800bbac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	0800c970 	.word	0x0800c970
 800bbb4:	0800c7a1 	.word	0x0800c7a1
 800bbb8:	0800c821 	.word	0x0800c821
 800bbbc:	00000271 	.word	0x00000271

0800bbc0 <__lshift>:
 800bbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbc2:	000c      	movs	r4, r1
 800bbc4:	0017      	movs	r7, r2
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	1155      	asrs	r5, r2, #5
 800bbca:	b087      	sub	sp, #28
 800bbcc:	18eb      	adds	r3, r5, r3
 800bbce:	9302      	str	r3, [sp, #8]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	6849      	ldr	r1, [r1, #4]
 800bbd6:	68a3      	ldr	r3, [r4, #8]
 800bbd8:	9004      	str	r0, [sp, #16]
 800bbda:	9a01      	ldr	r2, [sp, #4]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	db10      	blt.n	800bc02 <__lshift+0x42>
 800bbe0:	9804      	ldr	r0, [sp, #16]
 800bbe2:	f7ff fdd5 	bl	800b790 <_Balloc>
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	0002      	movs	r2, r0
 800bbea:	0006      	movs	r6, r0
 800bbec:	0019      	movs	r1, r3
 800bbee:	3214      	adds	r2, #20
 800bbf0:	4298      	cmp	r0, r3
 800bbf2:	d10c      	bne.n	800bc0e <__lshift+0x4e>
 800bbf4:	31df      	adds	r1, #223	; 0xdf
 800bbf6:	0032      	movs	r2, r6
 800bbf8:	4b26      	ldr	r3, [pc, #152]	; (800bc94 <__lshift+0xd4>)
 800bbfa:	4827      	ldr	r0, [pc, #156]	; (800bc98 <__lshift+0xd8>)
 800bbfc:	31ff      	adds	r1, #255	; 0xff
 800bbfe:	f000 fbe5 	bl	800c3cc <__assert_func>
 800bc02:	3101      	adds	r1, #1
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	e7e8      	b.n	800bbda <__lshift+0x1a>
 800bc08:	0098      	lsls	r0, r3, #2
 800bc0a:	5011      	str	r1, [r2, r0]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	42ab      	cmp	r3, r5
 800bc10:	dbfa      	blt.n	800bc08 <__lshift+0x48>
 800bc12:	43eb      	mvns	r3, r5
 800bc14:	17db      	asrs	r3, r3, #31
 800bc16:	401d      	ands	r5, r3
 800bc18:	211f      	movs	r1, #31
 800bc1a:	0023      	movs	r3, r4
 800bc1c:	0038      	movs	r0, r7
 800bc1e:	00ad      	lsls	r5, r5, #2
 800bc20:	1955      	adds	r5, r2, r5
 800bc22:	6922      	ldr	r2, [r4, #16]
 800bc24:	3314      	adds	r3, #20
 800bc26:	0092      	lsls	r2, r2, #2
 800bc28:	4008      	ands	r0, r1
 800bc2a:	4684      	mov	ip, r0
 800bc2c:	189a      	adds	r2, r3, r2
 800bc2e:	420f      	tst	r7, r1
 800bc30:	d02a      	beq.n	800bc88 <__lshift+0xc8>
 800bc32:	3101      	adds	r1, #1
 800bc34:	1a09      	subs	r1, r1, r0
 800bc36:	9105      	str	r1, [sp, #20]
 800bc38:	2100      	movs	r1, #0
 800bc3a:	9503      	str	r5, [sp, #12]
 800bc3c:	4667      	mov	r7, ip
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	40b8      	lsls	r0, r7
 800bc42:	4308      	orrs	r0, r1
 800bc44:	9903      	ldr	r1, [sp, #12]
 800bc46:	c101      	stmia	r1!, {r0}
 800bc48:	9103      	str	r1, [sp, #12]
 800bc4a:	9805      	ldr	r0, [sp, #20]
 800bc4c:	cb02      	ldmia	r3!, {r1}
 800bc4e:	40c1      	lsrs	r1, r0
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d8f3      	bhi.n	800bc3c <__lshift+0x7c>
 800bc54:	0020      	movs	r0, r4
 800bc56:	3015      	adds	r0, #21
 800bc58:	2304      	movs	r3, #4
 800bc5a:	4282      	cmp	r2, r0
 800bc5c:	d304      	bcc.n	800bc68 <__lshift+0xa8>
 800bc5e:	1b13      	subs	r3, r2, r4
 800bc60:	3b15      	subs	r3, #21
 800bc62:	089b      	lsrs	r3, r3, #2
 800bc64:	3301      	adds	r3, #1
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	50e9      	str	r1, [r5, r3]
 800bc6a:	2900      	cmp	r1, #0
 800bc6c:	d002      	beq.n	800bc74 <__lshift+0xb4>
 800bc6e:	9b02      	ldr	r3, [sp, #8]
 800bc70:	3302      	adds	r3, #2
 800bc72:	9301      	str	r3, [sp, #4]
 800bc74:	9b01      	ldr	r3, [sp, #4]
 800bc76:	9804      	ldr	r0, [sp, #16]
 800bc78:	3b01      	subs	r3, #1
 800bc7a:	0021      	movs	r1, r4
 800bc7c:	6133      	str	r3, [r6, #16]
 800bc7e:	f7ff fdcb 	bl	800b818 <_Bfree>
 800bc82:	0030      	movs	r0, r6
 800bc84:	b007      	add	sp, #28
 800bc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc88:	cb02      	ldmia	r3!, {r1}
 800bc8a:	c502      	stmia	r5!, {r1}
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d8fb      	bhi.n	800bc88 <__lshift+0xc8>
 800bc90:	e7f0      	b.n	800bc74 <__lshift+0xb4>
 800bc92:	46c0      	nop			; (mov r8, r8)
 800bc94:	0800c810 	.word	0x0800c810
 800bc98:	0800c821 	.word	0x0800c821

0800bc9c <__mcmp>:
 800bc9c:	b530      	push	{r4, r5, lr}
 800bc9e:	690b      	ldr	r3, [r1, #16]
 800bca0:	6904      	ldr	r4, [r0, #16]
 800bca2:	0002      	movs	r2, r0
 800bca4:	1ae0      	subs	r0, r4, r3
 800bca6:	429c      	cmp	r4, r3
 800bca8:	d10e      	bne.n	800bcc8 <__mcmp+0x2c>
 800bcaa:	3214      	adds	r2, #20
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	3114      	adds	r1, #20
 800bcb0:	0014      	movs	r4, r2
 800bcb2:	18c9      	adds	r1, r1, r3
 800bcb4:	18d2      	adds	r2, r2, r3
 800bcb6:	3a04      	subs	r2, #4
 800bcb8:	3904      	subs	r1, #4
 800bcba:	6815      	ldr	r5, [r2, #0]
 800bcbc:	680b      	ldr	r3, [r1, #0]
 800bcbe:	429d      	cmp	r5, r3
 800bcc0:	d003      	beq.n	800bcca <__mcmp+0x2e>
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	429d      	cmp	r5, r3
 800bcc6:	d303      	bcc.n	800bcd0 <__mcmp+0x34>
 800bcc8:	bd30      	pop	{r4, r5, pc}
 800bcca:	4294      	cmp	r4, r2
 800bccc:	d3f3      	bcc.n	800bcb6 <__mcmp+0x1a>
 800bcce:	e7fb      	b.n	800bcc8 <__mcmp+0x2c>
 800bcd0:	4240      	negs	r0, r0
 800bcd2:	e7f9      	b.n	800bcc8 <__mcmp+0x2c>

0800bcd4 <__mdiff>:
 800bcd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcd6:	000e      	movs	r6, r1
 800bcd8:	0007      	movs	r7, r0
 800bcda:	0011      	movs	r1, r2
 800bcdc:	0030      	movs	r0, r6
 800bcde:	b087      	sub	sp, #28
 800bce0:	0014      	movs	r4, r2
 800bce2:	f7ff ffdb 	bl	800bc9c <__mcmp>
 800bce6:	1e05      	subs	r5, r0, #0
 800bce8:	d110      	bne.n	800bd0c <__mdiff+0x38>
 800bcea:	0001      	movs	r1, r0
 800bcec:	0038      	movs	r0, r7
 800bcee:	f7ff fd4f 	bl	800b790 <_Balloc>
 800bcf2:	1e02      	subs	r2, r0, #0
 800bcf4:	d104      	bne.n	800bd00 <__mdiff+0x2c>
 800bcf6:	4b3f      	ldr	r3, [pc, #252]	; (800bdf4 <__mdiff+0x120>)
 800bcf8:	483f      	ldr	r0, [pc, #252]	; (800bdf8 <__mdiff+0x124>)
 800bcfa:	4940      	ldr	r1, [pc, #256]	; (800bdfc <__mdiff+0x128>)
 800bcfc:	f000 fb66 	bl	800c3cc <__assert_func>
 800bd00:	2301      	movs	r3, #1
 800bd02:	6145      	str	r5, [r0, #20]
 800bd04:	6103      	str	r3, [r0, #16]
 800bd06:	0010      	movs	r0, r2
 800bd08:	b007      	add	sp, #28
 800bd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	9301      	str	r3, [sp, #4]
 800bd10:	2800      	cmp	r0, #0
 800bd12:	db04      	blt.n	800bd1e <__mdiff+0x4a>
 800bd14:	0023      	movs	r3, r4
 800bd16:	0034      	movs	r4, r6
 800bd18:	001e      	movs	r6, r3
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	9301      	str	r3, [sp, #4]
 800bd1e:	0038      	movs	r0, r7
 800bd20:	6861      	ldr	r1, [r4, #4]
 800bd22:	f7ff fd35 	bl	800b790 <_Balloc>
 800bd26:	1e02      	subs	r2, r0, #0
 800bd28:	d103      	bne.n	800bd32 <__mdiff+0x5e>
 800bd2a:	4b32      	ldr	r3, [pc, #200]	; (800bdf4 <__mdiff+0x120>)
 800bd2c:	4832      	ldr	r0, [pc, #200]	; (800bdf8 <__mdiff+0x124>)
 800bd2e:	4934      	ldr	r1, [pc, #208]	; (800be00 <__mdiff+0x12c>)
 800bd30:	e7e4      	b.n	800bcfc <__mdiff+0x28>
 800bd32:	9b01      	ldr	r3, [sp, #4]
 800bd34:	2700      	movs	r7, #0
 800bd36:	60c3      	str	r3, [r0, #12]
 800bd38:	6920      	ldr	r0, [r4, #16]
 800bd3a:	3414      	adds	r4, #20
 800bd3c:	0083      	lsls	r3, r0, #2
 800bd3e:	18e3      	adds	r3, r4, r3
 800bd40:	0021      	movs	r1, r4
 800bd42:	9401      	str	r4, [sp, #4]
 800bd44:	0034      	movs	r4, r6
 800bd46:	9302      	str	r3, [sp, #8]
 800bd48:	6933      	ldr	r3, [r6, #16]
 800bd4a:	3414      	adds	r4, #20
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	18e3      	adds	r3, r4, r3
 800bd50:	9303      	str	r3, [sp, #12]
 800bd52:	0013      	movs	r3, r2
 800bd54:	3314      	adds	r3, #20
 800bd56:	469c      	mov	ip, r3
 800bd58:	9305      	str	r3, [sp, #20]
 800bd5a:	9104      	str	r1, [sp, #16]
 800bd5c:	9b04      	ldr	r3, [sp, #16]
 800bd5e:	cc02      	ldmia	r4!, {r1}
 800bd60:	cb20      	ldmia	r3!, {r5}
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	b2ab      	uxth	r3, r5
 800bd66:	19df      	adds	r7, r3, r7
 800bd68:	b28b      	uxth	r3, r1
 800bd6a:	1afb      	subs	r3, r7, r3
 800bd6c:	0c09      	lsrs	r1, r1, #16
 800bd6e:	0c2d      	lsrs	r5, r5, #16
 800bd70:	1a6d      	subs	r5, r5, r1
 800bd72:	1419      	asrs	r1, r3, #16
 800bd74:	1869      	adds	r1, r5, r1
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	140f      	asrs	r7, r1, #16
 800bd7a:	0409      	lsls	r1, r1, #16
 800bd7c:	4319      	orrs	r1, r3
 800bd7e:	4663      	mov	r3, ip
 800bd80:	c302      	stmia	r3!, {r1}
 800bd82:	469c      	mov	ip, r3
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	42a3      	cmp	r3, r4
 800bd88:	d8e8      	bhi.n	800bd5c <__mdiff+0x88>
 800bd8a:	0031      	movs	r1, r6
 800bd8c:	9c03      	ldr	r4, [sp, #12]
 800bd8e:	3115      	adds	r1, #21
 800bd90:	2304      	movs	r3, #4
 800bd92:	428c      	cmp	r4, r1
 800bd94:	d304      	bcc.n	800bda0 <__mdiff+0xcc>
 800bd96:	1ba3      	subs	r3, r4, r6
 800bd98:	3b15      	subs	r3, #21
 800bd9a:	089b      	lsrs	r3, r3, #2
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	9901      	ldr	r1, [sp, #4]
 800bda2:	18cd      	adds	r5, r1, r3
 800bda4:	9905      	ldr	r1, [sp, #20]
 800bda6:	002e      	movs	r6, r5
 800bda8:	18cb      	adds	r3, r1, r3
 800bdaa:	469c      	mov	ip, r3
 800bdac:	9902      	ldr	r1, [sp, #8]
 800bdae:	428e      	cmp	r6, r1
 800bdb0:	d310      	bcc.n	800bdd4 <__mdiff+0x100>
 800bdb2:	9e02      	ldr	r6, [sp, #8]
 800bdb4:	1ee9      	subs	r1, r5, #3
 800bdb6:	2400      	movs	r4, #0
 800bdb8:	428e      	cmp	r6, r1
 800bdba:	d304      	bcc.n	800bdc6 <__mdiff+0xf2>
 800bdbc:	0031      	movs	r1, r6
 800bdbe:	3103      	adds	r1, #3
 800bdc0:	1b49      	subs	r1, r1, r5
 800bdc2:	0889      	lsrs	r1, r1, #2
 800bdc4:	008c      	lsls	r4, r1, #2
 800bdc6:	191b      	adds	r3, r3, r4
 800bdc8:	3b04      	subs	r3, #4
 800bdca:	6819      	ldr	r1, [r3, #0]
 800bdcc:	2900      	cmp	r1, #0
 800bdce:	d00f      	beq.n	800bdf0 <__mdiff+0x11c>
 800bdd0:	6110      	str	r0, [r2, #16]
 800bdd2:	e798      	b.n	800bd06 <__mdiff+0x32>
 800bdd4:	ce02      	ldmia	r6!, {r1}
 800bdd6:	b28c      	uxth	r4, r1
 800bdd8:	19e4      	adds	r4, r4, r7
 800bdda:	0c0f      	lsrs	r7, r1, #16
 800bddc:	1421      	asrs	r1, r4, #16
 800bdde:	1879      	adds	r1, r7, r1
 800bde0:	b2a4      	uxth	r4, r4
 800bde2:	140f      	asrs	r7, r1, #16
 800bde4:	0409      	lsls	r1, r1, #16
 800bde6:	4321      	orrs	r1, r4
 800bde8:	4664      	mov	r4, ip
 800bdea:	c402      	stmia	r4!, {r1}
 800bdec:	46a4      	mov	ip, r4
 800bdee:	e7dd      	b.n	800bdac <__mdiff+0xd8>
 800bdf0:	3801      	subs	r0, #1
 800bdf2:	e7e9      	b.n	800bdc8 <__mdiff+0xf4>
 800bdf4:	0800c810 	.word	0x0800c810
 800bdf8:	0800c821 	.word	0x0800c821
 800bdfc:	00000237 	.word	0x00000237
 800be00:	00000245 	.word	0x00000245

0800be04 <__d2b>:
 800be04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be06:	2101      	movs	r1, #1
 800be08:	0014      	movs	r4, r2
 800be0a:	001d      	movs	r5, r3
 800be0c:	9f08      	ldr	r7, [sp, #32]
 800be0e:	f7ff fcbf 	bl	800b790 <_Balloc>
 800be12:	1e06      	subs	r6, r0, #0
 800be14:	d105      	bne.n	800be22 <__d2b+0x1e>
 800be16:	0032      	movs	r2, r6
 800be18:	4b24      	ldr	r3, [pc, #144]	; (800beac <__d2b+0xa8>)
 800be1a:	4825      	ldr	r0, [pc, #148]	; (800beb0 <__d2b+0xac>)
 800be1c:	4925      	ldr	r1, [pc, #148]	; (800beb4 <__d2b+0xb0>)
 800be1e:	f000 fad5 	bl	800c3cc <__assert_func>
 800be22:	032b      	lsls	r3, r5, #12
 800be24:	006d      	lsls	r5, r5, #1
 800be26:	0b1b      	lsrs	r3, r3, #12
 800be28:	0d6d      	lsrs	r5, r5, #21
 800be2a:	d125      	bne.n	800be78 <__d2b+0x74>
 800be2c:	9301      	str	r3, [sp, #4]
 800be2e:	2c00      	cmp	r4, #0
 800be30:	d028      	beq.n	800be84 <__d2b+0x80>
 800be32:	4668      	mov	r0, sp
 800be34:	9400      	str	r4, [sp, #0]
 800be36:	f7ff fd71 	bl	800b91c <__lo0bits>
 800be3a:	9b01      	ldr	r3, [sp, #4]
 800be3c:	9900      	ldr	r1, [sp, #0]
 800be3e:	2800      	cmp	r0, #0
 800be40:	d01e      	beq.n	800be80 <__d2b+0x7c>
 800be42:	2220      	movs	r2, #32
 800be44:	001c      	movs	r4, r3
 800be46:	1a12      	subs	r2, r2, r0
 800be48:	4094      	lsls	r4, r2
 800be4a:	0022      	movs	r2, r4
 800be4c:	40c3      	lsrs	r3, r0
 800be4e:	430a      	orrs	r2, r1
 800be50:	6172      	str	r2, [r6, #20]
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	9c01      	ldr	r4, [sp, #4]
 800be56:	61b4      	str	r4, [r6, #24]
 800be58:	1e63      	subs	r3, r4, #1
 800be5a:	419c      	sbcs	r4, r3
 800be5c:	3401      	adds	r4, #1
 800be5e:	6134      	str	r4, [r6, #16]
 800be60:	2d00      	cmp	r5, #0
 800be62:	d017      	beq.n	800be94 <__d2b+0x90>
 800be64:	2435      	movs	r4, #53	; 0x35
 800be66:	4b14      	ldr	r3, [pc, #80]	; (800beb8 <__d2b+0xb4>)
 800be68:	18ed      	adds	r5, r5, r3
 800be6a:	182d      	adds	r5, r5, r0
 800be6c:	603d      	str	r5, [r7, #0]
 800be6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be70:	1a24      	subs	r4, r4, r0
 800be72:	601c      	str	r4, [r3, #0]
 800be74:	0030      	movs	r0, r6
 800be76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be78:	2280      	movs	r2, #128	; 0x80
 800be7a:	0352      	lsls	r2, r2, #13
 800be7c:	4313      	orrs	r3, r2
 800be7e:	e7d5      	b.n	800be2c <__d2b+0x28>
 800be80:	6171      	str	r1, [r6, #20]
 800be82:	e7e7      	b.n	800be54 <__d2b+0x50>
 800be84:	a801      	add	r0, sp, #4
 800be86:	f7ff fd49 	bl	800b91c <__lo0bits>
 800be8a:	9b01      	ldr	r3, [sp, #4]
 800be8c:	2401      	movs	r4, #1
 800be8e:	6173      	str	r3, [r6, #20]
 800be90:	3020      	adds	r0, #32
 800be92:	e7e4      	b.n	800be5e <__d2b+0x5a>
 800be94:	4b09      	ldr	r3, [pc, #36]	; (800bebc <__d2b+0xb8>)
 800be96:	18c0      	adds	r0, r0, r3
 800be98:	4b09      	ldr	r3, [pc, #36]	; (800bec0 <__d2b+0xbc>)
 800be9a:	6038      	str	r0, [r7, #0]
 800be9c:	18e3      	adds	r3, r4, r3
 800be9e:	009b      	lsls	r3, r3, #2
 800bea0:	18f3      	adds	r3, r6, r3
 800bea2:	6958      	ldr	r0, [r3, #20]
 800bea4:	f7ff fd20 	bl	800b8e8 <__hi0bits>
 800bea8:	0164      	lsls	r4, r4, #5
 800beaa:	e7e0      	b.n	800be6e <__d2b+0x6a>
 800beac:	0800c810 	.word	0x0800c810
 800beb0:	0800c821 	.word	0x0800c821
 800beb4:	0000030f 	.word	0x0000030f
 800beb8:	fffffbcd 	.word	0xfffffbcd
 800bebc:	fffffbce 	.word	0xfffffbce
 800bec0:	3fffffff 	.word	0x3fffffff

0800bec4 <__sfputc_r>:
 800bec4:	6893      	ldr	r3, [r2, #8]
 800bec6:	b510      	push	{r4, lr}
 800bec8:	3b01      	subs	r3, #1
 800beca:	6093      	str	r3, [r2, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	da04      	bge.n	800beda <__sfputc_r+0x16>
 800bed0:	6994      	ldr	r4, [r2, #24]
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	db07      	blt.n	800bee6 <__sfputc_r+0x22>
 800bed6:	290a      	cmp	r1, #10
 800bed8:	d005      	beq.n	800bee6 <__sfputc_r+0x22>
 800beda:	6813      	ldr	r3, [r2, #0]
 800bedc:	1c58      	adds	r0, r3, #1
 800bede:	6010      	str	r0, [r2, #0]
 800bee0:	7019      	strb	r1, [r3, #0]
 800bee2:	0008      	movs	r0, r1
 800bee4:	bd10      	pop	{r4, pc}
 800bee6:	f7fe fc19 	bl	800a71c <__swbuf_r>
 800beea:	0001      	movs	r1, r0
 800beec:	e7f9      	b.n	800bee2 <__sfputc_r+0x1e>

0800beee <__sfputs_r>:
 800beee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef0:	0006      	movs	r6, r0
 800bef2:	000f      	movs	r7, r1
 800bef4:	0014      	movs	r4, r2
 800bef6:	18d5      	adds	r5, r2, r3
 800bef8:	42ac      	cmp	r4, r5
 800befa:	d101      	bne.n	800bf00 <__sfputs_r+0x12>
 800befc:	2000      	movs	r0, #0
 800befe:	e007      	b.n	800bf10 <__sfputs_r+0x22>
 800bf00:	7821      	ldrb	r1, [r4, #0]
 800bf02:	003a      	movs	r2, r7
 800bf04:	0030      	movs	r0, r6
 800bf06:	f7ff ffdd 	bl	800bec4 <__sfputc_r>
 800bf0a:	3401      	adds	r4, #1
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d1f3      	bne.n	800bef8 <__sfputs_r+0xa>
 800bf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf14 <_vfiprintf_r>:
 800bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf16:	b0a1      	sub	sp, #132	; 0x84
 800bf18:	000f      	movs	r7, r1
 800bf1a:	0015      	movs	r5, r2
 800bf1c:	001e      	movs	r6, r3
 800bf1e:	9003      	str	r0, [sp, #12]
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d004      	beq.n	800bf2e <_vfiprintf_r+0x1a>
 800bf24:	6a03      	ldr	r3, [r0, #32]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <_vfiprintf_r+0x1a>
 800bf2a:	f7fe faab 	bl	800a484 <__sinit>
 800bf2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf30:	07db      	lsls	r3, r3, #31
 800bf32:	d405      	bmi.n	800bf40 <_vfiprintf_r+0x2c>
 800bf34:	89bb      	ldrh	r3, [r7, #12]
 800bf36:	059b      	lsls	r3, r3, #22
 800bf38:	d402      	bmi.n	800bf40 <_vfiprintf_r+0x2c>
 800bf3a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bf3c:	f7fe fd2b 	bl	800a996 <__retarget_lock_acquire_recursive>
 800bf40:	89bb      	ldrh	r3, [r7, #12]
 800bf42:	071b      	lsls	r3, r3, #28
 800bf44:	d502      	bpl.n	800bf4c <_vfiprintf_r+0x38>
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d113      	bne.n	800bf74 <_vfiprintf_r+0x60>
 800bf4c:	0039      	movs	r1, r7
 800bf4e:	9803      	ldr	r0, [sp, #12]
 800bf50:	f7fe fc26 	bl	800a7a0 <__swsetup_r>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d00d      	beq.n	800bf74 <_vfiprintf_r+0x60>
 800bf58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf5a:	07db      	lsls	r3, r3, #31
 800bf5c:	d503      	bpl.n	800bf66 <_vfiprintf_r+0x52>
 800bf5e:	2001      	movs	r0, #1
 800bf60:	4240      	negs	r0, r0
 800bf62:	b021      	add	sp, #132	; 0x84
 800bf64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf66:	89bb      	ldrh	r3, [r7, #12]
 800bf68:	059b      	lsls	r3, r3, #22
 800bf6a:	d4f8      	bmi.n	800bf5e <_vfiprintf_r+0x4a>
 800bf6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bf6e:	f7fe fd13 	bl	800a998 <__retarget_lock_release_recursive>
 800bf72:	e7f4      	b.n	800bf5e <_vfiprintf_r+0x4a>
 800bf74:	2300      	movs	r3, #0
 800bf76:	ac08      	add	r4, sp, #32
 800bf78:	6163      	str	r3, [r4, #20]
 800bf7a:	3320      	adds	r3, #32
 800bf7c:	7663      	strb	r3, [r4, #25]
 800bf7e:	3310      	adds	r3, #16
 800bf80:	76a3      	strb	r3, [r4, #26]
 800bf82:	9607      	str	r6, [sp, #28]
 800bf84:	002e      	movs	r6, r5
 800bf86:	7833      	ldrb	r3, [r6, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d001      	beq.n	800bf90 <_vfiprintf_r+0x7c>
 800bf8c:	2b25      	cmp	r3, #37	; 0x25
 800bf8e:	d148      	bne.n	800c022 <_vfiprintf_r+0x10e>
 800bf90:	1b73      	subs	r3, r6, r5
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	42ae      	cmp	r6, r5
 800bf96:	d00b      	beq.n	800bfb0 <_vfiprintf_r+0x9c>
 800bf98:	002a      	movs	r2, r5
 800bf9a:	0039      	movs	r1, r7
 800bf9c:	9803      	ldr	r0, [sp, #12]
 800bf9e:	f7ff ffa6 	bl	800beee <__sfputs_r>
 800bfa2:	3001      	adds	r0, #1
 800bfa4:	d100      	bne.n	800bfa8 <_vfiprintf_r+0x94>
 800bfa6:	e0af      	b.n	800c108 <_vfiprintf_r+0x1f4>
 800bfa8:	6963      	ldr	r3, [r4, #20]
 800bfaa:	9a05      	ldr	r2, [sp, #20]
 800bfac:	189b      	adds	r3, r3, r2
 800bfae:	6163      	str	r3, [r4, #20]
 800bfb0:	7833      	ldrb	r3, [r6, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d100      	bne.n	800bfb8 <_vfiprintf_r+0xa4>
 800bfb6:	e0a7      	b.n	800c108 <_vfiprintf_r+0x1f4>
 800bfb8:	2201      	movs	r2, #1
 800bfba:	2300      	movs	r3, #0
 800bfbc:	4252      	negs	r2, r2
 800bfbe:	6062      	str	r2, [r4, #4]
 800bfc0:	a904      	add	r1, sp, #16
 800bfc2:	3254      	adds	r2, #84	; 0x54
 800bfc4:	1852      	adds	r2, r2, r1
 800bfc6:	1c75      	adds	r5, r6, #1
 800bfc8:	6023      	str	r3, [r4, #0]
 800bfca:	60e3      	str	r3, [r4, #12]
 800bfcc:	60a3      	str	r3, [r4, #8]
 800bfce:	7013      	strb	r3, [r2, #0]
 800bfd0:	65a3      	str	r3, [r4, #88]	; 0x58
 800bfd2:	4b59      	ldr	r3, [pc, #356]	; (800c138 <_vfiprintf_r+0x224>)
 800bfd4:	2205      	movs	r2, #5
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	7829      	ldrb	r1, [r5, #0]
 800bfda:	9305      	str	r3, [sp, #20]
 800bfdc:	f7fe fcdd 	bl	800a99a <memchr>
 800bfe0:	1c6e      	adds	r6, r5, #1
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d11f      	bne.n	800c026 <_vfiprintf_r+0x112>
 800bfe6:	6822      	ldr	r2, [r4, #0]
 800bfe8:	06d3      	lsls	r3, r2, #27
 800bfea:	d504      	bpl.n	800bff6 <_vfiprintf_r+0xe2>
 800bfec:	2353      	movs	r3, #83	; 0x53
 800bfee:	a904      	add	r1, sp, #16
 800bff0:	185b      	adds	r3, r3, r1
 800bff2:	2120      	movs	r1, #32
 800bff4:	7019      	strb	r1, [r3, #0]
 800bff6:	0713      	lsls	r3, r2, #28
 800bff8:	d504      	bpl.n	800c004 <_vfiprintf_r+0xf0>
 800bffa:	2353      	movs	r3, #83	; 0x53
 800bffc:	a904      	add	r1, sp, #16
 800bffe:	185b      	adds	r3, r3, r1
 800c000:	212b      	movs	r1, #43	; 0x2b
 800c002:	7019      	strb	r1, [r3, #0]
 800c004:	782b      	ldrb	r3, [r5, #0]
 800c006:	2b2a      	cmp	r3, #42	; 0x2a
 800c008:	d016      	beq.n	800c038 <_vfiprintf_r+0x124>
 800c00a:	002e      	movs	r6, r5
 800c00c:	2100      	movs	r1, #0
 800c00e:	200a      	movs	r0, #10
 800c010:	68e3      	ldr	r3, [r4, #12]
 800c012:	7832      	ldrb	r2, [r6, #0]
 800c014:	1c75      	adds	r5, r6, #1
 800c016:	3a30      	subs	r2, #48	; 0x30
 800c018:	2a09      	cmp	r2, #9
 800c01a:	d94e      	bls.n	800c0ba <_vfiprintf_r+0x1a6>
 800c01c:	2900      	cmp	r1, #0
 800c01e:	d111      	bne.n	800c044 <_vfiprintf_r+0x130>
 800c020:	e017      	b.n	800c052 <_vfiprintf_r+0x13e>
 800c022:	3601      	adds	r6, #1
 800c024:	e7af      	b.n	800bf86 <_vfiprintf_r+0x72>
 800c026:	9b05      	ldr	r3, [sp, #20]
 800c028:	6822      	ldr	r2, [r4, #0]
 800c02a:	1ac0      	subs	r0, r0, r3
 800c02c:	2301      	movs	r3, #1
 800c02e:	4083      	lsls	r3, r0
 800c030:	4313      	orrs	r3, r2
 800c032:	0035      	movs	r5, r6
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	e7cc      	b.n	800bfd2 <_vfiprintf_r+0xbe>
 800c038:	9b07      	ldr	r3, [sp, #28]
 800c03a:	1d19      	adds	r1, r3, #4
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	9107      	str	r1, [sp, #28]
 800c040:	2b00      	cmp	r3, #0
 800c042:	db01      	blt.n	800c048 <_vfiprintf_r+0x134>
 800c044:	930b      	str	r3, [sp, #44]	; 0x2c
 800c046:	e004      	b.n	800c052 <_vfiprintf_r+0x13e>
 800c048:	425b      	negs	r3, r3
 800c04a:	60e3      	str	r3, [r4, #12]
 800c04c:	2302      	movs	r3, #2
 800c04e:	4313      	orrs	r3, r2
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	7833      	ldrb	r3, [r6, #0]
 800c054:	2b2e      	cmp	r3, #46	; 0x2e
 800c056:	d10a      	bne.n	800c06e <_vfiprintf_r+0x15a>
 800c058:	7873      	ldrb	r3, [r6, #1]
 800c05a:	2b2a      	cmp	r3, #42	; 0x2a
 800c05c:	d135      	bne.n	800c0ca <_vfiprintf_r+0x1b6>
 800c05e:	9b07      	ldr	r3, [sp, #28]
 800c060:	3602      	adds	r6, #2
 800c062:	1d1a      	adds	r2, r3, #4
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	9207      	str	r2, [sp, #28]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	db2b      	blt.n	800c0c4 <_vfiprintf_r+0x1b0>
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	4d33      	ldr	r5, [pc, #204]	; (800c13c <_vfiprintf_r+0x228>)
 800c070:	2203      	movs	r2, #3
 800c072:	0028      	movs	r0, r5
 800c074:	7831      	ldrb	r1, [r6, #0]
 800c076:	f7fe fc90 	bl	800a99a <memchr>
 800c07a:	2800      	cmp	r0, #0
 800c07c:	d006      	beq.n	800c08c <_vfiprintf_r+0x178>
 800c07e:	2340      	movs	r3, #64	; 0x40
 800c080:	1b40      	subs	r0, r0, r5
 800c082:	4083      	lsls	r3, r0
 800c084:	6822      	ldr	r2, [r4, #0]
 800c086:	3601      	adds	r6, #1
 800c088:	4313      	orrs	r3, r2
 800c08a:	6023      	str	r3, [r4, #0]
 800c08c:	7831      	ldrb	r1, [r6, #0]
 800c08e:	2206      	movs	r2, #6
 800c090:	482b      	ldr	r0, [pc, #172]	; (800c140 <_vfiprintf_r+0x22c>)
 800c092:	1c75      	adds	r5, r6, #1
 800c094:	7621      	strb	r1, [r4, #24]
 800c096:	f7fe fc80 	bl	800a99a <memchr>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d043      	beq.n	800c126 <_vfiprintf_r+0x212>
 800c09e:	4b29      	ldr	r3, [pc, #164]	; (800c144 <_vfiprintf_r+0x230>)
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d125      	bne.n	800c0f0 <_vfiprintf_r+0x1dc>
 800c0a4:	2207      	movs	r2, #7
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	3307      	adds	r3, #7
 800c0aa:	4393      	bics	r3, r2
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	9307      	str	r3, [sp, #28]
 800c0b0:	6963      	ldr	r3, [r4, #20]
 800c0b2:	9a04      	ldr	r2, [sp, #16]
 800c0b4:	189b      	adds	r3, r3, r2
 800c0b6:	6163      	str	r3, [r4, #20]
 800c0b8:	e764      	b.n	800bf84 <_vfiprintf_r+0x70>
 800c0ba:	4343      	muls	r3, r0
 800c0bc:	002e      	movs	r6, r5
 800c0be:	2101      	movs	r1, #1
 800c0c0:	189b      	adds	r3, r3, r2
 800c0c2:	e7a6      	b.n	800c012 <_vfiprintf_r+0xfe>
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	425b      	negs	r3, r3
 800c0c8:	e7d0      	b.n	800c06c <_vfiprintf_r+0x158>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	200a      	movs	r0, #10
 800c0ce:	001a      	movs	r2, r3
 800c0d0:	3601      	adds	r6, #1
 800c0d2:	6063      	str	r3, [r4, #4]
 800c0d4:	7831      	ldrb	r1, [r6, #0]
 800c0d6:	1c75      	adds	r5, r6, #1
 800c0d8:	3930      	subs	r1, #48	; 0x30
 800c0da:	2909      	cmp	r1, #9
 800c0dc:	d903      	bls.n	800c0e6 <_vfiprintf_r+0x1d2>
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d0c5      	beq.n	800c06e <_vfiprintf_r+0x15a>
 800c0e2:	9209      	str	r2, [sp, #36]	; 0x24
 800c0e4:	e7c3      	b.n	800c06e <_vfiprintf_r+0x15a>
 800c0e6:	4342      	muls	r2, r0
 800c0e8:	002e      	movs	r6, r5
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	1852      	adds	r2, r2, r1
 800c0ee:	e7f1      	b.n	800c0d4 <_vfiprintf_r+0x1c0>
 800c0f0:	aa07      	add	r2, sp, #28
 800c0f2:	9200      	str	r2, [sp, #0]
 800c0f4:	0021      	movs	r1, r4
 800c0f6:	003a      	movs	r2, r7
 800c0f8:	4b13      	ldr	r3, [pc, #76]	; (800c148 <_vfiprintf_r+0x234>)
 800c0fa:	9803      	ldr	r0, [sp, #12]
 800c0fc:	f7fd fd5c 	bl	8009bb8 <_printf_float>
 800c100:	9004      	str	r0, [sp, #16]
 800c102:	9b04      	ldr	r3, [sp, #16]
 800c104:	3301      	adds	r3, #1
 800c106:	d1d3      	bne.n	800c0b0 <_vfiprintf_r+0x19c>
 800c108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c10a:	07db      	lsls	r3, r3, #31
 800c10c:	d405      	bmi.n	800c11a <_vfiprintf_r+0x206>
 800c10e:	89bb      	ldrh	r3, [r7, #12]
 800c110:	059b      	lsls	r3, r3, #22
 800c112:	d402      	bmi.n	800c11a <_vfiprintf_r+0x206>
 800c114:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c116:	f7fe fc3f 	bl	800a998 <__retarget_lock_release_recursive>
 800c11a:	89bb      	ldrh	r3, [r7, #12]
 800c11c:	065b      	lsls	r3, r3, #25
 800c11e:	d500      	bpl.n	800c122 <_vfiprintf_r+0x20e>
 800c120:	e71d      	b.n	800bf5e <_vfiprintf_r+0x4a>
 800c122:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c124:	e71d      	b.n	800bf62 <_vfiprintf_r+0x4e>
 800c126:	aa07      	add	r2, sp, #28
 800c128:	9200      	str	r2, [sp, #0]
 800c12a:	0021      	movs	r1, r4
 800c12c:	003a      	movs	r2, r7
 800c12e:	4b06      	ldr	r3, [pc, #24]	; (800c148 <_vfiprintf_r+0x234>)
 800c130:	9803      	ldr	r0, [sp, #12]
 800c132:	f7fe f807 	bl	800a144 <_printf_i>
 800c136:	e7e3      	b.n	800c100 <_vfiprintf_r+0x1ec>
 800c138:	0800c97c 	.word	0x0800c97c
 800c13c:	0800c982 	.word	0x0800c982
 800c140:	0800c986 	.word	0x0800c986
 800c144:	08009bb9 	.word	0x08009bb9
 800c148:	0800beef 	.word	0x0800beef

0800c14c <__sflush_r>:
 800c14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c14e:	898b      	ldrh	r3, [r1, #12]
 800c150:	0005      	movs	r5, r0
 800c152:	000c      	movs	r4, r1
 800c154:	071a      	lsls	r2, r3, #28
 800c156:	d45c      	bmi.n	800c212 <__sflush_r+0xc6>
 800c158:	684a      	ldr	r2, [r1, #4]
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	dc04      	bgt.n	800c168 <__sflush_r+0x1c>
 800c15e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c160:	2a00      	cmp	r2, #0
 800c162:	dc01      	bgt.n	800c168 <__sflush_r+0x1c>
 800c164:	2000      	movs	r0, #0
 800c166:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c168:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c16a:	2f00      	cmp	r7, #0
 800c16c:	d0fa      	beq.n	800c164 <__sflush_r+0x18>
 800c16e:	2200      	movs	r2, #0
 800c170:	2080      	movs	r0, #128	; 0x80
 800c172:	682e      	ldr	r6, [r5, #0]
 800c174:	602a      	str	r2, [r5, #0]
 800c176:	001a      	movs	r2, r3
 800c178:	0140      	lsls	r0, r0, #5
 800c17a:	6a21      	ldr	r1, [r4, #32]
 800c17c:	4002      	ands	r2, r0
 800c17e:	4203      	tst	r3, r0
 800c180:	d034      	beq.n	800c1ec <__sflush_r+0xa0>
 800c182:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	075b      	lsls	r3, r3, #29
 800c188:	d506      	bpl.n	800c198 <__sflush_r+0x4c>
 800c18a:	6863      	ldr	r3, [r4, #4]
 800c18c:	1ac0      	subs	r0, r0, r3
 800c18e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <__sflush_r+0x4c>
 800c194:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c196:	1ac0      	subs	r0, r0, r3
 800c198:	0002      	movs	r2, r0
 800c19a:	2300      	movs	r3, #0
 800c19c:	0028      	movs	r0, r5
 800c19e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c1a0:	6a21      	ldr	r1, [r4, #32]
 800c1a2:	47b8      	blx	r7
 800c1a4:	89a2      	ldrh	r2, [r4, #12]
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	d106      	bne.n	800c1b8 <__sflush_r+0x6c>
 800c1aa:	6829      	ldr	r1, [r5, #0]
 800c1ac:	291d      	cmp	r1, #29
 800c1ae:	d82c      	bhi.n	800c20a <__sflush_r+0xbe>
 800c1b0:	4b2a      	ldr	r3, [pc, #168]	; (800c25c <__sflush_r+0x110>)
 800c1b2:	410b      	asrs	r3, r1
 800c1b4:	07db      	lsls	r3, r3, #31
 800c1b6:	d428      	bmi.n	800c20a <__sflush_r+0xbe>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	6063      	str	r3, [r4, #4]
 800c1bc:	6923      	ldr	r3, [r4, #16]
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	04d2      	lsls	r2, r2, #19
 800c1c2:	d505      	bpl.n	800c1d0 <__sflush_r+0x84>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <__sflush_r+0x82>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d100      	bne.n	800c1d0 <__sflush_r+0x84>
 800c1ce:	6560      	str	r0, [r4, #84]	; 0x54
 800c1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1d2:	602e      	str	r6, [r5, #0]
 800c1d4:	2900      	cmp	r1, #0
 800c1d6:	d0c5      	beq.n	800c164 <__sflush_r+0x18>
 800c1d8:	0023      	movs	r3, r4
 800c1da:	3344      	adds	r3, #68	; 0x44
 800c1dc:	4299      	cmp	r1, r3
 800c1de:	d002      	beq.n	800c1e6 <__sflush_r+0x9a>
 800c1e0:	0028      	movs	r0, r5
 800c1e2:	f7ff fa8b 	bl	800b6fc <_free_r>
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	6360      	str	r0, [r4, #52]	; 0x34
 800c1ea:	e7bc      	b.n	800c166 <__sflush_r+0x1a>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	0028      	movs	r0, r5
 800c1f0:	47b8      	blx	r7
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	d1c6      	bne.n	800c184 <__sflush_r+0x38>
 800c1f6:	682b      	ldr	r3, [r5, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d0c3      	beq.n	800c184 <__sflush_r+0x38>
 800c1fc:	2b1d      	cmp	r3, #29
 800c1fe:	d001      	beq.n	800c204 <__sflush_r+0xb8>
 800c200:	2b16      	cmp	r3, #22
 800c202:	d101      	bne.n	800c208 <__sflush_r+0xbc>
 800c204:	602e      	str	r6, [r5, #0]
 800c206:	e7ad      	b.n	800c164 <__sflush_r+0x18>
 800c208:	89a2      	ldrh	r2, [r4, #12]
 800c20a:	2340      	movs	r3, #64	; 0x40
 800c20c:	4313      	orrs	r3, r2
 800c20e:	81a3      	strh	r3, [r4, #12]
 800c210:	e7a9      	b.n	800c166 <__sflush_r+0x1a>
 800c212:	690e      	ldr	r6, [r1, #16]
 800c214:	2e00      	cmp	r6, #0
 800c216:	d0a5      	beq.n	800c164 <__sflush_r+0x18>
 800c218:	680f      	ldr	r7, [r1, #0]
 800c21a:	600e      	str	r6, [r1, #0]
 800c21c:	1bba      	subs	r2, r7, r6
 800c21e:	9201      	str	r2, [sp, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	079b      	lsls	r3, r3, #30
 800c224:	d100      	bne.n	800c228 <__sflush_r+0xdc>
 800c226:	694a      	ldr	r2, [r1, #20]
 800c228:	60a2      	str	r2, [r4, #8]
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dd99      	ble.n	800c164 <__sflush_r+0x18>
 800c230:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c232:	0032      	movs	r2, r6
 800c234:	001f      	movs	r7, r3
 800c236:	0028      	movs	r0, r5
 800c238:	9b01      	ldr	r3, [sp, #4]
 800c23a:	6a21      	ldr	r1, [r4, #32]
 800c23c:	47b8      	blx	r7
 800c23e:	2800      	cmp	r0, #0
 800c240:	dc06      	bgt.n	800c250 <__sflush_r+0x104>
 800c242:	2340      	movs	r3, #64	; 0x40
 800c244:	2001      	movs	r0, #1
 800c246:	89a2      	ldrh	r2, [r4, #12]
 800c248:	4240      	negs	r0, r0
 800c24a:	4313      	orrs	r3, r2
 800c24c:	81a3      	strh	r3, [r4, #12]
 800c24e:	e78a      	b.n	800c166 <__sflush_r+0x1a>
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	1836      	adds	r6, r6, r0
 800c254:	1a1b      	subs	r3, r3, r0
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	e7e7      	b.n	800c22a <__sflush_r+0xde>
 800c25a:	46c0      	nop			; (mov r8, r8)
 800c25c:	dfbffffe 	.word	0xdfbffffe

0800c260 <_fflush_r>:
 800c260:	690b      	ldr	r3, [r1, #16]
 800c262:	b570      	push	{r4, r5, r6, lr}
 800c264:	0005      	movs	r5, r0
 800c266:	000c      	movs	r4, r1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <_fflush_r+0x12>
 800c26c:	2500      	movs	r5, #0
 800c26e:	0028      	movs	r0, r5
 800c270:	bd70      	pop	{r4, r5, r6, pc}
 800c272:	2800      	cmp	r0, #0
 800c274:	d004      	beq.n	800c280 <_fflush_r+0x20>
 800c276:	6a03      	ldr	r3, [r0, #32]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <_fflush_r+0x20>
 800c27c:	f7fe f902 	bl	800a484 <__sinit>
 800c280:	220c      	movs	r2, #12
 800c282:	5ea3      	ldrsh	r3, [r4, r2]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0f1      	beq.n	800c26c <_fflush_r+0xc>
 800c288:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c28a:	07d2      	lsls	r2, r2, #31
 800c28c:	d404      	bmi.n	800c298 <_fflush_r+0x38>
 800c28e:	059b      	lsls	r3, r3, #22
 800c290:	d402      	bmi.n	800c298 <_fflush_r+0x38>
 800c292:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c294:	f7fe fb7f 	bl	800a996 <__retarget_lock_acquire_recursive>
 800c298:	0028      	movs	r0, r5
 800c29a:	0021      	movs	r1, r4
 800c29c:	f7ff ff56 	bl	800c14c <__sflush_r>
 800c2a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2a2:	0005      	movs	r5, r0
 800c2a4:	07db      	lsls	r3, r3, #31
 800c2a6:	d4e2      	bmi.n	800c26e <_fflush_r+0xe>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	059b      	lsls	r3, r3, #22
 800c2ac:	d4df      	bmi.n	800c26e <_fflush_r+0xe>
 800c2ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2b0:	f7fe fb72 	bl	800a998 <__retarget_lock_release_recursive>
 800c2b4:	e7db      	b.n	800c26e <_fflush_r+0xe>
	...

0800c2b8 <__swhatbuf_r>:
 800c2b8:	b570      	push	{r4, r5, r6, lr}
 800c2ba:	000e      	movs	r6, r1
 800c2bc:	001d      	movs	r5, r3
 800c2be:	230e      	movs	r3, #14
 800c2c0:	5ec9      	ldrsh	r1, [r1, r3]
 800c2c2:	0014      	movs	r4, r2
 800c2c4:	b096      	sub	sp, #88	; 0x58
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	da0c      	bge.n	800c2e4 <__swhatbuf_r+0x2c>
 800c2ca:	89b2      	ldrh	r2, [r6, #12]
 800c2cc:	2380      	movs	r3, #128	; 0x80
 800c2ce:	0011      	movs	r1, r2
 800c2d0:	4019      	ands	r1, r3
 800c2d2:	421a      	tst	r2, r3
 800c2d4:	d013      	beq.n	800c2fe <__swhatbuf_r+0x46>
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	3b40      	subs	r3, #64	; 0x40
 800c2da:	2000      	movs	r0, #0
 800c2dc:	6029      	str	r1, [r5, #0]
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	b016      	add	sp, #88	; 0x58
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	466a      	mov	r2, sp
 800c2e6:	f000 f84d 	bl	800c384 <_fstat_r>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	dbed      	blt.n	800c2ca <__swhatbuf_r+0x12>
 800c2ee:	23f0      	movs	r3, #240	; 0xf0
 800c2f0:	9901      	ldr	r1, [sp, #4]
 800c2f2:	021b      	lsls	r3, r3, #8
 800c2f4:	4019      	ands	r1, r3
 800c2f6:	4b03      	ldr	r3, [pc, #12]	; (800c304 <__swhatbuf_r+0x4c>)
 800c2f8:	18c9      	adds	r1, r1, r3
 800c2fa:	424b      	negs	r3, r1
 800c2fc:	4159      	adcs	r1, r3
 800c2fe:	2380      	movs	r3, #128	; 0x80
 800c300:	00db      	lsls	r3, r3, #3
 800c302:	e7ea      	b.n	800c2da <__swhatbuf_r+0x22>
 800c304:	ffffe000 	.word	0xffffe000

0800c308 <__smakebuf_r>:
 800c308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c30a:	2602      	movs	r6, #2
 800c30c:	898b      	ldrh	r3, [r1, #12]
 800c30e:	0005      	movs	r5, r0
 800c310:	000c      	movs	r4, r1
 800c312:	4233      	tst	r3, r6
 800c314:	d006      	beq.n	800c324 <__smakebuf_r+0x1c>
 800c316:	0023      	movs	r3, r4
 800c318:	3347      	adds	r3, #71	; 0x47
 800c31a:	6023      	str	r3, [r4, #0]
 800c31c:	6123      	str	r3, [r4, #16]
 800c31e:	2301      	movs	r3, #1
 800c320:	6163      	str	r3, [r4, #20]
 800c322:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c324:	466a      	mov	r2, sp
 800c326:	ab01      	add	r3, sp, #4
 800c328:	f7ff ffc6 	bl	800c2b8 <__swhatbuf_r>
 800c32c:	9900      	ldr	r1, [sp, #0]
 800c32e:	0007      	movs	r7, r0
 800c330:	0028      	movs	r0, r5
 800c332:	f7fd fb07 	bl	8009944 <_malloc_r>
 800c336:	2800      	cmp	r0, #0
 800c338:	d108      	bne.n	800c34c <__smakebuf_r+0x44>
 800c33a:	220c      	movs	r2, #12
 800c33c:	5ea3      	ldrsh	r3, [r4, r2]
 800c33e:	059a      	lsls	r2, r3, #22
 800c340:	d4ef      	bmi.n	800c322 <__smakebuf_r+0x1a>
 800c342:	2203      	movs	r2, #3
 800c344:	4393      	bics	r3, r2
 800c346:	431e      	orrs	r6, r3
 800c348:	81a6      	strh	r6, [r4, #12]
 800c34a:	e7e4      	b.n	800c316 <__smakebuf_r+0xe>
 800c34c:	2380      	movs	r3, #128	; 0x80
 800c34e:	89a2      	ldrh	r2, [r4, #12]
 800c350:	6020      	str	r0, [r4, #0]
 800c352:	4313      	orrs	r3, r2
 800c354:	81a3      	strh	r3, [r4, #12]
 800c356:	9b00      	ldr	r3, [sp, #0]
 800c358:	6120      	str	r0, [r4, #16]
 800c35a:	6163      	str	r3, [r4, #20]
 800c35c:	9b01      	ldr	r3, [sp, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00c      	beq.n	800c37c <__smakebuf_r+0x74>
 800c362:	0028      	movs	r0, r5
 800c364:	230e      	movs	r3, #14
 800c366:	5ee1      	ldrsh	r1, [r4, r3]
 800c368:	f000 f81e 	bl	800c3a8 <_isatty_r>
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d005      	beq.n	800c37c <__smakebuf_r+0x74>
 800c370:	2303      	movs	r3, #3
 800c372:	89a2      	ldrh	r2, [r4, #12]
 800c374:	439a      	bics	r2, r3
 800c376:	3b02      	subs	r3, #2
 800c378:	4313      	orrs	r3, r2
 800c37a:	81a3      	strh	r3, [r4, #12]
 800c37c:	89a3      	ldrh	r3, [r4, #12]
 800c37e:	433b      	orrs	r3, r7
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	e7ce      	b.n	800c322 <__smakebuf_r+0x1a>

0800c384 <_fstat_r>:
 800c384:	2300      	movs	r3, #0
 800c386:	b570      	push	{r4, r5, r6, lr}
 800c388:	4d06      	ldr	r5, [pc, #24]	; (800c3a4 <_fstat_r+0x20>)
 800c38a:	0004      	movs	r4, r0
 800c38c:	0008      	movs	r0, r1
 800c38e:	0011      	movs	r1, r2
 800c390:	602b      	str	r3, [r5, #0]
 800c392:	f7f8 fbec 	bl	8004b6e <_fstat>
 800c396:	1c43      	adds	r3, r0, #1
 800c398:	d103      	bne.n	800c3a2 <_fstat_r+0x1e>
 800c39a:	682b      	ldr	r3, [r5, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d000      	beq.n	800c3a2 <_fstat_r+0x1e>
 800c3a0:	6023      	str	r3, [r4, #0]
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	20000a60 	.word	0x20000a60

0800c3a8 <_isatty_r>:
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	b570      	push	{r4, r5, r6, lr}
 800c3ac:	4d06      	ldr	r5, [pc, #24]	; (800c3c8 <_isatty_r+0x20>)
 800c3ae:	0004      	movs	r4, r0
 800c3b0:	0008      	movs	r0, r1
 800c3b2:	602b      	str	r3, [r5, #0]
 800c3b4:	f7f8 fbe9 	bl	8004b8a <_isatty>
 800c3b8:	1c43      	adds	r3, r0, #1
 800c3ba:	d103      	bne.n	800c3c4 <_isatty_r+0x1c>
 800c3bc:	682b      	ldr	r3, [r5, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d000      	beq.n	800c3c4 <_isatty_r+0x1c>
 800c3c2:	6023      	str	r3, [r4, #0]
 800c3c4:	bd70      	pop	{r4, r5, r6, pc}
 800c3c6:	46c0      	nop			; (mov r8, r8)
 800c3c8:	20000a60 	.word	0x20000a60

0800c3cc <__assert_func>:
 800c3cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c3ce:	0014      	movs	r4, r2
 800c3d0:	001a      	movs	r2, r3
 800c3d2:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <__assert_func+0x2c>)
 800c3d4:	0005      	movs	r5, r0
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	000e      	movs	r6, r1
 800c3da:	68d8      	ldr	r0, [r3, #12]
 800c3dc:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <__assert_func+0x30>)
 800c3de:	2c00      	cmp	r4, #0
 800c3e0:	d101      	bne.n	800c3e6 <__assert_func+0x1a>
 800c3e2:	4b07      	ldr	r3, [pc, #28]	; (800c400 <__assert_func+0x34>)
 800c3e4:	001c      	movs	r4, r3
 800c3e6:	4907      	ldr	r1, [pc, #28]	; (800c404 <__assert_func+0x38>)
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	9402      	str	r4, [sp, #8]
 800c3ec:	002b      	movs	r3, r5
 800c3ee:	9600      	str	r6, [sp, #0]
 800c3f0:	f000 f856 	bl	800c4a0 <fiprintf>
 800c3f4:	f000 f864 	bl	800c4c0 <abort>
 800c3f8:	200001f4 	.word	0x200001f4
 800c3fc:	0800c997 	.word	0x0800c997
 800c400:	0800c9d2 	.word	0x0800c9d2
 800c404:	0800c9a4 	.word	0x0800c9a4

0800c408 <_calloc_r>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	0c0b      	lsrs	r3, r1, #16
 800c40c:	0c15      	lsrs	r5, r2, #16
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d11e      	bne.n	800c450 <_calloc_r+0x48>
 800c412:	2d00      	cmp	r5, #0
 800c414:	d10c      	bne.n	800c430 <_calloc_r+0x28>
 800c416:	b289      	uxth	r1, r1
 800c418:	b294      	uxth	r4, r2
 800c41a:	434c      	muls	r4, r1
 800c41c:	0021      	movs	r1, r4
 800c41e:	f7fd fa91 	bl	8009944 <_malloc_r>
 800c422:	1e05      	subs	r5, r0, #0
 800c424:	d01b      	beq.n	800c45e <_calloc_r+0x56>
 800c426:	0022      	movs	r2, r4
 800c428:	2100      	movs	r1, #0
 800c42a:	f7fe fa1d 	bl	800a868 <memset>
 800c42e:	e016      	b.n	800c45e <_calloc_r+0x56>
 800c430:	1c2b      	adds	r3, r5, #0
 800c432:	1c0c      	adds	r4, r1, #0
 800c434:	b289      	uxth	r1, r1
 800c436:	b292      	uxth	r2, r2
 800c438:	434a      	muls	r2, r1
 800c43a:	b2a1      	uxth	r1, r4
 800c43c:	b29c      	uxth	r4, r3
 800c43e:	434c      	muls	r4, r1
 800c440:	0c13      	lsrs	r3, r2, #16
 800c442:	18e4      	adds	r4, r4, r3
 800c444:	0c23      	lsrs	r3, r4, #16
 800c446:	d107      	bne.n	800c458 <_calloc_r+0x50>
 800c448:	0424      	lsls	r4, r4, #16
 800c44a:	b292      	uxth	r2, r2
 800c44c:	4314      	orrs	r4, r2
 800c44e:	e7e5      	b.n	800c41c <_calloc_r+0x14>
 800c450:	2d00      	cmp	r5, #0
 800c452:	d101      	bne.n	800c458 <_calloc_r+0x50>
 800c454:	1c14      	adds	r4, r2, #0
 800c456:	e7ed      	b.n	800c434 <_calloc_r+0x2c>
 800c458:	230c      	movs	r3, #12
 800c45a:	2500      	movs	r5, #0
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	0028      	movs	r0, r5
 800c460:	bd70      	pop	{r4, r5, r6, pc}

0800c462 <__ascii_mbtowc>:
 800c462:	b082      	sub	sp, #8
 800c464:	2900      	cmp	r1, #0
 800c466:	d100      	bne.n	800c46a <__ascii_mbtowc+0x8>
 800c468:	a901      	add	r1, sp, #4
 800c46a:	1e10      	subs	r0, r2, #0
 800c46c:	d006      	beq.n	800c47c <__ascii_mbtowc+0x1a>
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d006      	beq.n	800c480 <__ascii_mbtowc+0x1e>
 800c472:	7813      	ldrb	r3, [r2, #0]
 800c474:	600b      	str	r3, [r1, #0]
 800c476:	7810      	ldrb	r0, [r2, #0]
 800c478:	1e43      	subs	r3, r0, #1
 800c47a:	4198      	sbcs	r0, r3
 800c47c:	b002      	add	sp, #8
 800c47e:	4770      	bx	lr
 800c480:	2002      	movs	r0, #2
 800c482:	4240      	negs	r0, r0
 800c484:	e7fa      	b.n	800c47c <__ascii_mbtowc+0x1a>

0800c486 <__ascii_wctomb>:
 800c486:	0003      	movs	r3, r0
 800c488:	1e08      	subs	r0, r1, #0
 800c48a:	d005      	beq.n	800c498 <__ascii_wctomb+0x12>
 800c48c:	2aff      	cmp	r2, #255	; 0xff
 800c48e:	d904      	bls.n	800c49a <__ascii_wctomb+0x14>
 800c490:	228a      	movs	r2, #138	; 0x8a
 800c492:	2001      	movs	r0, #1
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	4240      	negs	r0, r0
 800c498:	4770      	bx	lr
 800c49a:	2001      	movs	r0, #1
 800c49c:	700a      	strb	r2, [r1, #0]
 800c49e:	e7fb      	b.n	800c498 <__ascii_wctomb+0x12>

0800c4a0 <fiprintf>:
 800c4a0:	b40e      	push	{r1, r2, r3}
 800c4a2:	b517      	push	{r0, r1, r2, r4, lr}
 800c4a4:	4c05      	ldr	r4, [pc, #20]	; (800c4bc <fiprintf+0x1c>)
 800c4a6:	ab05      	add	r3, sp, #20
 800c4a8:	cb04      	ldmia	r3!, {r2}
 800c4aa:	0001      	movs	r1, r0
 800c4ac:	6820      	ldr	r0, [r4, #0]
 800c4ae:	9301      	str	r3, [sp, #4]
 800c4b0:	f7ff fd30 	bl	800bf14 <_vfiprintf_r>
 800c4b4:	bc1e      	pop	{r1, r2, r3, r4}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	b003      	add	sp, #12
 800c4ba:	4718      	bx	r3
 800c4bc:	200001f4 	.word	0x200001f4

0800c4c0 <abort>:
 800c4c0:	2006      	movs	r0, #6
 800c4c2:	b510      	push	{r4, lr}
 800c4c4:	f000 f82e 	bl	800c524 <raise>
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	f7f8 fb01 	bl	8004ad0 <_exit>

0800c4ce <_raise_r>:
 800c4ce:	b570      	push	{r4, r5, r6, lr}
 800c4d0:	0004      	movs	r4, r0
 800c4d2:	000d      	movs	r5, r1
 800c4d4:	291f      	cmp	r1, #31
 800c4d6:	d904      	bls.n	800c4e2 <_raise_r+0x14>
 800c4d8:	2316      	movs	r3, #22
 800c4da:	6003      	str	r3, [r0, #0]
 800c4dc:	2001      	movs	r0, #1
 800c4de:	4240      	negs	r0, r0
 800c4e0:	bd70      	pop	{r4, r5, r6, pc}
 800c4e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d004      	beq.n	800c4f2 <_raise_r+0x24>
 800c4e8:	008a      	lsls	r2, r1, #2
 800c4ea:	189b      	adds	r3, r3, r2
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	d108      	bne.n	800c504 <_raise_r+0x36>
 800c4f2:	0020      	movs	r0, r4
 800c4f4:	f000 f832 	bl	800c55c <_getpid_r>
 800c4f8:	002a      	movs	r2, r5
 800c4fa:	0001      	movs	r1, r0
 800c4fc:	0020      	movs	r0, r4
 800c4fe:	f000 f81b 	bl	800c538 <_kill_r>
 800c502:	e7ed      	b.n	800c4e0 <_raise_r+0x12>
 800c504:	2000      	movs	r0, #0
 800c506:	2a01      	cmp	r2, #1
 800c508:	d0ea      	beq.n	800c4e0 <_raise_r+0x12>
 800c50a:	1c51      	adds	r1, r2, #1
 800c50c:	d103      	bne.n	800c516 <_raise_r+0x48>
 800c50e:	2316      	movs	r3, #22
 800c510:	3001      	adds	r0, #1
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	e7e4      	b.n	800c4e0 <_raise_r+0x12>
 800c516:	2400      	movs	r4, #0
 800c518:	0028      	movs	r0, r5
 800c51a:	601c      	str	r4, [r3, #0]
 800c51c:	4790      	blx	r2
 800c51e:	0020      	movs	r0, r4
 800c520:	e7de      	b.n	800c4e0 <_raise_r+0x12>
	...

0800c524 <raise>:
 800c524:	b510      	push	{r4, lr}
 800c526:	4b03      	ldr	r3, [pc, #12]	; (800c534 <raise+0x10>)
 800c528:	0001      	movs	r1, r0
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	f7ff ffcf 	bl	800c4ce <_raise_r>
 800c530:	bd10      	pop	{r4, pc}
 800c532:	46c0      	nop			; (mov r8, r8)
 800c534:	200001f4 	.word	0x200001f4

0800c538 <_kill_r>:
 800c538:	2300      	movs	r3, #0
 800c53a:	b570      	push	{r4, r5, r6, lr}
 800c53c:	4d06      	ldr	r5, [pc, #24]	; (800c558 <_kill_r+0x20>)
 800c53e:	0004      	movs	r4, r0
 800c540:	0008      	movs	r0, r1
 800c542:	0011      	movs	r1, r2
 800c544:	602b      	str	r3, [r5, #0]
 800c546:	f7f8 fab3 	bl	8004ab0 <_kill>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d103      	bne.n	800c556 <_kill_r+0x1e>
 800c54e:	682b      	ldr	r3, [r5, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d000      	beq.n	800c556 <_kill_r+0x1e>
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	bd70      	pop	{r4, r5, r6, pc}
 800c558:	20000a60 	.word	0x20000a60

0800c55c <_getpid_r>:
 800c55c:	b510      	push	{r4, lr}
 800c55e:	f7f8 faa1 	bl	8004aa4 <_getpid>
 800c562:	bd10      	pop	{r4, pc}

0800c564 <_init>:
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	46c0      	nop			; (mov r8, r8)
 800c568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56a:	bc08      	pop	{r3}
 800c56c:	469e      	mov	lr, r3
 800c56e:	4770      	bx	lr

0800c570 <_fini>:
 800c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c572:	46c0      	nop			; (mov r8, r8)
 800c574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c576:	bc08      	pop	{r3}
 800c578:	469e      	mov	lr, r3
 800c57a:	4770      	bx	lr
